{
"scope": "source.js",
"completions":[
{ "trigger": "cc.GLNode.extend", "contents": "cc.GLNode.extend()" },
{ "trigger": "ccs.Armature.extend", "contents": "ccs.Armature.extend()" },
{ "trigger": "ccui.Widget.extend", "contents": "ccui.Widget.extend()" },
{ "trigger": "ccui.Button.extend", "contents": "ccui.Button.extend()" },
{ "trigger": "ccui.CheckBox.extend", "contents": "ccui.CheckBox.extend()" },
{ "trigger": "ccui.ImageView.extend", "contents": "ccui.ImageView.extend()" },
{ "trigger": "ccui.LoadingBar.extend", "contents": "ccui.LoadingBar.extend()" },
{ "trigger": "ccui.RichText.extend", "contents": "ccui.RichText.extend()" },
{ "trigger": "ccui.Slider.extend", "contents": "ccui.Slider.extend()" },
{ "trigger": "ccui.Text.extend", "contents": "ccui.Text.extend()" },
{ "trigger": "ccui.TextAtlas.extend", "contents": "ccui.TextAtlas.extend()" },
{ "trigger": "ccui.TextBMFont.extend", "contents": "ccui.TextBMFont.extend()" },
{ "trigger": "ccui.TextField.extend", "contents": "ccui.TextField.extend()" },
{ "trigger": "ccui.Layout.extend", "contents": "ccui.Layout.extend()" },
{ "trigger": "ccui.ListView.extend", "contents": "ccui.ListView.extend()" },
{ "trigger": "ccui.PageView.extend", "contents": "ccui.PageView.extend()" },
{ "trigger": "ccui.ScrollView.extend", "contents": "ccui.ScrollView.extend()" },
{ "trigger": "ccui.Scale9Sprite.extend", "contents": "ccui.Scale9Sprite.extend()" },
{ "trigger": "cc.PhysicsSprite.extend", "contents": "cc.PhysicsSprite.extend()" },
{ "trigger": "cc.each(obj, iterator, context)", "contents": "cc.each(obj, iterator, context)" },
{ "trigger": "cc.extend(target)", "contents": "cc.extend(target)" },
{ "trigger": "cc.isFunction(obj)", "contents": "cc.isFunction(obj)" },
{ "trigger": "cc.isNumber(obj)", "contents": "cc.isNumber(obj)" },
{ "trigger": "cc.isString(obj)", "contents": "cc.isString(obj)" },
{ "trigger": "cc.isArray(obj)", "contents": "cc.isArray(obj)" },
{ "trigger": "cc.isUndefined(obj)", "contents": "cc.isUndefined(obj)" },
{ "trigger": "cc.isObject(obj)", "contents": "cc.isObject(obj)" },
{ "trigger": "cc.isCrossOrigin(url)", "contents": "cc.isCrossOrigin(url)" },
{ "trigger": "cc.defineGetterSetter(proto, prop, getter, setter)", "contents": "cc.defineGetterSetter(proto, prop, getter, setter)" },
{ "trigger": "cc.AsyncPool(srcObj, limit, iterator, onEnd, target)", "contents": "cc.AsyncPool(srcObj, limit, iterator, onEnd, target)" },
{ "trigger": "self.onIterator(iterator, target)", "contents": "self.onIterator(iterator, target)" },
{ "trigger": "self.onEnd(endCb, endCbTarget)", "contents": "self.onEnd(endCb, endCbTarget)" },
{ "trigger": "self._handleItem()", "contents": "self._handleItem()" },
{ "trigger": "self.flow()", "contents": "self.flow()" },
{ "trigger": "cc.formatStr()", "contents": "cc.formatStr()" },
{ "trigger": "cc.view.getDevicePixelRatio()", "contents": "cc.view.getDevicePixelRatio()" },
{ "trigger": "cc.view.convertToLocationInView(tx, ty, relatedPos)", "contents": "cc.view.convertToLocationInView(tx, ty, relatedPos)" },
{ "trigger": "cc.view.enableRetina(enabled)", "contents": "cc.view.enableRetina(enabled)" },
{ "trigger": "cc.view.isRetinaEnabled()", "contents": "cc.view.isRetinaEnabled()" },
{ "trigger": "cc.view.adjustViewPort()", "contents": "cc.view.adjustViewPort()" },
{ "trigger": "cc.view.resizeWithBrowserSize()", "contents": "cc.view.resizeWithBrowserSize()" },
{ "trigger": "cc.view.setResizeCallback()", "contents": "cc.view.setResizeCallback()" },
{ "trigger": "cc.view.enableAutoFullScreen()", "contents": "cc.view.enableAutoFullScreen()" },
{ "trigger": "cc.view.isAutoFullScreenEnabled()", "contents": "cc.view.isAutoFullScreenEnabled()" },
{ "trigger": "cc.view.setDesignResolutionSize(width,height,resolutionPolicy)", "contents": "cc.view.setDesignResolutionSize(width,height,resolutionPolicy)" },
{ "trigger": "cc.view.setResolutionPolicy(resolutionPolicy)", "contents": "cc.view.setResolutionPolicy(resolutionPolicy)" },
{ "trigger": "cc.view.setContentTranslateLeftTop()", "contents": "cc.view.setContentTranslateLeftTop()" },
{ "trigger": "cc.view.getContentTranslateLeftTop()", "contents": "cc.view.getContentTranslateLeftTop()" },
{ "trigger": "cc.view.setFrameZoomFactor()", "contents": "cc.view.setFrameZoomFactor()" },
{ "trigger": "cc.view.setTargetDensityDPI()", "contents": "cc.view.setTargetDensityDPI()" },
{ "trigger": "cc.view.getTargetDensityDPI()", "contents": "cc.view.getTargetDensityDPI()" },
{ "trigger": "cc.audioEngine.end()", "contents": "cc.audioEngine.end()" },
{ "trigger": "cc.TextureCache.prototype.addImageAsync(url, cb, target)", "contents": "cc.TextureCache.prototype.addImageAsync(url, cb, target)" },
{ "trigger": "cc.TextureCache.prototype.addImage(url, cb, target)", "contents": "cc.TextureCache.prototype.addImage(url, cb, target)" },
{ "trigger": "cc._initSys(config, CONFIG_KEY)", "contents": "cc._initSys(config, CONFIG_KEY)" },
{ "trigger": "locSys.garbageCollect()", "contents": "locSys.garbageCollect()" },
{ "trigger": "locSys.dumpRoot()", "contents": "locSys.dumpRoot()" },
{ "trigger": "locSys.restartVM()", "contents": "locSys.restartVM()" },
{ "trigger": "locSys.cleanScript(jsFile)", "contents": "locSys.cleanScript(jsFile)" },
{ "trigger": "locSys.isObjectValid(obj)", "contents": "locSys.isObjectValid(obj)" },
{ "trigger": "locSys.dump()", "contents": "locSys.dump()" },
{ "trigger": "locSys.openURL(url)", "contents": "locSys.openURL(url)" },
{ "trigger": "cc._initDebugSetting(mode)", "contents": "cc._initDebugSetting(mode)" },
{ "trigger": "cc.assert()", "contents": "cc.assert()" },
{ "trigger": "cc.error()", "contents": "cc.error()" },
{ "trigger": "cc.assert(cond, msg)", "contents": "cc.assert(cond, msg)" },
{ "trigger": "cc.warn()", "contents": "cc.warn()" },
{ "trigger": "cc.log()", "contents": "cc.log()" },
{ "trigger": "_init(cfg)", "contents": "_init(cfg)" },
{ "trigger": "cc.swap(x, y, ref)", "contents": "cc.swap(x, y, ref)" },
{ "trigger": "cc.lerp(a, b, r)", "contents": "cc.lerp(a, b, r)" },
{ "trigger": "cc.rand()", "contents": "cc.rand()" },
{ "trigger": "cc.randomMinus1To1()", "contents": "cc.randomMinus1To1()" },
{ "trigger": "cc.degreesToRadians(angle)", "contents": "cc.degreesToRadians(angle)" },
{ "trigger": "cc.radiansToDegrees(angle)", "contents": "cc.radiansToDegrees(angle)" },
{ "trigger": "cc.nodeDrawSetup(node)", "contents": "cc.nodeDrawSetup(node)" },
{ "trigger": "cc.enableDefaultGLStates()", "contents": "cc.enableDefaultGLStates()" },
{ "trigger": "cc.disableDefaultGLStates()", "contents": "cc.disableDefaultGLStates()" },
{ "trigger": "cc.incrementGLDraws(addNumber)", "contents": "cc.incrementGLDraws(addNumber)" },
{ "trigger": "cc.pointPointsToPixels(points)", "contents": "cc.pointPointsToPixels(points)" },
{ "trigger": "cc.pointPixelsToPoints(pixels)", "contents": "cc.pointPixelsToPoints(pixels)" },
{ "trigger": "cc._pointPixelsToPointsOut(pixels, outPoint)", "contents": "cc._pointPixelsToPointsOut(pixels, outPoint)" },
{ "trigger": "cc.sizePointsToPixels(sizeInPoints)", "contents": "cc.sizePointsToPixels(sizeInPoints)" },
{ "trigger": "cc.sizePixelsToPoints(sizeInPixels)", "contents": "cc.sizePixelsToPoints(sizeInPixels)" },
{ "trigger": "cc._sizePixelsToPointsOut(sizeInPixels, outSize)", "contents": "cc._sizePixelsToPointsOut(sizeInPixels, outSize)" },
{ "trigger": "cc.checkGLErrorDebug()", "contents": "cc.checkGLErrorDebug()" },
{ "trigger": "cc.p( x, y )", "contents": "cc.p( x, y )" },
{ "trigger": "cc._p( x, y )", "contents": "cc._p( x, y )" },
{ "trigger": "cc.pointEqualToPoint(point1, point2)", "contents": "cc.pointEqualToPoint(point1, point2)" },
{ "trigger": "cc.PointZero()", "contents": "cc.PointZero()" },
{ "trigger": "cc.pUnrotate(v1, v2)", "contents": "cc.pUnrotate(v1, v2)" },
{ "trigger": "cc.pForAngle(a)", "contents": "cc.pForAngle(a)" },
{ "trigger": "cc.pToAngle(v)", "contents": "cc.pToAngle(v)" },
{ "trigger": "cc.clampf(value, min_inclusive, max_inclusive)", "contents": "cc.clampf(value, min_inclusive, max_inclusive)" },
{ "trigger": "cc.pFromSize(s)", "contents": "cc.pFromSize(s)" },
{ "trigger": "cc.pCompOp(p, opFunc)", "contents": "cc.pCompOp(p, opFunc)" },
{ "trigger": "cc.pLerp(a, b, alpha)", "contents": "cc.pLerp(a, b, alpha)" },
{ "trigger": "cc.pFuzzyEqual(a, b, variance)", "contents": "cc.pFuzzyEqual(a, b, variance)" },
{ "trigger": "cc.pCompMult(a, b)", "contents": "cc.pCompMult(a, b)" },
{ "trigger": "cc.pAngleSigned(a, b)", "contents": "cc.pAngleSigned(a, b)" },
{ "trigger": "cc.pAngle(a, b)", "contents": "cc.pAngle(a, b)" },
{ "trigger": "cc.pRotateByAngle(v, pivot, angle)", "contents": "cc.pRotateByAngle(v, pivot, angle)" },
{ "trigger": "cc.pLineIntersect(A, B, C, D, retP)", "contents": "cc.pLineIntersect(A, B, C, D, retP)" },
{ "trigger": "cc.pSegmentIntersect(A, B, C, D)", "contents": "cc.pSegmentIntersect(A, B, C, D)" },
{ "trigger": "cc.pIntersectPoint(A, B, C, D)", "contents": "cc.pIntersectPoint(A, B, C, D)" },
{ "trigger": "cc.pSameAs(A, B)", "contents": "cc.pSameAs(A, B)" },
{ "trigger": "cc.pZeroIn(v)", "contents": "cc.pZeroIn(v)" },
{ "trigger": "cc.pIn(v1, v2)", "contents": "cc.pIn(v1, v2)" },
{ "trigger": "cc.pMultIn(point, floatVar)", "contents": "cc.pMultIn(point, floatVar)" },
{ "trigger": "cc.pSubIn(v1, v2)", "contents": "cc.pSubIn(v1, v2)" },
{ "trigger": "cc.pAddIn(v1, v2)", "contents": "cc.pAddIn(v1, v2)" },
{ "trigger": "cc.pNormalizeIn(v)", "contents": "cc.pNormalizeIn(v)" },
{ "trigger": "cc._g( x, y )", "contents": "cc._g( x, y )" },
{ "trigger": "cc.size(w,h)", "contents": "cc.size(w,h)" },
{ "trigger": "cc._size(w,h)", "contents": "cc._size(w,h)" },
{ "trigger": "cc.sizeEqualToSize(size1, size2)", "contents": "cc.sizeEqualToSize(size1, size2)" },
{ "trigger": "cc.SizeZero()", "contents": "cc.SizeZero()" },
{ "trigger": "cc.rect(x,y,w,h)", "contents": "cc.rect(x,y,w,h)" },
{ "trigger": "cc._rect(x,y,w,h)", "contents": "cc._rect(x,y,w,h)" },
{ "trigger": "cc.rectEqualToRect(rect1, rect2)", "contents": "cc.rectEqualToRect(rect1, rect2)" },
{ "trigger": "cc.rectContainsRect(rect1, rect2)", "contents": "cc.rectContainsRect(rect1, rect2)" },
{ "trigger": "cc.rectGetMaxX(rect)", "contents": "cc.rectGetMaxX(rect)" },
{ "trigger": "cc.rectGetMidX(rect)", "contents": "cc.rectGetMidX(rect)" },
{ "trigger": "cc.rectGetMinX(rect)", "contents": "cc.rectGetMinX(rect)" },
{ "trigger": "cc.rectGetMaxY(rect)", "contents": "cc.rectGetMaxY(rect)" },
{ "trigger": "cc.rectGetMidY(rect)", "contents": "cc.rectGetMidY(rect)" },
{ "trigger": "cc.rectGetMinY(rect)", "contents": "cc.rectGetMinY(rect)" },
{ "trigger": "cc.rectContainsPoint(rect, point)", "contents": "cc.rectContainsPoint(rect, point)" },
{ "trigger": "cc.rectIntersectsRect( rectA, rectB )", "contents": "cc.rectIntersectsRect( rectA, rectB )" },
{ "trigger": "cc.rectOverlapsRect(rectA, rectB)", "contents": "cc.rectOverlapsRect(rectA, rectB)" },
{ "trigger": "cc.rectUnion(rectA, rectB)", "contents": "cc.rectUnion(rectA, rectB)" },
{ "trigger": "cc.rectIntersection(rectA, rectB)", "contents": "cc.rectIntersection(rectA, rectB)" },
{ "trigger": "cc.RectZero()", "contents": "cc.RectZero()" },
{ "trigger": "cc.Color(r, g, b, a)", "contents": "cc.Color(r, g, b, a)" },
{ "trigger": "cc.color(r, g, b, a)", "contents": "cc.color(r, g, b, a)" },
{ "trigger": "cc.colorEqual(color1, color2)", "contents": "cc.colorEqual(color1, color2)" },
{ "trigger": "cc.hexToColor(hex)", "contents": "cc.hexToColor(hex)" },
{ "trigger": "cc.colorToHex(color)", "contents": "cc.colorToHex(color)" },
{ "trigger": "cc.color._getWhite()", "contents": "cc.color._getWhite()" },
{ "trigger": "cc.color._getYellow()", "contents": "cc.color._getYellow()" },
{ "trigger": "cc.color._getBlue()", "contents": "cc.color._getBlue()" },
{ "trigger": "cc.color._getGreen()", "contents": "cc.color._getGreen()" },
{ "trigger": "cc.color._getRed()", "contents": "cc.color._getRed()" },
{ "trigger": "cc.color._getMagenta()", "contents": "cc.color._getMagenta()" },
{ "trigger": "cc.color._getBlack()", "contents": "cc.color._getBlack()" },
{ "trigger": "cc.color._getOrange()", "contents": "cc.color._getOrange()" },
{ "trigger": "cc.color._getGray()", "contents": "cc.color._getGray()" },
{ "trigger": "cc.associateWithNative( jsobj, superclass_or_instance )", "contents": "cc.associateWithNative( jsobj, superclass_or_instance )" },
{ "trigger": "cc.inherits(childCtor, parentCtor)", "contents": "cc.inherits(childCtor, parentCtor)" },
{ "trigger": "cc.base(me, opt_methodName, var_args)", "contents": "cc.base(me, opt_methodName, var_args)" },
{ "trigger": "cc.Class()", "contents": "cc.Class()" },
{ "trigger": "cc.Class.extend(prop)", "contents": "cc.Class.extend(prop)" },
{ "trigger": "cc.Loader.preload(resources, selector, target)", "contents": "cc.Loader.preload(resources, selector, target)" },
{ "trigger": "__onParseConfig(type, str)", "contents": "__onParseConfig(type, str)" },
{ "trigger": "setTimeout(code, delay)", "contents": "setTimeout(code, delay)" },
{ "trigger": "target.fun()", "contents": "target.fun()" },
{ "trigger": "setInterval(code, delay)", "contents": "setInterval(code, delay)" },
{ "trigger": "clearInterval(intervalId)", "contents": "clearInterval(intervalId)" },
{ "trigger": "cc.EventListener.create(argObj)", "contents": "cc.EventListener.create(argObj)" },
{ "trigger": "cc.eventManager.addListener(listener, nodeOrPriority)", "contents": "cc.eventManager.addListener(listener, nodeOrPriority)" },
{ "trigger": "cc.eventManager.dispatchCustomEvent(eventName, optionalUserData)", "contents": "cc.eventManager.dispatchCustomEvent(eventName, optionalUserData)" },
{ "trigger": "cc.EventCustom.prototype.setUserData(userData)", "contents": "cc.EventCustom.prototype.setUserData(userData)" },
{ "trigger": "cc.EventCustom.prototype.getUserData()", "contents": "cc.EventCustom.prototype.getUserData()" },
{ "trigger": "cc.EventListenerTouchOneByOne.prototype.clone()", "contents": "cc.EventListenerTouchOneByOne.prototype.clone()" },
{ "trigger": "cc.EventListenerTouchAllAtOnce.prototype.clone()", "contents": "cc.EventListenerTouchAllAtOnce.prototype.clone()" },
{ "trigger": "cc.EventListenerKeyboard.prototype.clone()", "contents": "cc.EventListenerKeyboard.prototype.clone()" },
{ "trigger": "cc.EventListenerFocus.prototype.clone()", "contents": "cc.EventListenerFocus.prototype.clone()" },
{ "trigger": "cc.EventListenerMouse.prototype.clone()", "contents": "cc.EventListenerMouse.prototype.clone()" },
{ "trigger": "cc.EventListenerMouse.prototype.onMouseMove(event)", "contents": "cc.EventListenerMouse.prototype.onMouseMove(event)" },
{ "trigger": "cc.EventListenerMouse.prototype.onMouseDown(event)", "contents": "cc.EventListenerMouse.prototype.onMouseDown(event)" },
{ "trigger": "cc.EventListenerKeyboard.prototype._onKeyPressed(keyCode, event)", "contents": "cc.EventListenerKeyboard.prototype._onKeyPressed(keyCode, event)" },
{ "trigger": "cc.EventListenerKeyboard.prototype._onKeyReleased(keyCode, event)", "contents": "cc.EventListenerKeyboard.prototype._onKeyReleased(keyCode, event)" },
{ "trigger": "cc.EventMouse.prototype.getLocation()", "contents": "cc.EventMouse.prototype.getLocation()" },
{ "trigger": "cc.EventMouse.prototype.getLocationInView()", "contents": "cc.EventMouse.prototype.getLocationInView()" },
{ "trigger": "cc.EventMouse.prototype.getDelta()", "contents": "cc.EventMouse.prototype.getDelta()" },
{ "trigger": "cc.EventMouse.prototype.getDeltaX()", "contents": "cc.EventMouse.prototype.getDeltaX()" },
{ "trigger": "cc.EventMouse.prototype.getDeltaY()", "contents": "cc.EventMouse.prototype.getDeltaY()" },
{ "trigger": "cc.Touch.prototype.getLocationX()", "contents": "cc.Touch.prototype.getLocationX()" },
{ "trigger": "cc.Touch.prototype.getLocationY()", "contents": "cc.Touch.prototype.getLocationY()" },
{ "trigger": "cc.Director.prototype.runScene(scene)", "contents": "cc.Director.prototype.runScene(scene)" },
{ "trigger": "cc.FontDefinition()", "contents": "cc.FontDefinition()" },
{ "trigger": "cc.arrayVerifyType(arr, type)", "contents": "cc.arrayVerifyType(arr, type)" },
{ "trigger": "cc.arrayRemoveObject(arr, delObj)", "contents": "cc.arrayRemoveObject(arr, delObj)" },
{ "trigger": "cc.arrayRemoveArray(arr, minusArr)", "contents": "cc.arrayRemoveArray(arr, minusArr)" },
{ "trigger": "cc.arrayAppendObjectsToIndex(arr, addObjs,index)", "contents": "cc.arrayAppendObjectsToIndex(arr, addObjs,index)" },
{ "trigger": "cc.copyArray(arr)", "contents": "cc.copyArray(arr)" },
{ "trigger": "cc.cardinalSplineAt(p0, p1, p2, p3, tension, t)", "contents": "cc.cardinalSplineAt(p0, p1, p2, p3, tension, t)" },
{ "trigger": "cc.DrawNode.create()", "contents": "cc.DrawNode.create()" },
{ "trigger": "cc.TMXTiledMap.prototype.allLayers()", "contents": "cc.TMXTiledMap.prototype.allLayers()" },
{ "trigger": "cc.TMXLayer.prototype.getTileAt(x, y)", "contents": "cc.TMXLayer.prototype.getTileAt(x, y)" },
{ "trigger": "cc.TMXLayer.prototype.getTileGIDAt(x, y)", "contents": "cc.TMXLayer.prototype.getTileGIDAt(x, y)" },
{ "trigger": "cc.TMXLayer.prototype.setTileGID(gid, posOrX, flagsOrY, flags)", "contents": "cc.TMXLayer.prototype.setTileGID(gid, posOrX, flagsOrY, flags)" },
{ "trigger": "cc.TMXLayer.prototype.removeTileAt(x, y)", "contents": "cc.TMXLayer.prototype.removeTileAt(x, y)" },
{ "trigger": "cc.TMXLayer.prototype.getPositonAt(x, y)", "contents": "cc.TMXLayer.prototype.getPositonAt(x, y)" },
{ "trigger": "templateSetBlendFunc(src, dst)", "contents": "templateSetBlendFunc(src, dst)" },
{ "trigger": "cc.Place.create(posOrX, y)", "contents": "cc.Place.create(posOrX, y)" },
{ "trigger": "cc.MoveTo.create(duration, posOrX, y)", "contents": "cc.MoveTo.create(duration, posOrX, y)" },
{ "trigger": "cc.MoveBy.create(duration, posOrX, y)", "contents": "cc.MoveBy.create(duration, posOrX, y)" },
{ "trigger": "cc.JumpTo.create(duration, position, y, height, jumps)", "contents": "cc.JumpTo.create(duration, position, y, height, jumps)" },
{ "trigger": "cc.JumpBy.create(duration, position, y, height, jumps)", "contents": "cc.JumpBy.create(duration, position, y, height, jumps)" },
{ "trigger": "cc.ActionInterval.prototype.speed(speed)", "contents": "cc.ActionInterval.prototype.speed(speed)" },
{ "trigger": "cc.ActionInterval.prototype.setSpeed(speed)", "contents": "cc.ActionInterval.prototype.setSpeed(speed)" },
{ "trigger": "cc.ActionInterval.prototype.getSpeed()", "contents": "cc.ActionInterval.prototype.getSpeed()" },
{ "trigger": "cc.AffineTransform(a, b, c, d, tx, ty)", "contents": "cc.AffineTransform(a, b, c, d, tx, ty)" },
{ "trigger": "cc.affineTransformMake(a, b, c, d, tx, ty)", "contents": "cc.affineTransformMake(a, b, c, d, tx, ty)" },
{ "trigger": "cc.pointApplyAffineTransform(point, t)", "contents": "cc.pointApplyAffineTransform(point, t)" },
{ "trigger": "cc._pointApplyAffineTransform(x, y, t)", "contents": "cc._pointApplyAffineTransform(x, y, t)" },
{ "trigger": "cc.sizeApplyAffineTransform(size, t)", "contents": "cc.sizeApplyAffineTransform(size, t)" },
{ "trigger": "cc.affineTransformMakeIdentity()", "contents": "cc.affineTransformMakeIdentity()" },
{ "trigger": "cc.affineTransformIdentity()", "contents": "cc.affineTransformIdentity()" },
{ "trigger": "cc.rectApplyAffineTransform(rect, anAffineTransform)", "contents": "cc.rectApplyAffineTransform(rect, anAffineTransform)" },
{ "trigger": "cc._rectApplyAffineTransformIn(rect, anAffineTransform)", "contents": "cc._rectApplyAffineTransformIn(rect, anAffineTransform)" },
{ "trigger": "cc.affineTransformTranslate(t, tx, ty)", "contents": "cc.affineTransformTranslate(t, tx, ty)" },
{ "trigger": "cc.affineTransformScale(t, sx, sy)", "contents": "cc.affineTransformScale(t, sx, sy)" },
{ "trigger": "cc.affineTransformRotate(aTransform, anAngle)", "contents": "cc.affineTransformRotate(aTransform, anAngle)" },
{ "trigger": "cc.affineTransformConcat(t1, t2)", "contents": "cc.affineTransformConcat(t1, t2)" },
{ "trigger": "cc.affineTransformEqualToTransform(t1, t2)", "contents": "cc.affineTransformEqualToTransform(t1, t2)" },
{ "trigger": "cc.affineTransformInvert(t)", "contents": "cc.affineTransformInvert(t)" },
{ "trigger": "cc.Node.prototype.setUserData(data)", "contents": "cc.Node.prototype.setUserData(data)" },
{ "trigger": "cc.Node.prototype.getUserData()", "contents": "cc.Node.prototype.getUserData()" },
{ "trigger": "cc.Node.prototype.setNormalizedPosition(pos, y)", "contents": "cc.Node.prototype.setNormalizedPosition(pos, y)" },
{ "trigger": "cc.Node.prototype.getBoundingBoxToWorld()", "contents": "cc.Node.prototype.getBoundingBoxToWorld()" },
{ "trigger": "cc.Node.prototype._getBoundingBoxToCurrentNode(parentTransform)", "contents": "cc.Node.prototype._getBoundingBoxToCurrentNode(parentTransform)" },
{ "trigger": "cc.Layer.prototype.unbake()", "contents": "cc.Layer.prototype.unbake()" },
{ "trigger": "cc.Layer.prototype.isBaked()", "contents": "cc.Layer.prototype.isBaked()" },
{ "trigger": "cc.RenderTexture.prototype.beginWithClear(r, g, b, a, depthValue, stencilValue)", "contents": "cc.RenderTexture.prototype.beginWithClear(r, g, b, a, depthValue, stencilValue)" },
{ "trigger": "cc.Texture2D.prototype.setTexParameters(texParams, magFilter, wrapS, wrapT)", "contents": "cc.Texture2D.prototype.setTexParameters(texParams, magFilter, wrapS, wrapT)" },
{ "trigger": "cc.Texture2D.prototype.handleLoadedTexture(premultipled)", "contents": "cc.Texture2D.prototype.handleLoadedTexture(premultipled)" },
{ "trigger": "_p.setNormalSpriteFrame(frame)", "contents": "_p.setNormalSpriteFrame(frame)" },
{ "trigger": "_p.setSelectedSpriteFrame(frame)", "contents": "_p.setSelectedSpriteFrame(frame)" },
{ "trigger": "_p.setDisabledSpriteFrame(frame)", "contents": "_p.setDisabledSpriteFrame(frame)" },
{ "trigger": "cc.LabelTTF.prototype.setDimensions(dim, height)", "contents": "cc.LabelTTF.prototype.setDimensions(dim, height)" },
{ "trigger": "cc.BlendFunc(src1, dst1)", "contents": "cc.BlendFunc(src1, dst1)" },
{ "trigger": "cc.BlendFunc._disable()", "contents": "cc.BlendFunc._disable()" },
{ "trigger": "cc.BlendFunc._alphaPremultiplied()", "contents": "cc.BlendFunc._alphaPremultiplied()" },
{ "trigger": "cc.BlendFunc._alphaNonPremultiplied()", "contents": "cc.BlendFunc._alphaNonPremultiplied()" },
{ "trigger": "cc.BlendFunc._additive()", "contents": "cc.BlendFunc._additive()" },
{ "trigger": "cc.Node.extend", "contents": "cc.Node.extend()" },
{ "trigger": "cc.AtlasNode.extend", "contents": "cc.AtlasNode.extend()" },
{ "trigger": "cc.Layer.extend", "contents": "cc.Layer.extend()" },
{ "trigger": "cc.LayerGradient.extend", "contents": "cc.LayerGradient.extend()" },
{ "trigger": "cc.LayerColor.extend", "contents": "cc.LayerColor.extend()" },
{ "trigger": "cc.LayerMultiplex.extend", "contents": "cc.LayerMultiplex.extend()" },
{ "trigger": "cc.Sprite.extend", "contents": "cc.Sprite.extend()" },
{ "trigger": "cc.SpriteBatchNode.extend", "contents": "cc.SpriteBatchNode.extend()" },
{ "trigger": "cc.SpriteFrame.extend", "contents": "cc.SpriteFrame.extend()" },
{ "trigger": "cc.LabelTTF.extend", "contents": "cc.LabelTTF.extend()" },
{ "trigger": "cc.LabelBMFont.extend", "contents": "cc.LabelBMFont.extend()" },
{ "trigger": "cc.LabelAtlas.extend", "contents": "cc.LabelAtlas.extend()" },
{ "trigger": "cc.Menu.extend", "contents": "cc.Menu.extend()" },
{ "trigger": "cc.MenuItem.extend", "contents": "cc.MenuItem.extend()" },
{ "trigger": "cc.MenuItemLabel.extend", "contents": "cc.MenuItemLabel.extend()" },
{ "trigger": "cc.MenuItemFont.extend", "contents": "cc.MenuItemFont.extend()" },
{ "trigger": "cc.MenuItemAtlasFont.extend", "contents": "cc.MenuItemAtlasFont.extend()" },
{ "trigger": "cc.MenuItemSprite.extend", "contents": "cc.MenuItemSprite.extend()" },
{ "trigger": "cc.MenuItemImage.extend", "contents": "cc.MenuItemImage.extend()" },
{ "trigger": "cc.MenuItemToggle.extend", "contents": "cc.MenuItemToggle.extend()" },
{ "trigger": "cc.Scene.extend", "contents": "cc.Scene.extend()" },
{ "trigger": "cc.ClippingNode.extend", "contents": "cc.ClippingNode.extend()" },
{ "trigger": "cc.ProgressTimer.extend", "contents": "cc.ProgressTimer.extend()" },
{ "trigger": "cc.ParallaxNode.extend", "contents": "cc.ParallaxNode.extend()" },
{ "trigger": "cc.DrawNode.extend", "contents": "cc.DrawNode.extend()" },
{ "trigger": "cc.Component.extend", "contents": "cc.Component.extend()" },
{ "trigger": "cc.GridBase.extend", "contents": "cc.GridBase.extend()" },
{ "trigger": "cc.Grid3D.extend", "contents": "cc.Grid3D.extend()" },
{ "trigger": "cc.TiledGrid3D.extend", "contents": "cc.TiledGrid3D.extend()" },
{ "trigger": "cc.MotionStreak.extend", "contents": "cc.MotionStreak.extend()" },
{ "trigger": "cc.ParticleBatchNode.extend", "contents": "cc.ParticleBatchNode.extend()" },
{ "trigger": "cc.ParticleSystem.extend", "contents": "cc.ParticleSystem.extend()" },
{ "trigger": "cc.TextFieldTTF.extend", "contents": "cc.TextFieldTTF.extend()" },
{ "trigger": "cc.RenderTexture.extend", "contents": "cc.RenderTexture.extend()" },
{ "trigger": "cc.TileMapAtlas.extend", "contents": "cc.TileMapAtlas.extend()" },
{ "trigger": "cc.TMXLayer.extend", "contents": "cc.TMXLayer.extend()" },
{ "trigger": "cc.TMXTiledMap.extend", "contents": "cc.TMXTiledMap.extend()" },
{ "trigger": "cc.TMXMapInfo.extend", "contents": "cc.TMXMapInfo.extend()" },
{ "trigger": "cc.TransitionScene.extend", "contents": "cc.TransitionScene.extend()" },
{ "trigger": "cc.GLProgram.extend", "contents": "cc.GLProgram.extend()" },
{ "trigger": "cc.BuilderReader.registerController(controllerName, controller)", "contents": "cc.BuilderReader.registerController(controllerName, controller)" },
{ "trigger": "cc.BuilderReader.setResourcePath(rootPath)", "contents": "cc.BuilderReader.setResourcePath(rootPath)" },
{ "trigger": "cc.BuilderReader.load(file, owner, parentSize)", "contents": "cc.BuilderReader.load(file, owner, parentSize)" },
{ "trigger": "cc.BuilderReader.loadAsScene(file, owner, parentSize)", "contents": "cc.BuilderReader.loadAsScene(file, owner, parentSize)" },
{ "trigger": "parseKeyCode(keycode)", "contents": "parseKeyCode(keycode)" },
{ "trigger": "_p._ctor()", "contents": "_p._ctor()" },
{ "trigger": "_p._ctor(color, w, h)", "contents": "_p._ctor(color, w, h)" },
{ "trigger": "_p._ctor(start, end, v, colorStops)", "contents": "_p._ctor(start, end, v, colorStops)" },
{ "trigger": "_p._ctor(layers)", "contents": "_p._ctor(layers)" },
{ "trigger": "_p._ctor(fileName, rect)", "contents": "_p._ctor(fileName, rect)" },
{ "trigger": "_p._ctor(fileImage, capacity)", "contents": "_p._ctor(fileImage, capacity)" },
{ "trigger": "_p._ctor(filename, rect, rotated, offset, originalSize)", "contents": "_p._ctor(filename, rect, rotated, offset, originalSize)" },
{ "trigger": "_p._ctor(gridSize, texture, flipped)", "contents": "_p._ctor(gridSize, texture, flipped)" },
{ "trigger": "_p._ctor(gridSize, texture, flipped)", "contents": "_p._ctor(gridSize, texture, flipped)" },
{ "trigger": "_p._ctor(gridSize, texture, flipped)", "contents": "_p._ctor(gridSize, texture, flipped)" },
{ "trigger": "_p._ctor(menuItems)", "contents": "_p._ctor(menuItems)" },
{ "trigger": "_p._ctor(callback, target)", "contents": "_p._ctor(callback, target)" },
{ "trigger": "_p._ctor(label, callback, target)", "contents": "_p._ctor(label, callback, target)" },
{ "trigger": "_p._ctor(value, charMapFile, itemWidth, itemHeight, startCharMap, callback, target)", "contents": "_p._ctor(value, charMapFile, itemWidth, itemHeight, startCharMap, callback, target)" },
{ "trigger": "_p._ctor(value, callback, target)", "contents": "_p._ctor(value, callback, target)" },
{ "trigger": "_p._ctor(normalSprite, selectedSprite, three, four, five)", "contents": "_p._ctor(normalSprite, selectedSprite, three, four, five)" },
{ "trigger": "_p._ctor(normalImage, selectedImage, three, four, five)", "contents": "_p._ctor(normalImage, selectedImage, three, four, five)" },
{ "trigger": "_p._ctor()", "contents": "_p._ctor()" },
{ "trigger": "_p._ctor(fade, minSeg, stroke, color, texture)", "contents": "_p._ctor(fade, minSeg, stroke, color, texture)" },
{ "trigger": "_p._ctor(fileImage, capacity)", "contents": "_p._ctor(fileImage, capacity)" },
{ "trigger": "_p._ctor(plistFile)", "contents": "_p._ctor(plistFile)" },
{ "trigger": "cc.ParticleSnow.prototype._ctor()", "contents": "cc.ParticleSnow.prototype._ctor()" },
{ "trigger": "_p._ctor(sprite)", "contents": "_p._ctor(sprite)" },
{ "trigger": "_p._ctor(placeholder, dimensions, alignment, fontName, fontSize)", "contents": "_p._ctor(placeholder, dimensions, alignment, fontName, fontSize)" },
{ "trigger": "_p._ctor(width, height, format, depthStencilFormat)", "contents": "_p._ctor(width, height, format, depthStencilFormat)" },
{ "trigger": "_p._ctor(tile, mapFile, tileWidth, tileHeight)", "contents": "_p._ctor(tile, mapFile, tileWidth, tileHeight)" },
{ "trigger": "_p._ctor(tilesetInfo, layerInfo, mapInfo)", "contents": "_p._ctor(tilesetInfo, layerInfo, mapInfo)" },
{ "trigger": "_p._ctor(tmxFile,resourcePath)", "contents": "_p._ctor(tmxFile,resourcePath)" },
{ "trigger": "_p._ctor(tmxFile, resourcePath)", "contents": "_p._ctor(tmxFile, resourcePath)" },
{ "trigger": "_p._ctor(t, scene)", "contents": "_p._ctor(t, scene)" },
{ "trigger": "_p._ctor(t, scene, orientation)", "contents": "_p._ctor(t, scene, orientation)" },
{ "trigger": "_p._ctor(t, scene, backwards)", "contents": "_p._ctor(t, scene, backwards)" },
{ "trigger": "cc.Speed.prototype._ctor(action, speed)", "contents": "cc.Speed.prototype._ctor(action, speed)" },
{ "trigger": "cc.Follow.prototype._ctor(followedNode, rect)", "contents": "cc.Follow.prototype._ctor(followedNode, rect)" },
{ "trigger": "cc.OrbitCamera.prototype._ctor(t, radius, deltaRadius, angleZ, deltaAngleZ, angleX, deltaAngleX)", "contents": "cc.OrbitCamera.prototype._ctor(t, radius, deltaRadius, angleZ, deltaAngleZ, angleX, deltaAngleX)" },
{ "trigger": "cc.CardinalSplineBy.prototype._ctor(duration, points, tension)", "contents": "cc.CardinalSplineBy.prototype._ctor(duration, points, tension)" },
{ "trigger": "cc.CatmullRomBy.prototype._ctor(dt, points)", "contents": "cc.CatmullRomBy.prototype._ctor(dt, points)" },
{ "trigger": "_p._ctor(action)", "contents": "_p._ctor(action)" },
{ "trigger": "_p._ctor(action, rate)", "contents": "_p._ctor(action, rate)" },
{ "trigger": "_p._ctor(action, period)", "contents": "_p._ctor(action, period)" },
{ "trigger": "cc.ReuseGrid.prototype._ctor(times)", "contents": "cc.ReuseGrid.prototype._ctor(times)" },
{ "trigger": "cc.FadeOutDownTiles.prototype._ctor(duration, gridSize)", "contents": "cc.FadeOutDownTiles.prototype._ctor(duration, gridSize)" },
{ "trigger": "cc.Twirl.prototype._ctor(duration, gridSize, position, twirls, amplitude)", "contents": "cc.Twirl.prototype._ctor(duration, gridSize, position, twirls, amplitude)" },
{ "trigger": "cc.Waves.prototype._ctor(duration, gridSize, waves, amplitude, horizontal, vertical)", "contents": "cc.Waves.prototype._ctor(duration, gridSize, waves, amplitude, horizontal, vertical)" },
{ "trigger": "cc.Liquid.prototype._ctor(duration, gridSize, waves, amplitude)", "contents": "cc.Liquid.prototype._ctor(duration, gridSize, waves, amplitude)" },
{ "trigger": "cc.Shaky3D.prototype._ctor(duration, gridSize, range, shakeZ)", "contents": "cc.Shaky3D.prototype._ctor(duration, gridSize, range, shakeZ)" },
{ "trigger": "cc.Ripple3D.prototype._ctor(duration, gridSize, position, radius, waves, amplitude)", "contents": "cc.Ripple3D.prototype._ctor(duration, gridSize, position, radius, waves, amplitude)" },
{ "trigger": "cc.Lens3D.prototype._ctor(duration, gridSize, position, radius)", "contents": "cc.Lens3D.prototype._ctor(duration, gridSize, position, radius)" },
{ "trigger": "cc.FlipX3D.prototype._ctor(duration)", "contents": "cc.FlipX3D.prototype._ctor(duration)" },
{ "trigger": "cc.Waves3D.prototype._ctor(duration, gridSize, waves, amplitude)", "contents": "cc.Waves3D.prototype._ctor(duration, gridSize, waves, amplitude)" },
{ "trigger": "cc.RemoveSelf.prototype._ctor(isNeedCleanUp)", "contents": "cc.RemoveSelf.prototype._ctor(isNeedCleanUp)" },
{ "trigger": "cc.FlipX.prototype._ctor(flip)", "contents": "cc.FlipX.prototype._ctor(flip)" },
{ "trigger": "cc.FlipY.prototype._ctor(flip)", "contents": "cc.FlipY.prototype._ctor(flip)" },
{ "trigger": "cc.Place.prototype._ctor(pos, y)", "contents": "cc.Place.prototype._ctor(pos, y)" },
{ "trigger": "cc.CallFunc.prototype._ctor(selector, selectorTarget, data)", "contents": "cc.CallFunc.prototype._ctor(selector, selectorTarget, data)" },
{ "trigger": "cc.ActionInterval.prototype._ctor(d)", "contents": "cc.ActionInterval.prototype._ctor(d)" },
{ "trigger": "cc.Sequence.prototype._ctor(tempArray)", "contents": "cc.Sequence.prototype._ctor(tempArray)" },
{ "trigger": "cc.Repeat.prototype._ctor(action, times)", "contents": "cc.Repeat.prototype._ctor(action, times)" },
{ "trigger": "cc.RepeatForever.prototype._ctor(action)", "contents": "cc.RepeatForever.prototype._ctor(action)" },
{ "trigger": "cc.Spawn.prototype._ctor(tempArray)", "contents": "cc.Spawn.prototype._ctor(tempArray)" },
{ "trigger": "cc.RotateBy.prototype._ctor(duration, deltaAngleX, deltaAngleY)", "contents": "cc.RotateBy.prototype._ctor(duration, deltaAngleX, deltaAngleY)" },
{ "trigger": "cc.MoveTo.prototype._ctor(duration, pos, y)", "contents": "cc.MoveTo.prototype._ctor(duration, pos, y)" },
{ "trigger": "cc.SkewBy.prototype._ctor(t, sx, sy)", "contents": "cc.SkewBy.prototype._ctor(t, sx, sy)" },
{ "trigger": "cc.JumpTo.prototype._ctor(duration, position, y, height, jumps)", "contents": "cc.JumpTo.prototype._ctor(duration, position, y, height, jumps)" },
{ "trigger": "cc.BezierTo.prototype._ctor(t, c)", "contents": "cc.BezierTo.prototype._ctor(t, c)" },
{ "trigger": "cc.ScaleBy.prototype._ctor(duration, sx, sy)", "contents": "cc.ScaleBy.prototype._ctor(duration, sx, sy)" },
{ "trigger": "cc.Blink.prototype._ctor(duration, blinks)", "contents": "cc.Blink.prototype._ctor(duration, blinks)" },
{ "trigger": "cc.FadeTo.prototype._ctor(duration, opacity)", "contents": "cc.FadeTo.prototype._ctor(duration, opacity)" },
{ "trigger": "cc.FadeIn.prototype._ctor(duration)", "contents": "cc.FadeIn.prototype._ctor(duration)" },
{ "trigger": "cc.FadeOut.prototype._ctor(duration)", "contents": "cc.FadeOut.prototype._ctor(duration)" },
{ "trigger": "cc.TintBy.prototype._ctor(duration, red, green, blue)", "contents": "cc.TintBy.prototype._ctor(duration, red, green, blue)" },
{ "trigger": "cc.DelayTime.prototype._ctor(duration)", "contents": "cc.DelayTime.prototype._ctor(duration)" },
{ "trigger": "cc.ReverseTime.prototype._ctor(action)", "contents": "cc.ReverseTime.prototype._ctor(action)" },
{ "trigger": "cc.Animate.prototype._ctor(animation)", "contents": "cc.Animate.prototype._ctor(animation)" },
{ "trigger": "cc.TargetedAction.prototype._ctor(target, action)", "contents": "cc.TargetedAction.prototype._ctor(target, action)" },
{ "trigger": "cc.ProgressTo.prototype._ctor(duration, percent)", "contents": "cc.ProgressTo.prototype._ctor(duration, percent)" },
{ "trigger": "cc.ProgressFromTo.prototype._ctor(duration, fromPercentage, toPercentage)", "contents": "cc.ProgressFromTo.prototype._ctor(duration, fromPercentage, toPercentage)" },
{ "trigger": "cc.SplitRows.prototype._ctor(duration, rowsCols)", "contents": "cc.SplitRows.prototype._ctor(duration, rowsCols)" },
{ "trigger": "cc.JumpTiles3D.prototype._ctor(duration, gridSize, numberOfJumps, amplitude)", "contents": "cc.JumpTiles3D.prototype._ctor(duration, gridSize, numberOfJumps, amplitude)" },
{ "trigger": "cc.WavesTiles3D.prototype._ctor(duration, gridSize, waves, amplitude)", "contents": "cc.WavesTiles3D.prototype._ctor(duration, gridSize, waves, amplitude)" },
{ "trigger": "cc.TurnOffTiles.prototype._ctor(duration, gridSize, seed)", "contents": "cc.TurnOffTiles.prototype._ctor(duration, gridSize, seed)" },
{ "trigger": "cc.ShakyTiles3D.prototype._ctor(duration, gridSize, range, shakeZ)", "contents": "cc.ShakyTiles3D.prototype._ctor(duration, gridSize, range, shakeZ)" },
{ "trigger": "cc.ShatteredTiles3D.prototype._ctor(duration, gridSize, range, shatterZ)", "contents": "cc.ShatteredTiles3D.prototype._ctor(duration, gridSize, range, shatterZ)" },
{ "trigger": "cc.ShuffleTiles.prototype._ctor(duration, gridSize, seed)", "contents": "cc.ShuffleTiles.prototype._ctor(duration, gridSize, seed)" },
{ "trigger": "cc.ActionTween.prototype._ctor(duration, key, from, to)", "contents": "cc.ActionTween.prototype._ctor(duration, key, from, to)" },
{ "trigger": "cc.Animation.prototype._ctor(frames, delay, loops)", "contents": "cc.Animation.prototype._ctor(frames, delay, loops)" },
{ "trigger": "cc.AnimationFrame.prototype._ctor(spriteFrame, delayUnits, userInfo)", "contents": "cc.AnimationFrame.prototype._ctor(spriteFrame, delayUnits, userInfo)" },
{ "trigger": "cc.AtlasNode.prototype._ctor(tile, tileWidth, tileHeight, itemsToRender)", "contents": "cc.AtlasNode.prototype._ctor(tile, tileWidth, tileHeight, itemsToRender)" },
{ "trigger": "cc.ClippingNode.prototype._ctor(stencil)", "contents": "cc.ClippingNode.prototype._ctor(stencil)" },
{ "trigger": "cc.DrawNode.prototype._ctor()", "contents": "cc.DrawNode.prototype._ctor()" },
{ "trigger": "cc.LabelAtlas.prototype._ctor(strText, charMapFile, itemWidth, itemHeight, startCharMap)", "contents": "cc.LabelAtlas.prototype._ctor(strText, charMapFile, itemWidth, itemHeight, startCharMap)" },
{ "trigger": "cc.LabelBMFont.prototype._ctor(str, fntFile, width, alignment, imageOffset)", "contents": "cc.LabelBMFont.prototype._ctor(str, fntFile, width, alignment, imageOffset)" },
{ "trigger": "cc.LabelTTF.prototype._ctor(text, fontName, fontSize, dimensions, hAlignment, vAlignment)", "contents": "cc.LabelTTF.prototype._ctor(text, fontName, fontSize, dimensions, hAlignment, vAlignment)" },
{ "trigger": "cc.EventTouch.prototype._ctor(touches)", "contents": "cc.EventTouch.prototype._ctor(touches)" },
{ "trigger": "cc.Touch.prototype._ctor(x, y, id)", "contents": "cc.Touch.prototype._ctor(x, y, id)" },
{ "trigger": "cc.GLProgram.prototype._ctor(vShaderFileName, fShaderFileName)", "contents": "cc.GLProgram.prototype._ctor(vShaderFileName, fShaderFileName)" },
{ "trigger": "cc.Sprite.create(fileName, rect)", "contents": "cc.Sprite.create(fileName, rect)" },
{ "trigger": "cc.LabelTTF.create(text, fontName, fontSize, dimensions, hAlignment, vAlignment)", "contents": "cc.LabelTTF.create(text, fontName, fontSize, dimensions, hAlignment, vAlignment)" },
{ "trigger": "cc.SpriteBatchNode.create(fileName, capacity)", "contents": "cc.SpriteBatchNode.create(fileName, capacity)" },
{ "trigger": "cc.SpriteFrame.create(fileName, rect, rotated, offset, originalSize)", "contents": "cc.SpriteFrame.create(fileName, rect, rotated, offset, originalSize)" },
{ "trigger": "cc.ParticleSystem.create(plistFile)", "contents": "cc.ParticleSystem.create(plistFile)" },
{ "trigger": "cc.ParticleBatchNode.create(fileImage, capacity)", "contents": "cc.ParticleBatchNode.create(fileImage, capacity)" },
{ "trigger": "cc.TMXTiledMap.create(tmxFile, resourcePath)", "contents": "cc.TMXTiledMap.create(tmxFile, resourcePath)" },
{ "trigger": "cc.MenuItemImage.create(normalImage, selectedImage, three, four, five)", "contents": "cc.MenuItemImage.create(normalImage, selectedImage, three, four, five)" },
{ "trigger": "cc.MenuItemToggle.create(/* var args */)", "contents": "cc.MenuItemToggle.create(/* var args */)" },
{ "trigger": "cc.LabelAtlas.create( a,b,c,d,e )", "contents": "cc.LabelAtlas.create( a,b,c,d,e )" },
{ "trigger": "cc.Animation.create(frames, delay, loops)", "contents": "cc.Animation.create(frames, delay, loops)" },
{ "trigger": "cc.Menu.create(menuItems)", "contents": "cc.Menu.create(menuItems)" },
{ "trigger": "this.processInput(inputstr)", "contents": "this.processInput(inputstr)" },
{ "trigger": "this._prepareDebugger(global)", "contents": "this._prepareDebugger(global)" },
{ "trigger": "DebuggerServer.addTestGlobal(aGlobal)", "contents": "DebuggerServer.addTestGlobal(aGlobal)" },
{ "trigger": "logW(old_name, new_name)", "contents": "logW(old_name, new_name)" },
{ "trigger": "cc.AnimationCache.purgeSharedAnimationCache()", "contents": "cc.AnimationCache.purgeSharedAnimationCache()" },
{ "trigger": "cc.TextureCache.getInstance()", "contents": "cc.TextureCache.getInstance()" },
{ "trigger": "cc.Action.prototype.copy()", "contents": "cc.Action.prototype.copy()" },
{ "trigger": "cc.Animation.prototype.copy()", "contents": "cc.Animation.prototype.copy()" },
{ "trigger": "cc.Node.prototype.nodeToWorldTransform()", "contents": "cc.Node.prototype.nodeToWorldTransform()" },
{ "trigger": "cc.Node.prototype.getZOrder()", "contents": "cc.Node.prototype.getZOrder()" },
{ "trigger": "cc.Node.prototype.setZOrder()", "contents": "cc.Node.prototype.setZOrder()" },
{ "trigger": "cc.Node.prototype.nodeToParentTransform()", "contents": "cc.Node.prototype.nodeToParentTransform()" },
{ "trigger": "cc.Node.prototype.worldToNodeTransform()", "contents": "cc.Node.prototype.worldToNodeTransform()" },
{ "trigger": "cc.Node.prototype.parentToNodeTransform()", "contents": "cc.Node.prototype.parentToNodeTransform()" },
{ "trigger": "cc.Node.prototype.numberOfRunningActions()", "contents": "cc.Node.prototype.numberOfRunningActions()" },
{ "trigger": "cc.Node.prototype.numberOfRunningActionsInTarget()", "contents": "cc.Node.prototype.numberOfRunningActionsInTarget()" },
{ "trigger": "cc.Menu.prototype.setHandlerPriority()", "contents": "cc.Menu.prototype.setHandlerPriority()" },
{ "trigger": "cc.Layer.prototype.setKeypadEnabled()", "contents": "cc.Layer.prototype.setKeypadEnabled()" },
{ "trigger": "cc.Layer.prototype.isKeypadEnabled()", "contents": "cc.Layer.prototype.isKeypadEnabled()" },
{ "trigger": "cc.registerTargettedDelegate()", "contents": "cc.registerTargettedDelegate()" },
{ "trigger": "cc.Touch.prototype.getId()", "contents": "cc.Touch.prototype.getId()" },
{ "trigger": "gl.createTexture()", "contents": "gl.createTexture()" },
{ "trigger": "gl.createBuffer()", "contents": "gl.createBuffer()" },
{ "trigger": "gl.createRenderbuffer()", "contents": "gl.createRenderbuffer()" },
{ "trigger": "gl.createFramebuffer()", "contents": "gl.createFramebuffer()" },
{ "trigger": "gl.createProgram()", "contents": "gl.createProgram()" },
{ "trigger": "gl.createShader(shaderType)", "contents": "gl.createShader(shaderType)" },
{ "trigger": "gl.deleteTexture(texture)", "contents": "gl.deleteTexture(texture)" },
{ "trigger": "gl.deleteBuffer(bufer)", "contents": "gl.deleteBuffer(bufer)" },
{ "trigger": "gl.deleteRenderbuffer(bufer)", "contents": "gl.deleteRenderbuffer(bufer)" },
{ "trigger": "gl.deleteFramebuffer(bufer)", "contents": "gl.deleteFramebuffer(bufer)" },
{ "trigger": "gl.deleteProgram(program)", "contents": "gl.deleteProgram(program)" },
{ "trigger": "gl.deleteShader(shader)", "contents": "gl.deleteShader(shader)" },
{ "trigger": "gl.bindTexture(target, texture)", "contents": "gl.bindTexture(target, texture)" },
{ "trigger": "gl.bindBuffer(target, buffer)", "contents": "gl.bindBuffer(target, buffer)" },
{ "trigger": "gl.bindRenderBuffer(target, buffer)", "contents": "gl.bindRenderBuffer(target, buffer)" },
{ "trigger": "gl.bindFramebuffer(target, buffer)", "contents": "gl.bindFramebuffer(target, buffer)" },
{ "trigger": "gl.getUniform(program, location)", "contents": "gl.getUniform(program, location)" },
{ "trigger": "gl.uniformMatrix2fv(location, bool, matrix)", "contents": "gl.uniformMatrix2fv(location, bool, matrix)" },
{ "trigger": "gl.uniformMatrix3fv(program, bool, matrix)", "contents": "gl.uniformMatrix3fv(program, bool, matrix)" },
{ "trigger": "gl.uniformMatrix4fv(program, bool, matrix)", "contents": "gl.uniformMatrix4fv(program, bool, matrix)" },
{ "trigger": "gl.compileShader(shader)", "contents": "gl.compileShader(shader)" },
{ "trigger": "gl.shaderSource(shader, source)", "contents": "gl.shaderSource(shader, source)" },
{ "trigger": "gl.getShaderParameter(shader, e)", "contents": "gl.getShaderParameter(shader, e)" },
{ "trigger": "gl.getShaderInfoLog(shader)", "contents": "gl.getShaderInfoLog(shader)" },
{ "trigger": "gl.attachShader(program, shader)", "contents": "gl.attachShader(program, shader)" },
{ "trigger": "gl.linkProgram(program)", "contents": "gl.linkProgram(program)" },
{ "trigger": "gl.getProgramParameter(program, e)", "contents": "gl.getProgramParameter(program, e)" },
{ "trigger": "gl.useProgram(program)", "contents": "gl.useProgram(program)" },
{ "trigger": "gl.getAttribLocation(program, name)", "contents": "gl.getAttribLocation(program, name)" },
{ "trigger": "gl.getUniformLocation(program, name)", "contents": "gl.getUniformLocation(program, name)" },
{ "trigger": "gl.getActiveAttrib(program, index)", "contents": "gl.getActiveAttrib(program, index)" },
{ "trigger": "gl.getActiveUniform(program, index)", "contents": "gl.getActiveUniform(program, index)" },
{ "trigger": "gl.getAttachedShaders(program)", "contents": "gl.getAttachedShaders(program)" },
{ "trigger": "gl.texImage2D()", "contents": "gl.texImage2D()" },
{ "trigger": "gl.texSubImage2D()", "contents": "gl.texSubImage2D()" },
{ "trigger": "gl.getExtension(extension)", "contents": "gl.getExtension(extension)" },
{ "trigger": "cc.Node.prototype.attr(attrs)", "contents": "cc.Node.prototype.attr(attrs)" },
{ "trigger": "cc.Action.tag", "contents": "tag" },
{ "trigger": "cc.AtlasNode.opacity", "contents": "opacity" },
{ "trigger": "cc.AtlasNode.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.AtlasNode.color", "contents": "color" },
{ "trigger": "cc.Label.size", "contents": "size" },
{ "trigger": "cc.Label.width", "contents": "width" },
{ "trigger": "cc.Label.height", "contents": "height" },
{ "trigger": "cc.Label.boundingWidth", "contents": "boundingWidth" },
{ "trigger": "cc.Label.boundingHeight", "contents": "boundingHeight" },
{ "trigger": "cc.LabelTTF.size", "contents": "size" },
{ "trigger": "cc.LabelTTF.width", "contents": "width" },
{ "trigger": "cc.LabelTTF.height", "contents": "height" },
{ "trigger": "cc.LayerColor.width", "contents": "width" },
{ "trigger": "cc.LayerColor.height", "contents": "height" },
{ "trigger": "cc.LayerColor.opacity", "contents": "opacity" },
{ "trigger": "cc.LayerColor.color", "contents": "color" },
{ "trigger": "cc.LayerColor.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.LayerGradient.size", "contents": "size" },
{ "trigger": "cc.LayerGradient.width", "contents": "width" },
{ "trigger": "cc.LayerGradient.height", "contents": "height" },
{ "trigger": "cc.Sprite.ignoreAnchor", "contents": "ignoreAnchor" },
{ "trigger": "cc.LabelAtlas.color", "contents": "color" },
{ "trigger": "cc.LabelBMFont.anchorX", "contents": "anchorX" },
{ "trigger": "cc.LabelBMFont.anchorY", "contents": "anchorY" },
{ "trigger": "cc.LabelBMFont.scale", "contents": "scale" },
{ "trigger": "cc.LabelBMFont.scaleX", "contents": "scaleX" },
{ "trigger": "cc.LabelBMFont.scaleY", "contents": "scaleY" },
{ "trigger": "cc.LabelBMFont.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.LabelBMFont.opacity", "contents": "opacity" },
{ "trigger": "cc.LabelBMFont.cascadeOpacity", "contents": "cascadeOpacity" },
{ "trigger": "cc.LabelBMFont.color", "contents": "color" },
{ "trigger": "cc.LabelBMFont.cascadeColor", "contents": "cascadeColor" },
{ "trigger": "cc.Menu.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.Menu.opacity", "contents": "opacity" },
{ "trigger": "cc.Menu.cascadeOpacity", "contents": "cascadeOpacity" },
{ "trigger": "cc.Menu.color", "contents": "color" },
{ "trigger": "cc.Menu.cascadeColor", "contents": "cascadeColor" },
{ "trigger": "cc.MenuItem.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.MenuItem.opacity", "contents": "opacity" },
{ "trigger": "cc.MenuItem.cascadeOpacity", "contents": "cascadeOpacity" },
{ "trigger": "cc.MenuItem.color", "contents": "color" },
{ "trigger": "cc.MenuItem.cascadeColor", "contents": "cascadeColor" },
{ "trigger": "cc.MotionStreak.x", "contents": "x" },
{ "trigger": "cc.MotionStreak.y", "contents": "y" },
{ "trigger": "cc.MotionStreak.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.MotionStreak.opacity", "contents": "opacity" },
{ "trigger": "cc.MotionStreak.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.MotionStreak.color", "contents": "color" },
{ "trigger": "cc.MotionStreak.cascadeColor", "contents": "cascadeColor" },
{ "trigger": "cc.ParticleSystem.rotation", "contents": "rotation" },
{ "trigger": "cc.ParticleSystem.scale", "contents": "scale" },
{ "trigger": "cc.ParticleSystem.scaleX", "contents": "scaleX" },
{ "trigger": "cc.ParticleSystem.scaleY", "contents": "scaleY" },
{ "trigger": "cc.ProgressTimer.opacity", "contents": "opacity" },
{ "trigger": "cc.ProgressTimer.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.ProgressTimer.color", "contents": "color" },
{ "trigger": "cc.TextFieldTTF.string", "contents": "string" },
{ "trigger": "cc.ClippingNode.alphaThreshold", "contents": "alphaThreshold" },
{ "trigger": "cc.ClippingNode.inverted", "contents": "inverted" },
{ "trigger": "cc.ClippingNode.stencil", "contents": "stencil" },
{ "trigger": "cc.AtlasNode.texture", "contents": "texture" },
{ "trigger": "cc.AtlasNode.textureAtlas", "contents": "textureAtlas" },
{ "trigger": "cc.AtlasNode.quadsToDraw", "contents": "quadsToDraw" },
{ "trigger": "cc.Node.x", "contents": "x" },
{ "trigger": "cc.Node.y", "contents": "y" },
{ "trigger": "cc.Node.width", "contents": "width" },
{ "trigger": "cc.Node.height", "contents": "height" },
{ "trigger": "cc.Node.anchorX", "contents": "anchorX" },
{ "trigger": "cc.Node.anchorY", "contents": "anchorY" },
{ "trigger": "cc.Node.skewX", "contents": "skewX" },
{ "trigger": "cc.Node.skewY", "contents": "skewY" },
{ "trigger": "cc.Node.zIndex", "contents": "zIndex" },
{ "trigger": "cc.Node.vertexZ", "contents": "vertexZ" },
{ "trigger": "cc.Node.rotation", "contents": "rotation" },
{ "trigger": "cc.Node.rotationX", "contents": "rotationX" },
{ "trigger": "cc.Node.rotationY", "contents": "rotationY" },
{ "trigger": "cc.Node.scale", "contents": "scale" },
{ "trigger": "cc.Node.scaleX", "contents": "scaleX" },
{ "trigger": "cc.Node.scaleY", "contents": "scaleY" },
{ "trigger": "cc.Node.children", "contents": "children" },
{ "trigger": "cc.Node.childrenCount", "contents": "childrenCount" },
{ "trigger": "cc.Node.parent", "contents": "parent" },
{ "trigger": "cc.Node.visible", "contents": "visible" },
{ "trigger": "cc.Node.running", "contents": "running" },
{ "trigger": "cc.Node.ignoreAnchor", "contents": "ignoreAnchor" },
{ "trigger": "cc.Node.actionManager", "contents": "actionManager" },
{ "trigger": "cc.Node.scheduler", "contents": "scheduler" },
{ "trigger": "cc.Node.shaderProgram", "contents": "shaderProgram" },
{ "trigger": "cc.Node.glServerState", "contents": "glServerState" },
{ "trigger": "cc.Node.tag", "contents": "tag" },
{ "trigger": "cc.Node.userObject", "contents": "userObject" },
{ "trigger": "cc.Node.arrivalOrder", "contents": "arrivalOrder" },
{ "trigger": "cc.NodeRGBA.opacity", "contents": "opacity" },
{ "trigger": "cc.NodeRGBA.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.NodeRGBA.cascadeOpacity", "contents": "cascadeOpacity" },
{ "trigger": "cc.NodeRGBA.color", "contents": "color" },
{ "trigger": "cc.NodeRGBA.cascadeColor", "contents": "cascadeColor" },
{ "trigger": "cc.LabelTTF.string", "contents": "string" },
{ "trigger": "cc.LabelTTF.textAlign", "contents": "textAlign" },
{ "trigger": "cc.LabelTTF.verticalAlign", "contents": "verticalAlign" },
{ "trigger": "cc.LabelTTF.fontSize", "contents": "fontSize" },
{ "trigger": "cc.LabelTTF.fontName", "contents": "fontName" },
{ "trigger": "cc.LabelTTF.font", "contents": "font" },
{ "trigger": "cc.LabelTTF.boundingWidth", "contents": "boundingWidth" },
{ "trigger": "cc.LabelTTF.boundingHeight", "contents": "boundingHeight" },
{ "trigger": "cc.LabelTTF.fillStyle", "contents": "fillStyle" },
{ "trigger": "cc.LabelTTF.strokeStyle", "contents": "strokeStyle" },
{ "trigger": "cc.LabelTTF.lineWidth", "contents": "lineWidth" },
{ "trigger": "cc.LabelTTF.shadowOffsetX", "contents": "shadowOffsetX" },
{ "trigger": "cc.LabelTTF.shadowOffsetY", "contents": "shadowOffsetY" },
{ "trigger": "cc.LabelTTF.shadowOpacity", "contents": "shadowOpacity" },
{ "trigger": "cc.LabelTTF.shadowBlur", "contents": "shadowBlur" },
{ "trigger": "cc.LabelTTF.opacity", "contents": "opacity" },
{ "trigger": "cc.LabelTTF.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.LabelTTF.cascadeOpacity", "contents": "cascadeOpacity" },
{ "trigger": "cc.LabelTTF.color", "contents": "color" },
{ "trigger": "cc.LabelTTF.cascadeColor", "contents": "cascadeColor" },
{ "trigger": "cc.LayerRGBA.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.LayerRGBA.opacity", "contents": "opacity" },
{ "trigger": "cc.LayerRGBA.cascadeOpacity", "contents": "cascadeOpacity" },
{ "trigger": "cc.LayerRGBA.color", "contents": "color" },
{ "trigger": "cc.LayerRGBA.cascadeColor", "contents": "cascadeColor" },
{ "trigger": "cc.LayerColor.width", "contents": "width" },
{ "trigger": "cc.LayerColor.height", "contents": "height" },
{ "trigger": "cc.LayerColor.opacity", "contents": "opacity" },
{ "trigger": "cc.LayerColor.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.LayerColor.cascadeOpacity", "contents": "cascadeOpacity" },
{ "trigger": "cc.LayerColor.color", "contents": "color" },
{ "trigger": "cc.LayerColor.cascadeColor", "contents": "cascadeColor" },
{ "trigger": "cc.LayerGradient.startColor", "contents": "startColor" },
{ "trigger": "cc.LayerGradient.endColor", "contents": "endColor" },
{ "trigger": "cc.LayerGradient.startOpacity", "contents": "startOpacity" },
{ "trigger": "cc.LayerGradient.endOpacity", "contents": "endOpacity" },
{ "trigger": "cc.LayerGradient.vector", "contents": "vector" },
{ "trigger": "cc.LayerGradient.compresseInterpolation", "contents": "compresseInterpolation" },
{ "trigger": "cc.LayerGradient.opacity", "contents": "opacity" },
{ "trigger": "cc.LayerGradient.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.LayerGradient.cascadeOpacity", "contents": "cascadeOpacity" },
{ "trigger": "cc.LayerGradient.color", "contents": "color" },
{ "trigger": "cc.LayerGradient.cascadeColor", "contents": "cascadeColor" },
{ "trigger": "cc.Sprite.dirty", "contents": "dirty" },
{ "trigger": "cc.Sprite.flippedX", "contents": "flippedX" },
{ "trigger": "cc.Sprite.flippedY", "contents": "flippedY" },
{ "trigger": "cc.Sprite.offsetX", "contents": "offsetX" },
{ "trigger": "cc.Sprite.offsetY", "contents": "offsetY" },
{ "trigger": "cc.Sprite.atlasIndex", "contents": "atlasIndex" },
{ "trigger": "cc.Sprite.texture", "contents": "texture" },
{ "trigger": "cc.Sprite.textureRectRotated", "contents": "textureRectRotated" },
{ "trigger": "cc.Sprite.textureAtlas", "contents": "textureAtlas" },
{ "trigger": "cc.Sprite.batchNode", "contents": "batchNode" },
{ "trigger": "cc.Sprite.quad", "contents": "quad" },
{ "trigger": "cc.Sprite.opacity", "contents": "opacity" },
{ "trigger": "cc.Sprite.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.Sprite.cascadeOpacity", "contents": "cascadeOpacity" },
{ "trigger": "cc.Sprite.color", "contents": "color" },
{ "trigger": "cc.Sprite.cascadeColor", "contents": "cascadeColor" },
{ "trigger": "cc.SpriteBatchNode.textureAtlas", "contents": "textureAtlas" },
{ "trigger": "cc.SpriteBatchNode.descendants", "contents": "descendants" },
{ "trigger": "cc.SpriteBatchNode.texture", "contents": "texture" },
{ "trigger": "cc.Texture2D.name", "contents": "name" },
{ "trigger": "cc.Texture2D.pixelFormat", "contents": "pixelFormat" },
{ "trigger": "cc.Texture2D.defaultPixelFormat", "contents": "defaultPixelFormat" },
{ "trigger": "cc.Texture2D.pixelsWidth", "contents": "pixelsWidth" },
{ "trigger": "cc.Texture2D.pixelsHeight", "contents": "pixelsHeight" },
{ "trigger": "cc.Texture2D.width", "contents": "width" },
{ "trigger": "cc.Texture2D.height", "contents": "height" },
{ "trigger": "cc.Texture2D.shaderProgram", "contents": "shaderProgram" },
{ "trigger": "cc.Texture2D.maxS", "contents": "maxS" },
{ "trigger": "cc.Texture2D.maxT", "contents": "maxT" },
{ "trigger": "cc.LabelAtlas.string", "contents": "string" },
{ "trigger": "cc.LabelAtlas.opacity", "contents": "opacity" },
{ "trigger": "cc.LabelBMFont.string", "contents": "string" },
{ "trigger": "cc.LabelBMFont.textAlign", "contents": "textAlign" },
{ "trigger": "cc.LabelBMFont.boundingWidth", "contents": "boundingWidth" },
{ "trigger": "cc.LabelBMFont.boundingHeight", "contents": "boundingHeight" },
{ "trigger": "cc.Menu.enabled", "contents": "enabled" },
{ "trigger": "cc.MenuItem.enabled", "contents": "enabled" },
{ "trigger": "cc.MenuItemLabel.string", "contents": "string" },
{ "trigger": "cc.MenuItemLabel.label", "contents": "label" },
{ "trigger": "cc.MenuItemLabel.disabledColor", "contents": "disabledColor" },
{ "trigger": "cc.MenuItemFont.fontSize", "contents": "fontSize" },
{ "trigger": "cc.MenuItemFont.fontName", "contents": "fontName" },
{ "trigger": "cc.MenuItemSprite.normalImage", "contents": "normalImage" },
{ "trigger": "cc.MenuItemSprite.selectedImage", "contents": "selectedImage" },
{ "trigger": "cc.MenuItemSprite.disabledImage", "contents": "disabledImage" },
{ "trigger": "cc.ParticleBatchNode.textureAtlas", "contents": "textureAtlas" },
{ "trigger": "cc.ParticleBatchNode.texture", "contents": "texture" },
{ "trigger": "cc.ParticleSystem.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.ParticleSystem.batchNode", "contents": "batchNode" },
{ "trigger": "cc.ParticleSystem.active", "contents": "active" },
{ "trigger": "cc.ParticleSystem.shapeType", "contents": "shapeType" },
{ "trigger": "cc.ParticleSystem.atlasIndex", "contents": "atlasIndex" },
{ "trigger": "cc.ParticleSystem.particleCount", "contents": "particleCount" },
{ "trigger": "cc.ParticleSystem.duration", "contents": "duration" },
{ "trigger": "cc.ParticleSystem.sourcePos", "contents": "sourcePos" },
{ "trigger": "cc.ParticleSystem.posVar", "contents": "posVar" },
{ "trigger": "cc.ParticleSystem.life", "contents": "life" },
{ "trigger": "cc.ParticleSystem.lifeVar", "contents": "lifeVar" },
{ "trigger": "cc.ParticleSystem.angle", "contents": "angle" },
{ "trigger": "cc.ParticleSystem.angleVar", "contents": "angleVar" },
{ "trigger": "cc.ParticleSystem.startSize", "contents": "startSize" },
{ "trigger": "cc.ParticleSystem.startSizeVar", "contents": "startSizeVar" },
{ "trigger": "cc.ParticleSystem.endSize", "contents": "endSize" },
{ "trigger": "cc.ParticleSystem.endSizeVar", "contents": "endSizeVar" },
{ "trigger": "cc.ParticleSystem.startSpin", "contents": "startSpin" },
{ "trigger": "cc.ParticleSystem.startSpinVar", "contents": "startSpinVar" },
{ "trigger": "cc.ParticleSystem.endSpin", "contents": "endSpin" },
{ "trigger": "cc.ParticleSystem.endSpinVar", "contents": "endSpinVar" },
{ "trigger": "cc.ParticleSystem.gravity", "contents": "gravity" },
{ "trigger": "cc.ParticleSystem.speed", "contents": "speed" },
{ "trigger": "cc.ParticleSystem.speedVar", "contents": "speedVar" },
{ "trigger": "cc.ParticleSystem.tangentialAccel", "contents": "tangentialAccel" },
{ "trigger": "cc.ParticleSystem.tangentialAccelVar", "contents": "tangentialAccelVar" },
{ "trigger": "cc.ParticleSystem.tangentialAccel", "contents": "tangentialAccel" },
{ "trigger": "cc.ParticleSystem.tangentialAccelVar", "contents": "tangentialAccelVar" },
{ "trigger": "cc.ParticleSystem.rotationIsDir", "contents": "rotationIsDir" },
{ "trigger": "cc.ParticleSystem.startRadius", "contents": "startRadius" },
{ "trigger": "cc.ParticleSystem.startRadiusVar", "contents": "startRadiusVar" },
{ "trigger": "cc.ParticleSystem.endRadius", "contents": "endRadius" },
{ "trigger": "cc.ParticleSystem.endRadiusVar", "contents": "endRadiusVar" },
{ "trigger": "cc.ParticleSystem.rotatePerS", "contents": "rotatePerS" },
{ "trigger": "cc.ParticleSystem.rotatePerSVar", "contents": "rotatePerSVar" },
{ "trigger": "cc.ParticleSystem.startColor", "contents": "startColor" },
{ "trigger": "cc.ParticleSystem.startColorVar", "contents": "startColorVar" },
{ "trigger": "cc.ParticleSystem.endColor", "contents": "endColor" },
{ "trigger": "cc.ParticleSystem.endColorVar", "contents": "endColorVar" },
{ "trigger": "cc.ParticleSystem.emissionRate", "contents": "emissionRate" },
{ "trigger": "cc.ParticleSystem.emitterMode", "contents": "emitterMode" },
{ "trigger": "cc.ParticleSystem.positionType", "contents": "positionType" },
{ "trigger": "cc.ParticleSystem.totalParticles", "contents": "totalParticles" },
{ "trigger": "cc.ParticleSystem.autoRemoveOnFinish", "contents": "autoRemoveOnFinish" },
{ "trigger": "cc.ParticleSystem.texture", "contents": "texture" },
{ "trigger": "cc.ProgressTimer.midPoint", "contents": "midPoint" },
{ "trigger": "cc.ProgressTimer.barChangeRate", "contents": "barChangeRate" },
{ "trigger": "cc.ProgressTimer.type", "contents": "type" },
{ "trigger": "cc.ProgressTimer.percentage", "contents": "percentage" },
{ "trigger": "cc.ProgressTimer.sprite", "contents": "sprite" },
{ "trigger": "cc.ProgressTimer.reverseDir", "contents": "reverseDir" },
{ "trigger": "cc.RenderTexture.sprite", "contents": "sprite" },
{ "trigger": "cc.RenderTexture.clearFlags", "contents": "clearFlags" },
{ "trigger": "cc.RenderTexture.clearDepthVal", "contents": "clearDepthVal" },
{ "trigger": "cc.RenderTexture.clearStencilVal", "contents": "clearStencilVal" },
{ "trigger": "cc.RenderTexture.clearColorVal", "contents": "clearColorVal" },
{ "trigger": "cc.RenderTexture.autoDraw", "contents": "autoDraw" },
{ "trigger": "cc.NodeGrid.grid", "contents": "grid" },
{ "trigger": "cc.NodeGrid.target", "contents": "target" },
{ "trigger": "cc.TMXLayer.tiles", "contents": "tiles" },
{ "trigger": "cc.TMXLayer.tileset", "contents": "tileset" },
{ "trigger": "cc.TMXLayer.layerOrientation", "contents": "layerOrientation" },
{ "trigger": "cc.TMXLayer.properties", "contents": "properties" },
{ "trigger": "cc.TMXLayer.layerName", "contents": "layerName" },
{ "trigger": "cc.TMXLayer.layerWidth", "contents": "layerWidth" },
{ "trigger": "cc.TMXLayer.layerHeight", "contents": "layerHeight" },
{ "trigger": "cc.TMXLayer.tileWidth", "contents": "tileWidth" },
{ "trigger": "cc.TMXLayer.tileHeight", "contents": "tileHeight" },
{ "trigger": "cc.TMXLayer.texture", "contents": "texture" },
{ "trigger": "cc.TMXTiledMap.properties", "contents": "properties" },
{ "trigger": "cc.TMXTiledMap.mapOrientation", "contents": "mapOrientation" },
{ "trigger": "cc.TMXTiledMap.objectGroups", "contents": "objectGroups" },
{ "trigger": "cc.TMXTiledMap.mapWidth", "contents": "mapWidth" },
{ "trigger": "cc.TMXTiledMap.mapHeight", "contents": "mapHeight" },
{ "trigger": "cc.TMXTiledMap.tileWidth", "contents": "tileWidth" },
{ "trigger": "cc.TMXTiledMap.tileHeight", "contents": "tileHeight" },
{ "trigger": "sp.SkeletonAnimation.prototype._ctor(skeletonDataFile, atlasFile, scale)", "contents": "sp.SkeletonAnimation.prototype._ctor(skeletonDataFile, atlasFile, scale)" },
{ "trigger": "sp.SkeletonAnimation.prototype.setAnimationListener(target, callback)", "contents": "sp.SkeletonAnimation.prototype.setAnimationListener(target, callback)" },
{ "trigger": "sp.SkeletonAnimation.extend", "contents": "sp.SkeletonAnimation.extend()" },
{ "trigger": "jsb.Terrain.DetailMap(file, size = 35)", "contents": "jsb.Terrain.DetailMap(file, size = 35)" },
{ "trigger": "jsb.Terrain.detailMap(file, size)", "contents": "jsb.Terrain.detailMap(file, size)" },
{ "trigger": "jsb.Terrain.TerrainData(heightMap, alphaMap, detailMap, chunkSize = cc.size(32, 32), mapHeight = 2, mapScale = 0.1)", "contents": "jsb.Terrain.TerrainData(heightMap, alphaMap, detailMap, chunkSize = cc.size(32, 32), mapHeight = 2, mapScale = 0.1)" },
{ "trigger": "jsb.Terrain.terrainData(heightMap, alphaMap, detailMap, chunkSize, mapHeight, mapScale)", "contents": "jsb.Terrain.terrainData(heightMap, alphaMap, detailMap, chunkSize, mapHeight, mapScale)" },
{ "trigger": "cc.math.Vec3(x=0, y=0, z=0)", "contents": "cc.math.Vec3(x=0, y=0, z=0)" },
{ "trigger": "cc.math.Vec3.prototype.normalize()", "contents": "cc.math.Vec3.prototype.normalize()" },
{ "trigger": "cc.math.vec3(x, y, z)", "contents": "cc.math.vec3(x, y, z)" },
{ "trigger": "cc.math.vec3Cross(v1, v2)", "contents": "cc.math.vec3Cross(v1, v2)" },
{ "trigger": "cc.math.vec3Dot(v1, v2)", "contents": "cc.math.vec3Dot(v1, v2)" },
{ "trigger": "cc.math.vec3Length(v)", "contents": "cc.math.vec3Length(v)" },
{ "trigger": "cc.math.vec3Normalize(v)", "contents": "cc.math.vec3Normalize(v)" },
{ "trigger": "cc.math.vec3Add(v1, v2)", "contents": "cc.math.vec3Add(v1, v2)" },
{ "trigger": "cc.math.vec3Sub(v1, v2)", "contents": "cc.math.vec3Sub(v1, v2)" },
{ "trigger": "cc.math.Quaternion(x=0, y=0, z=0, w=0)", "contents": "cc.math.Quaternion(x=0, y=0, z=0, w=0)" },
{ "trigger": "cc.math.quaternion(xOrAxis, yOrAngle, z, w)", "contents": "cc.math.quaternion(xOrAxis, yOrAngle, z, w)" },
{ "trigger": "cc.math.AABB(min=cc.math.vec3(99999, 99999, 99999), max=cc.math.vec3(-99999, -99999, -99999))", "contents": "cc.math.AABB(min=cc.math.vec3(99999, 99999, 99999), max=cc.math.vec3(-99999, -99999, -99999))" },
{ "trigger": "cc.math.aabb(min, max)", "contents": "cc.math.aabb(min, max)" },
{ "trigger": "cc.math.aabbGetCorners(aabb)", "contents": "cc.math.aabbGetCorners(aabb)" },
{ "trigger": "cc.math.OBB(aabb)", "contents": "cc.math.OBB(aabb)" },
{ "trigger": "cc.math.obb(aabb)", "contents": "cc.math.obb(aabb)" },
{ "trigger": "cc.math.Ray(origin = cc.math.vec3(0, 0, 0), direction = cc.math.vec3(0, 0, 1))", "contents": "cc.math.Ray(origin = cc.math.vec3(0, 0, 0), direction = cc.math.vec3(0, 0, 1))" },
{ "trigger": "cc.math.ray(origin, direction)", "contents": "cc.math.ray(origin, direction)" },
{ "trigger": "cc.math.vec4(x, y, z, w)", "contents": "cc.math.vec4(x, y, z, w)" },
{ "trigger": "jsb.Sprite3D.prototype._ctor(modelPath, texturePath)", "contents": "jsb.Sprite3D.prototype._ctor(modelPath, texturePath)" },
{ "trigger": "jsb.BillBoard.prototype._ctor(filename, rect, mode = jsb.BillBoard.Mode.VIEW_POINT_ORIENTED)", "contents": "jsb.BillBoard.prototype._ctor(filename, rect, mode = jsb.BillBoard.Mode.VIEW_POINT_ORIENTED)" },
{ "trigger": "jsb.Sprite3D.extend", "contents": "jsb.Sprite3D.extend()" },
{ "trigger": "ccui.RichText.prototype.init()", "contents": "ccui.RichText.prototype.init()" },
{ "trigger": "ccui.Slider.prototype.init()", "contents": "ccui.Slider.prototype.init()" },
{ "trigger": "ccui.ScrollView.prototype._ctor()", "contents": "ccui.ScrollView.prototype._ctor()" },
{ "trigger": "ccui.Button.prototype._ctor(normalImage, selectedImage, disableImage, texType)", "contents": "ccui.Button.prototype._ctor(normalImage, selectedImage, disableImage, texType)" },
{ "trigger": "ccui.CheckBox.prototype._ctor(backGround, backGroundSelected, cross, backGroundDisabled, frontCrossDisabled, texType)", "contents": "ccui.CheckBox.prototype._ctor(backGround, backGroundSelected, cross, backGroundDisabled, frontCrossDisabled, texType)" },
{ "trigger": "ccui.ImageView.prototype._ctor(imageFileName, texType)", "contents": "ccui.ImageView.prototype._ctor(imageFileName, texType)" },
{ "trigger": "ccui.LoadingBar.prototype._ctor(textureName, percentage)", "contents": "ccui.LoadingBar.prototype._ctor(textureName, percentage)" },
{ "trigger": "ccui.TextAtlas.prototype._ctor(stringValue, charMapFile, itemWidth, itemHeight, startCharMap)", "contents": "ccui.TextAtlas.prototype._ctor(stringValue, charMapFile, itemWidth, itemHeight, startCharMap)" },
{ "trigger": "ccui.Text.prototype._ctor(textContent, fontName, fontSize)", "contents": "ccui.Text.prototype._ctor(textContent, fontName, fontSize)" },
{ "trigger": "ccui.TextBMFont.prototype._ctor(text, filename)", "contents": "ccui.TextBMFont.prototype._ctor(text, filename)" },
{ "trigger": "ccui.TextField.prototype._ctor(placeholder, fontName, fontSize)", "contents": "ccui.TextField.prototype._ctor(placeholder, fontName, fontSize)" },
{ "trigger": "ccui.RichElementText.prototype._ctor(tag, color, opacity, text, fontName, fontSize)", "contents": "ccui.RichElementText.prototype._ctor(tag, color, opacity, text, fontName, fontSize)" },
{ "trigger": "ccui.RichElementImage.prototype._ctor(tag, color, opacity, filePath)", "contents": "ccui.RichElementImage.prototype._ctor(tag, color, opacity, filePath)" },
{ "trigger": "ccui.RichElementCustomNode.prototype._ctor(tag, color, opacity, customNode)", "contents": "ccui.RichElementCustomNode.prototype._ctor(tag, color, opacity, customNode)" },
{ "trigger": "cc.Scale9Sprite.prototype._ctor(file, rect, capInsets)", "contents": "cc.Scale9Sprite.prototype._ctor(file, rect, capInsets)" },
{ "trigger": "cc.EditBox.prototype._ctor(size, normal9SpriteBg, press9SpriteBg, disabled9SpriteBg)", "contents": "cc.EditBox.prototype._ctor(size, normal9SpriteBg, press9SpriteBg, disabled9SpriteBg)" },
{ "trigger": "ccui.Text.prototype.setText(text)", "contents": "ccui.Text.prototype.setText(text)" },
{ "trigger": "ccui.Text.prototype.getStringValue()", "contents": "ccui.Text.prototype.getStringValue()" },
{ "trigger": "ccui.Widget.xPercent", "contents": "xPercent" },
{ "trigger": "ccui.Widget.yPercent", "contents": "yPercent" },
{ "trigger": "ccui.Widget.widthPercent", "contents": "widthPercent" },
{ "trigger": "ccui.Widget.heightPercent", "contents": "heightPercent" },
{ "trigger": "ccui.Widget.widgetParent", "contents": "widgetParent" },
{ "trigger": "ccui.Widget.enabled", "contents": "enabled" },
{ "trigger": "ccui.Widget.focused", "contents": "focused" },
{ "trigger": "ccui.Widget.sizeType", "contents": "sizeType" },
{ "trigger": "ccui.Widget.widgetType", "contents": "widgetType" },
{ "trigger": "ccui.Widget.touchEnabled", "contents": "touchEnabled" },
{ "trigger": "ccui.Widget.updateEnabled", "contents": "updateEnabled" },
{ "trigger": "ccui.Widget.bright", "contents": "bright" },
{ "trigger": "ccui.Widget.name", "contents": "name" },
{ "trigger": "ccui.Widget.actionTag", "contents": "actionTag" },
{ "trigger": "ccui.Widget.x", "contents": "x" },
{ "trigger": "ccui.Widget.y", "contents": "y" },
{ "trigger": "ccui.Widget.width", "contents": "width" },
{ "trigger": "ccui.Widget.height", "contents": "height" },
{ "trigger": "ccui.Widget.flippedX", "contents": "flippedX" },
{ "trigger": "ccui.Widget.flippedY", "contents": "flippedY" },
{ "trigger": "ccui.Widget.children", "contents": "children" },
{ "trigger": "ccui.Widget.childrenCount", "contents": "childrenCount" },
{ "trigger": "ccui.Layout.clippingEnabled", "contents": "clippingEnabled" },
{ "trigger": "ccui.Layout.clippingType", "contents": "clippingType" },
{ "trigger": "ccui.Layout.layoutType", "contents": "layoutType" },
{ "trigger": "ccui.Button.width", "contents": "width" },
{ "trigger": "ccui.Button.height", "contents": "height" },
{ "trigger": "ccui.Button.titleText", "contents": "titleText" },
{ "trigger": "ccui.Button.titleFont", "contents": "titleFont" },
{ "trigger": "ccui.Button.titleFontSize", "contents": "titleFontSize" },
{ "trigger": "ccui.Button.titleFontName", "contents": "titleFontName" },
{ "trigger": "ccui.Button.titleFontColor", "contents": "titleFontColor" },
{ "trigger": "ccui.Button.pressedActionEnabled", "contents": "pressedActionEnabled" },
{ "trigger": "ccui.Button.anchorX", "contents": "anchorX" },
{ "trigger": "ccui.Button.anchorY", "contents": "anchorY" },
{ "trigger": "ccui.Button.flippedX", "contents": "flippedX" },
{ "trigger": "ccui.Button.flippedY", "contents": "flippedY" },
{ "trigger": "ccui.Button.color", "contents": "color" },
{ "trigger": "ccui.CheckBox.selected", "contents": "selected" },
{ "trigger": "ccui.CheckBox.anchorX", "contents": "anchorX" },
{ "trigger": "ccui.CheckBox.anchorY", "contents": "anchorY" },
{ "trigger": "ccui.CheckBox.flippedX", "contents": "flippedX" },
{ "trigger": "ccui.CheckBox.flippedY", "contents": "flippedY" },
{ "trigger": "ccui.CheckBox.width", "contents": "width" },
{ "trigger": "ccui.CheckBox.height", "contents": "height" },
{ "trigger": "ccui.Text.boundingWidth", "contents": "boundingWidth" },
{ "trigger": "ccui.Text.boundingHeight", "contents": "boundingHeight" },
{ "trigger": "ccui.Text.string", "contents": "string" },
{ "trigger": "ccui.Text.stringLength", "contents": "stringLength" },
{ "trigger": "ccui.Text.font", "contents": "font" },
{ "trigger": "ccui.Text.fontName", "contents": "fontName" },
{ "trigger": "ccui.Text.fontSize", "contents": "fontSize" },
{ "trigger": "ccui.Text.textAlign", "contents": "textAlign" },
{ "trigger": "ccui.Text.verticalAlign", "contents": "verticalAlign" },
{ "trigger": "ccui.Text.touchScaleEnabled", "contents": "touchScaleEnabled" },
{ "trigger": "ccui.Text.width", "contents": "width" },
{ "trigger": "ccui.Text.height", "contents": "height" },
{ "trigger": "ccui.Text.anchorX", "contents": "anchorX" },
{ "trigger": "ccui.Text.anchorY", "contents": "anchorY" },
{ "trigger": "ccui.Text.scaleX", "contents": "scaleX" },
{ "trigger": "ccui.Text.scaleY", "contents": "scaleY" },
{ "trigger": "ccui.Text.flippedX", "contents": "flippedX" },
{ "trigger": "ccui.Text.flippedY", "contents": "flippedY" },
{ "trigger": "ccui.TextAtlas.string", "contents": "string" },
{ "trigger": "ccui.TextAtlas.width", "contents": "width" },
{ "trigger": "ccui.TextAtlas.height", "contents": "height" },
{ "trigger": "ccui.TextAtlas.anchorX", "contents": "anchorX" },
{ "trigger": "ccui.TextAtlas.anchorY", "contents": "anchorY" },
{ "trigger": "ccui.TextBMFont.string", "contents": "string" },
{ "trigger": "ccui.TextBMFont.width", "contents": "width" },
{ "trigger": "ccui.TextBMFont.height", "contents": "height" },
{ "trigger": "ccui.TextBMFont.anchorX", "contents": "anchorX" },
{ "trigger": "ccui.TextBMFont.anchorY", "contents": "anchorY" },
{ "trigger": "ccui.LoadingBar.direction", "contents": "direction" },
{ "trigger": "ccui.LoadingBar.percent", "contents": "percent" },
{ "trigger": "ccui.LoadingBar.width", "contents": "width" },
{ "trigger": "ccui.LoadingBar.height", "contents": "height" },
{ "trigger": "ccui.Slider.percent", "contents": "percent" },
{ "trigger": "ccui.Slider.width", "contents": "width" },
{ "trigger": "ccui.Slider.height", "contents": "height" },
{ "trigger": "ccui.TextField.maxLengthEnabled", "contents": "maxLengthEnabled" },
{ "trigger": "ccui.TextField.maxLength", "contents": "maxLength" },
{ "trigger": "ccui.TextField.passwordEnabled", "contents": "passwordEnabled" },
{ "trigger": "ccui.TextField.string", "contents": "string" },
{ "trigger": "ccui.TextField.font", "contents": "font" },
{ "trigger": "ccui.TextField.fontSize", "contents": "fontSize" },
{ "trigger": "ccui.TextField.fontName", "contents": "fontName" },
{ "trigger": "ccui.TextField.width", "contents": "width" },
{ "trigger": "ccui.TextField.height", "contents": "height" },
{ "trigger": "ccui.TextField.anchorX", "contents": "anchorX" },
{ "trigger": "ccui.TextField.anchorY", "contents": "anchorY" },
{ "trigger": "ccui.ScrollView.innerWidth", "contents": "innerWidth" },
{ "trigger": "ccui.ScrollView.innerHeight", "contents": "innerHeight" },
{ "trigger": "ccui.ScrollView.bounceEnabled", "contents": "bounceEnabled" },
{ "trigger": "ccui.ScrollView.inertiaScrollEnabled", "contents": "inertiaScrollEnabled" },
{ "trigger": "ccui.ScrollView.children", "contents": "children" },
{ "trigger": "ccui.ScrollView.childrenCount", "contents": "childrenCount" },
{ "trigger": "ccui.ScrollView.layoutType", "contents": "layoutType" },
{ "trigger": "cc.Scale9Sprite.width", "contents": "width" },
{ "trigger": "cc.Scale9Sprite.height", "contents": "height" },
{ "trigger": "cc.Scale9Sprite.color", "contents": "color" },
{ "trigger": "cc.Scale9Sprite.opacity", "contents": "opacity" },
{ "trigger": "cc.Scale9Sprite.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.Scale9Sprite.preferredSize", "contents": "preferredSize" },
{ "trigger": "cc.Scale9Sprite.capInsets", "contents": "capInsets" },
{ "trigger": "cc.Scale9Sprite.insetLeft", "contents": "insetLeft" },
{ "trigger": "cc.Scale9Sprite.insetTop", "contents": "insetTop" },
{ "trigger": "cc.Scale9Sprite.insetRight", "contents": "insetRight" },
{ "trigger": "cc.Scale9Sprite.insetBottom", "contents": "insetBottom" },
{ "trigger": "cc.EditBox.font", "contents": "font" },
{ "trigger": "cc.EditBox.fontName", "contents": "fontName" },
{ "trigger": "cc.EditBox.fontSize", "contents": "fontSize" },
{ "trigger": "cc.EditBox.string", "contents": "string" },
{ "trigger": "cc.EditBox.maxLength", "contents": "maxLength" },
{ "trigger": "ccui.ImageView.anchorX", "contents": "anchorX" },
{ "trigger": "ccui.ImageView.anchorY", "contents": "anchorY" },
{ "trigger": "ccui.ImageView.flippedX", "contents": "flippedX" },
{ "trigger": "ccui.ImageView.flippedY", "contents": "flippedY" },
{ "trigger": "ccui.ImageView.width", "contents": "width" },
{ "trigger": "ccui.ImageView.height", "contents": "height" },
{ "trigger": "ccui.MarginZero()", "contents": "ccui.MarginZero()" },
{ "trigger": "ccui.Scale9Sprite.prototype.updateWithBatchNode(batchNode, originalRect, rotated, capInsets)", "contents": "ccui.Scale9Sprite.prototype.updateWithBatchNode(batchNode, originalRect, rotated, capInsets)" },
{ "trigger": "cp.Vect(x, y)", "contents": "cp.Vect(x, y)" },
{ "trigger": "cp.Vect.prototype.add(v)", "contents": "cp.Vect.prototype.add(v)" },
{ "trigger": "cp.Vect.prototype.sub(v)", "contents": "cp.Vect.prototype.sub(v)" },
{ "trigger": "cp.Vect.prototype.neg()", "contents": "cp.Vect.prototype.neg()" },
{ "trigger": "cp.Vect.prototype.mult(s)", "contents": "cp.Vect.prototype.mult(s)" },
{ "trigger": "cp.Vect.prototype.rotate(v)", "contents": "cp.Vect.prototype.rotate(v)" },
{ "trigger": "cp.Vect.prototype.project(v)", "contents": "cp.Vect.prototype.project(v)" },
{ "trigger": "cp.v(x, y)", "contents": "cp.v(x, y)" },
{ "trigger": "cp.v.str(v)", "contents": "cp.v.str(v)" },
{ "trigger": "cp.BoxShape2(body, box)", "contents": "cp.BoxShape2(body, box)" },
{ "trigger": "cp.BoxShape(body, width, height)", "contents": "cp.BoxShape(body, width, height)" },
{ "trigger": "cp.StaticBody()", "contents": "cp.StaticBody()" },
{ "trigger": "cp.BB(l, b, r, t)", "contents": "cp.BB(l, b, r, t)" },
{ "trigger": "cp.bb(l, b, r, t)", "contents": "cp.bb(l, b, r, t)" },
{ "trigger": "cp.Body.a", "contents": "a" },
{ "trigger": "cp.Body.w", "contents": "w" },
{ "trigger": "cp.Body.p", "contents": "p" },
{ "trigger": "cp.Body.v", "contents": "v" },
{ "trigger": "cp.Body.f", "contents": "f" },
{ "trigger": "cp.Body.t", "contents": "t" },
{ "trigger": "cp.Body.v_limit", "contents": "v_limit" },
{ "trigger": "cp.Body.w_limit", "contents": "w_limit" },
{ "trigger": "cp.Body.space", "contents": "space" },
{ "trigger": "cp.Body.rot", "contents": "rot" },
{ "trigger": "cp.Body.m", "contents": "m" },
{ "trigger": "cp.Body.i", "contents": "i" },
{ "trigger": "cp.Shape.body", "contents": "body" },
{ "trigger": "cp.Shape.group", "contents": "group" },
{ "trigger": "cp.Shape.collision_type", "contents": "collision_type" },
{ "trigger": "cp.Shape.layers", "contents": "layers" },
{ "trigger": "cp.Shape.sensor", "contents": "sensor" },
{ "trigger": "cp.Shape.space", "contents": "space" },
{ "trigger": "cp.Shape.surface_v", "contents": "surface_v" },
{ "trigger": "cp.Shape.e", "contents": "e" },
{ "trigger": "cp.Shape.u", "contents": "u" },
{ "trigger": "cp.Constraint.a", "contents": "a" },
{ "trigger": "cp.Constraint.b", "contents": "b" },
{ "trigger": "cp.Constraint.space", "contents": "space" },
{ "trigger": "cp.Constraint.maxForce", "contents": "maxForce" },
{ "trigger": "cp.Constraint.errorBias", "contents": "errorBias" },
{ "trigger": "cp.Constraint.maxBias", "contents": "maxBias" },
{ "trigger": "cp.PinJoint.anchr1", "contents": "anchr1" },
{ "trigger": "cp.PinJoint.anchr2", "contents": "anchr2" },
{ "trigger": "cp.PinJoint.dist", "contents": "dist" },
{ "trigger": "cp.SlideJoint.anchr1", "contents": "anchr1" },
{ "trigger": "cp.SlideJoint.anchr2", "contents": "anchr2" },
{ "trigger": "cp.SlideJoint.min", "contents": "min" },
{ "trigger": "cp.SlideJoint.max", "contents": "max" },
{ "trigger": "cp.PivotJoint.anchr1", "contents": "anchr1" },
{ "trigger": "cp.PivotJoint.anchr2", "contents": "anchr2" },
{ "trigger": "cp.GrooveJoint.anchr2", "contents": "anchr2" },
{ "trigger": "cp.GrooveJoint.grv_a", "contents": "grv_a" },
{ "trigger": "cp.GrooveJoint.grv_b", "contents": "grv_b" },
{ "trigger": "cp.DampedSpring.anchr1", "contents": "anchr1" },
{ "trigger": "cp.DampedSpring.anchr2", "contents": "anchr2" },
{ "trigger": "cp.DampedSpring.damping", "contents": "damping" },
{ "trigger": "cp.DampedSpring.restLength", "contents": "restLength" },
{ "trigger": "cp.DampedSpring.stiffness", "contents": "stiffness" },
{ "trigger": "cp.DampedRotarySpring.restAngle", "contents": "restAngle" },
{ "trigger": "cp.DampedRotarySpring.stiffness", "contents": "stiffness" },
{ "trigger": "cp.DampedRotarySpring.damping", "contents": "damping" },
{ "trigger": "cp.RotaryLimitJoint.min", "contents": "min" },
{ "trigger": "cp.RotaryLimitJoint.max", "contents": "max" },
{ "trigger": "cp.RatchetJoint.angle", "contents": "angle" },
{ "trigger": "cp.RatchetJoint.phase", "contents": "phase" },
{ "trigger": "cp.RatchetJoint.ratchet", "contents": "ratchet" },
{ "trigger": "cp.GearJoint.phase", "contents": "phase" },
{ "trigger": "cp.GearJoint.ratio", "contents": "ratio" },
{ "trigger": "cp.SimpleMotor.rate", "contents": "rate" },
{ "trigger": "cp.Arbiter.e", "contents": "e" },
{ "trigger": "cp.Arbiter.u", "contents": "u" },
{ "trigger": "cp.Arbiter.surface_vr", "contents": "surface_vr" },
{ "trigger": "dump(msg)", "contents": "dump(msg)" },
{ "trigger": "this.asyncListen(server)", "contents": "this.asyncListen(server)" },
{ "trigger": "onPacket(k)", "contents": "onPacket(k)" },
{ "trigger": "Debugger.Script.prototype.toString()", "contents": "Debugger.Script.prototype.toString()" },
{ "trigger": "request.onerror(event)", "contents": "request.onerror(event)" },
{ "trigger": "cc.ControlButton.extend", "contents": "cc.ControlButton.extend()" },
{ "trigger": "cc.ControlColourPicker.extend", "contents": "cc.ControlColourPicker.extend()" },
{ "trigger": "cc.ControlPotentiometer.extend", "contents": "cc.ControlPotentiometer.extend()" },
{ "trigger": "cc.ControlSlider.extend", "contents": "cc.ControlSlider.extend()" },
{ "trigger": "cc.ControlStepper.extend", "contents": "cc.ControlStepper.extend()" },
{ "trigger": "cc.ControlSwitch.extend", "contents": "cc.ControlSwitch.extend()" },
{ "trigger": "cc.ScrollView.extend", "contents": "cc.ScrollView.extend()" },
{ "trigger": "cc.TableView.extend", "contents": "cc.TableView.extend()" },
{ "trigger": "cc.TableViewCell.extend", "contents": "cc.TableViewCell.extend()" },
{ "trigger": "jsb.EventListenerAssetsManager.prototype._ctor(assetsManager, callback)", "contents": "jsb.EventListenerAssetsManager.prototype._ctor(assetsManager, callback)" },
{ "trigger": "cc.ControlButton.prototype._ctor(label, backgroundSprite, fontSize)", "contents": "cc.ControlButton.prototype._ctor(label, backgroundSprite, fontSize)" },
{ "trigger": "cc.ControlColourPicker.prototype._ctor()", "contents": "cc.ControlColourPicker.prototype._ctor()" },
{ "trigger": "cc.ControlPotentiometer.prototype._ctor(backgroundFile, progressFile, thumbFile)", "contents": "cc.ControlPotentiometer.prototype._ctor(backgroundFile, progressFile, thumbFile)" },
{ "trigger": "cc.ControlSlider.prototype._ctor(bgFile, progressFile, thumbFile)", "contents": "cc.ControlSlider.prototype._ctor(bgFile, progressFile, thumbFile)" },
{ "trigger": "cc.ControlStepper.prototype._ctor(minusSprite, plusSprite)", "contents": "cc.ControlStepper.prototype._ctor(minusSprite, plusSprite)" },
{ "trigger": "cc.ControlSwitch.prototype._ctor(maskSprite, onSprite, offSprite, thumbSprite, onLabel, offLabel)", "contents": "cc.ControlSwitch.prototype._ctor(maskSprite, onSprite, offSprite, thumbSprite, onLabel, offLabel)" },
{ "trigger": "cc.TableView.prototype._ctor(dataSouurce, size, container)", "contents": "cc.TableView.prototype._ctor(dataSouurce, size, container)" },
{ "trigger": "cc.ScrollView.prototype._ctor(size, container)", "contents": "cc.ScrollView.prototype._ctor(size, container)" },
{ "trigger": "cc.Control.opacityModifyRGB", "contents": "opacityModifyRGB" },
{ "trigger": "cc.Control.state", "contents": "state" },
{ "trigger": "cc.Control.enabled", "contents": "enabled" },
{ "trigger": "cc.Control.selected", "contents": "selected" },
{ "trigger": "cc.Control.highlighted", "contents": "highlighted" },
{ "trigger": "cc.ControlButton.color", "contents": "color" },
{ "trigger": "cc.ControlButton.opacity", "contents": "opacity" },
{ "trigger": "cc.ControlButton.adjustBackgroundImage", "contents": "adjustBackgroundImage" },
{ "trigger": "cc.ControlButton.zoomOnTouchDown", "contents": "zoomOnTouchDown" },
{ "trigger": "cc.ControlButton.preferredSize", "contents": "preferredSize" },
{ "trigger": "cc.ControlButton.labelAnchor", "contents": "labelAnchor" },
{ "trigger": "cc.ControlColourPicker.color", "contents": "color" },
{ "trigger": "cc.ControlColourPicker.enabled", "contents": "enabled" },
{ "trigger": "cc.ControlColourPicker.background", "contents": "background" },
{ "trigger": "cc.ControlHuePicker.enabled", "contents": "enabled" },
{ "trigger": "cc.ControlHuePicker.hue", "contents": "hue" },
{ "trigger": "cc.ControlHuePicker.huePercent", "contents": "huePercent" },
{ "trigger": "cc.ControlHuePicker.background", "contents": "background" },
{ "trigger": "cc.ControlHuePicker.slider", "contents": "slider" },
{ "trigger": "cc.ControlHuePicker.startPos", "contents": "startPos" },
{ "trigger": "cc.ControlPotentiometer.enabled", "contents": "enabled" },
{ "trigger": "cc.ControlPotentiometer.value", "contents": "value" },
{ "trigger": "cc.ControlPotentiometer.minValue", "contents": "minValue" },
{ "trigger": "cc.ControlPotentiometer.maxValue", "contents": "maxValue" },
{ "trigger": "cc.ControlPotentiometer.progressTimer", "contents": "progressTimer" },
{ "trigger": "cc.ControlPotentiometer.thumbSprite", "contents": "thumbSprite" },
{ "trigger": "cc.ControlPotentiometer.prevLocation", "contents": "prevLocation" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.enabled", "contents": "enabled" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.saturation", "contents": "saturation" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.brightness", "contents": "brightness" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.background", "contents": "background" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.overlay", "contents": "overlay" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.shadow", "contents": "shadow" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.slider", "contents": "slider" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.startPos", "contents": "startPos" },
{ "trigger": "cc.ControlSlider.enabled", "contents": "enabled" },
{ "trigger": "cc.ControlSlider.value", "contents": "value" },
{ "trigger": "cc.ControlSlider.minValue", "contents": "minValue" },
{ "trigger": "cc.ControlSlider.maxValue", "contents": "maxValue" },
{ "trigger": "cc.ControlSlider.minAllowedValue", "contents": "minAllowedValue" },
{ "trigger": "cc.ControlSlider.maxAllowedValue", "contents": "maxAllowedValue" },
{ "trigger": "cc.ControlSlider.thumbSprite", "contents": "thumbSprite" },
{ "trigger": "cc.ControlSlider.progressSprite", "contents": "progressSprite" },
{ "trigger": "cc.ControlSlider.backgroundSprite", "contents": "backgroundSprite" },
{ "trigger": "cc.ControlSwitch.enabled", "contents": "enabled" },
{ "trigger": "cc.ScrollView.width", "contents": "width" },
{ "trigger": "cc.ScrollView.height", "contents": "height" },
{ "trigger": "cc.ScrollView.direction", "contents": "direction" },
{ "trigger": "cc.ControlStepper.wraps", "contents": "wraps" },
{ "trigger": "cc.ControlStepper.value", "contents": "value" },
{ "trigger": "cc.ControlStepper.minValue", "contents": "minValue" },
{ "trigger": "cc.ControlStepper.maxValue", "contents": "maxValue" },
{ "trigger": "cc.ControlStepper.stepValue", "contents": "stepValue" },
{ "trigger": "cc.ControlStepper.continuous", "contents": "continuous" },
{ "trigger": "cc.ControlStepper.minusSprite", "contents": "minusSprite" },
{ "trigger": "cc.ControlStepper.plusSprite", "contents": "plusSprite" },
{ "trigger": "cc.ControlStepper.minusLabel", "contents": "minusLabel" },
{ "trigger": "cc.ControlStepper.plusSLabel", "contents": "plusSLabel" },
{ "trigger": "cc.TableViewCell.objectId", "contents": "objectId" },
{ "trigger": "cc.PhysicsDebugNode.create( space )", "contents": "cc.PhysicsDebugNode.create( space )" },
{ "trigger": "cc.PhysicsDebugNode.prototype._ctor(space)", "contents": "cc.PhysicsDebugNode.prototype._ctor(space)" },
{ "trigger": "cc.PhysicsDebugNode.prototype.setSpace( space )", "contents": "cc.PhysicsDebugNode.prototype.setSpace( space )" },
{ "trigger": "cc.PhysicsSprite.prototype.setBody( body )", "contents": "cc.PhysicsSprite.prototype.setBody( body )" },
{ "trigger": "cc.PhysicsSprite.prototype.getBody()", "contents": "cc.PhysicsSprite.prototype.getBody()" },
{ "trigger": "_p._ctor(fileName, rect)", "contents": "_p._ctor(fileName, rect)" },
{ "trigger": "cc.PhysicsSprite.create(fileName, rect)", "contents": "cc.PhysicsSprite.create(fileName, rect)" },
{ "trigger": "cc.PhysicsSprite.body", "contents": "body" },
{ "trigger": "cc.PhysicsSprite.x", "contents": "x" },
{ "trigger": "cc.PhysicsSprite.y", "contents": "y" },
{ "trigger": "cc.PhysicsSprite.rotation", "contents": "rotation" },
{ "trigger": "cc.PhysicsSprite.dirty", "contents": "dirty" },
{ "trigger": "ccs.AnimationInfo(name, startIndex, endIndex)", "contents": "ccs.AnimationInfo(name, startIndex, endIndex)" },
{ "trigger": "ccs.Armature.prototype.setBody( body )", "contents": "ccs.Armature.prototype.setBody( body )" },
{ "trigger": "ccs.sendEvent(event)", "contents": "ccs.sendEvent(event)" },
{ "trigger": "ccs.registerTriggerClass(className, createFunc)", "contents": "ccs.registerTriggerClass(className, createFunc)" },
{ "trigger": "ccs.TriggerObj.create()", "contents": "ccs.TriggerObj.create()" },
{ "trigger": "ccs.Bone.prototype.getColliderBodyList()", "contents": "ccs.Bone.prototype.getColliderBodyList()" },
{ "trigger": "ccs.ComController.extend", "contents": "ccs.ComController.extend()" },
{ "trigger": "ccs.Armature.extend", "contents": "ccs.Armature.extend()" },
{ "trigger": "ccs.ArmatureDataManager.prototype.clear()", "contents": "ccs.ArmatureDataManager.prototype.clear()" },
{ "trigger": "ccs.ActionManager.prototype.clear()", "contents": "ccs.ActionManager.prototype.clear()" },
{ "trigger": "ccs.ActionManager.prototype.initWithDictionary(file, dic, node)", "contents": "ccs.ActionManager.prototype.initWithDictionary(file, dic, node)" },
{ "trigger": "ccs.Armature.prototype._ctor(name, parentBone)", "contents": "ccs.Armature.prototype._ctor(name, parentBone)" },
{ "trigger": "ccs.Bone.prototype._ctor(name)", "contents": "ccs.Bone.prototype._ctor(name)" },
{ "trigger": "ccs.ArmatureAnimation.prototype._ctor(armature)", "contents": "ccs.ArmatureAnimation.prototype._ctor(armature)" },
{ "trigger": "ccs.Tween.prototype._ctor(bone)", "contents": "ccs.Tween.prototype._ctor(bone)" },
{ "trigger": "ccs.BatchNode.prototype._ctor()", "contents": "ccs.BatchNode.prototype._ctor()" },
{ "trigger": "ccs.DecorativeDisplay.prototype._ctor()", "contents": "ccs.DecorativeDisplay.prototype._ctor()" },
{ "trigger": "ccs.DisplayManager.prototype._ctor(bone)", "contents": "ccs.DisplayManager.prototype._ctor(bone)" },
{ "trigger": "ccs.Skin.prototype._ctor(fileName, rect)", "contents": "ccs.Skin.prototype._ctor(fileName, rect)" },
{ "trigger": "ccs.ColliderDetector.prototype._ctor(bone)", "contents": "ccs.ColliderDetector.prototype._ctor(bone)" },
{ "trigger": "ccs.TriggerObj.prototype._ctor()", "contents": "ccs.TriggerObj.prototype._ctor()" },
{ "trigger": "ccs.ComAttribute.prototype._ctor()", "contents": "ccs.ComAttribute.prototype._ctor()" },
{ "trigger": "ccs.ComAudio.prototype._ctor()", "contents": "ccs.ComAudio.prototype._ctor()" },
{ "trigger": "ccs.ComController.prototype._ctor()", "contents": "ccs.ComController.prototype._ctor()" },
{ "trigger": "ccs.ComRender.prototype._ctor()", "contents": "ccs.ComRender.prototype._ctor()" },
{ "trigger": "ccs.ActionTimelineData.prototype._ctor(actionTag)", "contents": "ccs.ActionTimelineData.prototype._ctor(actionTag)" },
{ "trigger": "ccs.ObjectExtensionData.prototype._ctor()", "contents": "ccs.ObjectExtensionData.prototype._ctor()" },
{ "trigger": "load(file, type, path)", "contents": "load(file, type, path)" },
{ "trigger": "load.registerParser(name, version, target)", "contents": "load.registerParser(name, version, target)" },
{ "trigger": "load.getParser(name, version)", "contents": "load.getParser(name, version)" },
{ "trigger": "extname(fileName)", "contents": "extname(fileName)" },
{ "trigger": "getParser(parser, version)", "contents": "getParser(parser, version)" },
{ "trigger": "ccs.load(file, path)", "contents": "ccs.load(file, path)" },
{ "trigger": "ccs.Bone.color", "contents": "color" },
{ "trigger": "ccs.Bone.opacity", "contents": "opacity" },
{ "trigger": "ccs.Bone.zIndex", "contents": "zIndex" },
{ "trigger": "ccs.Bone.boneData", "contents": "boneData" },
{ "trigger": "ccs.Bone.armature", "contents": "armature" },
{ "trigger": "ccs.Bone.parentBone", "contents": "parentBone" },
{ "trigger": "ccs.Bone.childArmature", "contents": "childArmature" },
{ "trigger": "ccs.Bone.childrenBone", "contents": "childrenBone" },
{ "trigger": "ccs.Bone.tween", "contents": "tween" },
{ "trigger": "ccs.Bone.tweenData", "contents": "tweenData" },
{ "trigger": "ccs.Bone.transformDirty", "contents": "transformDirty" },
{ "trigger": "ccs.Bone.colliderFilter", "contents": "colliderFilter" },
{ "trigger": "ccs.Bone.displayManager", "contents": "displayManager" },
{ "trigger": "ccs.Bone.ignoreMovementBoneData", "contents": "ignoreMovementBoneData" },
{ "trigger": "ccs.Bone.name", "contents": "name" },
{ "trigger": "ccs.Bone.blendDirty", "contents": "blendDirty" },
{ "trigger": "ccs.Armature.parentBone", "contents": "parentBone" },
{ "trigger": "ccs.Armature.animation", "contents": "animation" },
{ "trigger": "ccs.Armature.armatureData", "contents": "armatureData" },
{ "trigger": "ccs.Armature.name", "contents": "name" },
{ "trigger": "ccs.Armature.batchNode", "contents": "batchNode" },
{ "trigger": "ccs.Armature.version", "contents": "version" },
{ "trigger": "ccs.Armature.body", "contents": "body" },
{ "trigger": "ccs.Armature.colliderFilter", "contents": "colliderFilter" },
{ "trigger": "ccs.Skin.skinData", "contents": "skinData" },
{ "trigger": "ccs.Skin.bone", "contents": "bone" },
{ "trigger": "ccs.Skin.displayName", "contents": "displayName" },
{ "trigger": "ccs.ColliderDetector.colliderFilter", "contents": "colliderFilter" },
{ "trigger": "ccs.ColliderDetector.active", "contents": "active" },
{ "trigger": "ccs.ColliderDetector.body", "contents": "body" },
{ "trigger": "loadEasingDataWithFlatBuffers(frame, options)", "contents": "loadEasingDataWithFlatBuffers(frame, options)" },
{ "trigger": "parser.parseChild(node, objects, resourcePath)", "contents": "parser.parseChild(node, objects, resourcePath)" },
{ "trigger": "loadTexture(json, resourcePath, cb)", "contents": "loadTexture(json, resourcePath, cb)" },
{ "trigger": "parser.parseComponents(node, json, resourcePath)", "contents": "parser.parseComponents(node, json, resourcePath)" },
{ "trigger": "parser.generalAttributes(node, options)", "contents": "parser.generalAttributes(node, options)" },
{ "trigger": "parser.parseComponent(node, options)", "contents": "parser.parseComponent(node, options)" },
{ "trigger": "parser.parseChild(parse, widget, options, resourcePath)", "contents": "parser.parseChild(parse, widget, options, resourcePath)" },
{ "trigger": "parser.initNode(options)", "contents": "parser.initNode(options)" },
{ "trigger": "parser.initSubGraph(options)", "contents": "parser.initSubGraph(options)" },
{ "trigger": "parser.initSprite(options, resourcePath)", "contents": "parser.initSprite(options, resourcePath)" },
{ "trigger": "parser.initParticle(options, resourcePath)", "contents": "parser.initParticle(options, resourcePath)" },
{ "trigger": "parser.initTMXTiledMap(options, resourcePath)", "contents": "parser.initTMXTiledMap(options, resourcePath)" },
{ "trigger": "parser.initWidget(options, resourcePath)", "contents": "parser.initWidget(options, resourcePath)" },
{ "trigger": "getParam(value, dValue)", "contents": "getParam(value, dValue)" },
{ "trigger": "parser.generalAttributes(node, json)", "contents": "parser.generalAttributes(node, json)" },
{ "trigger": "parser.parseChild(node, children, resourcePath)", "contents": "parser.parseChild(node, children, resourcePath)" },
{ "trigger": "parser.initSingleNode(json)", "contents": "parser.initSingleNode(json)" },
{ "trigger": "parser.initSprite(json, resourcePath)", "contents": "parser.initSprite(json, resourcePath)" },
{ "trigger": "parser.initParticle(json, resourcePath)", "contents": "parser.initParticle(json, resourcePath)" },
{ "trigger": "parser.widgetAttributes(widget, json, enableContent)", "contents": "parser.widgetAttributes(widget, json, enableContent)" },
{ "trigger": "setLayoutBackground(layout, single, first, end)", "contents": "setLayoutBackground(layout, single, first, end)" },
{ "trigger": "setLayoutBackgroundVector(widget, vector)", "contents": "setLayoutBackgroundVector(widget, vector)" },
{ "trigger": "parser.initPanel(json, resourcePath)", "contents": "parser.initPanel(json, resourcePath)" },
{ "trigger": "parser.initText(json, resourcePath)", "contents": "parser.initText(json, resourcePath)" },
{ "trigger": "parser.initButton(json, resourcePath)", "contents": "parser.initButton(json, resourcePath)" },
{ "trigger": "parser.initCheckBox(json, resourcePath)", "contents": "parser.initCheckBox(json, resourcePath)" },
{ "trigger": "parser.initScrollView(json, resourcePath)", "contents": "parser.initScrollView(json, resourcePath)" },
{ "trigger": "parser.initImageView(json, resourcePath)", "contents": "parser.initImageView(json, resourcePath)" },
{ "trigger": "parser.initLoadingBar(json, resourcePath)", "contents": "parser.initLoadingBar(json, resourcePath)" },
{ "trigger": "parser.initSlider(json, resourcePath)", "contents": "parser.initSlider(json, resourcePath)" },
{ "trigger": "parser.initPageView(json, resourcePath)", "contents": "parser.initPageView(json, resourcePath)" },
{ "trigger": "parser.initListView(json, resourcePath)", "contents": "parser.initListView(json, resourcePath)" },
{ "trigger": "parser.initTextAtlas(json, resourcePath)", "contents": "parser.initTextAtlas(json, resourcePath)" },
{ "trigger": "parser.initTextBMFont(json, resourcePath)", "contents": "parser.initTextBMFont(json, resourcePath)" },
{ "trigger": "parser.initTextField(json, resourcePath)", "contents": "parser.initTextField(json, resourcePath)" },
{ "trigger": "parser.initSimpleAudio(json, resourcePath)", "contents": "parser.initSimpleAudio(json, resourcePath)" },
{ "trigger": "parser.initGameMap(json, resourcePath)", "contents": "parser.initGameMap(json, resourcePath)" },
{ "trigger": "parser.initProjectNode(json, resourcePath)", "contents": "parser.initProjectNode(json, resourcePath)" },
{ "trigger": "getFileName(name)", "contents": "getFileName(name)" },
{ "trigger": "parser.initArmature(json, resourcePath)", "contents": "parser.initArmature(json, resourcePath)" },
{ "trigger": "loadTexture(json, resourcePath, cb)", "contents": "loadTexture(json, resourcePath, cb)" },
{ "trigger": "getColor(json)", "contents": "getColor(json)" },
{ "trigger": "setContentSize(node, size)", "contents": "setContentSize(node, size)" },
{ "trigger": "get3DVector(json, name, defValue)", "contents": "get3DVector(json, name, defValue)" },
{ "trigger": "parser.general3DAttributes(node, json)", "contents": "parser.general3DAttributes(node, json)" },
{ "trigger": "parser.initNode3D(json)", "contents": "parser.initNode3D(json)" },
{ "trigger": "parser.initCamera(json)", "contents": "parser.initCamera(json)" },
{ "trigger": "parser.initSprite3D(json, resourcePath)", "contents": "parser.initSprite3D(json, resourcePath)" },
{ "trigger": "parser.initParticle3D(json, resourcePath)", "contents": "parser.initParticle3D(json, resourcePath)" },
{ "trigger": "parser.generalAttributes(widget, options)", "contents": "parser.generalAttributes(widget, options)" },
{ "trigger": "parser.colorAttributes(widget, options)", "contents": "parser.colorAttributes(widget, options)" },
{ "trigger": "parser.anchorPointAttributes(widget, options)", "contents": "parser.anchorPointAttributes(widget, options)" },
{ "trigger": "parser.parseChild(widget, options, resourcePath)", "contents": "parser.parseChild(widget, options, resourcePath)" },
{ "trigger": "getPath(res, type, path, cb)", "contents": "getPath(res, type, path, cb)" },
{ "trigger": "parser.LayoutAttributes(widget, options, resourcePath)", "contents": "parser.LayoutAttributes(widget, options, resourcePath)" },
{ "trigger": "parser.ButtonAttributes(widget, options, resourcePath)", "contents": "parser.ButtonAttributes(widget, options, resourcePath)" },
{ "trigger": "parser.CheckBoxAttributes(widget, options, resourcePath)", "contents": "parser.CheckBoxAttributes(widget, options, resourcePath)" },
{ "trigger": "parser.ImageViewAttributes(widget, options, resourcePath)", "contents": "parser.ImageViewAttributes(widget, options, resourcePath)" },
{ "trigger": "parser.TextAtlasAttributes(widget, options, resourcePath)", "contents": "parser.TextAtlasAttributes(widget, options, resourcePath)" },
{ "trigger": "parser.TextBMFontAttributes(widget, options, resourcePath)", "contents": "parser.TextBMFontAttributes(widget, options, resourcePath)" },
{ "trigger": "parser.TextAttributes(widget, options, resourcePath)", "contents": "parser.TextAttributes(widget, options, resourcePath)" },
{ "trigger": "parser.ListViewAttributes(widget, options, resoutcePath)", "contents": "parser.ListViewAttributes(widget, options, resoutcePath)" },
{ "trigger": "parser.LoadingBarAttributes(widget, options, resourcePath)", "contents": "parser.LoadingBarAttributes(widget, options, resourcePath)" },
{ "trigger": "parser.ScrollViewAttributes(widget, options, resoutcePath)", "contents": "parser.ScrollViewAttributes(widget, options, resoutcePath)" },
{ "trigger": "parser.SliderAttributes(widget, options, resourcePath)", "contents": "parser.SliderAttributes(widget, options, resourcePath)" },
{ "trigger": "parser.TextFieldAttributes(widget, options, resourcePath)", "contents": "parser.TextFieldAttributes(widget, options, resourcePath)" },
]
}
