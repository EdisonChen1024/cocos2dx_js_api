// Created On 2015-05-05 23:10:10
{
"scope": "source.js",
"completions":[
{ "trigger": "jsb.Animation3D.initWithFile(str, str)", "contents": "initWithFile(str, str)" },
{ "trigger": "jsb.Animation3D.init(animation3ddata)", "contents": "init(animation3ddata)" },
{ "trigger": "jsb.Animation3D.getBoneCurveByName(str)", "contents": "getBoneCurveByName(str)" },
{ "trigger": "jsb.Animation3D.getDuration()", "contents": "getDuration()" },
{ "trigger": "jsb.Animation3D.create(str, str)", "contents": "create(str, str)" },
{ "trigger": "jsb.Animation3D.Animation3D()", "contents": "Animation3D()" },
{ "trigger": "jsb.Animate3D.getSpeed()", "contents": "getSpeed()" },
{ "trigger": "jsb.Animate3D.setQuality(animate3dquality)", "contents": "setQuality(animate3dquality)" },
{ "trigger": "jsb.Animate3D.setWeight(float)", "contents": "setWeight(float)" },
{ "trigger": "jsb.Animate3D.removeFromMap()", "contents": "removeFromMap()" },
{ "trigger": "jsb.Animate3D.initWithFrames(animation3d, int, int, float)", "contents": "initWithFrames(animation3d, int, int, float)" },
{ "trigger": "jsb.Animate3D.getOriginInterval()", "contents": "getOriginInterval()" },
{ "trigger": "jsb.Animate3D.setSpeed(float)", "contents": "setSpeed(float)" },
{ "trigger": "jsb.Animate3D.init(animation3d, float, float)", "contents": "init(animation3d, float, float)" },
{ "trigger": "jsb.Animate3D.setOriginInterval(float)", "contents": "setOriginInterval(float)" },
{ "trigger": "jsb.Animate3D.getWeight()", "contents": "getWeight()" },
{ "trigger": "jsb.Animate3D.getQuality()", "contents": "getQuality()" },
{ "trigger": "jsb.Animate3D.create(animation3d, float, float)", "contents": "create(animation3d, float, float)" },
{ "trigger": "jsb.Animate3D.getTransitionTime()", "contents": "getTransitionTime()" },
{ "trigger": "jsb.Animate3D.createWithFrames(animation3d, int, int, float)", "contents": "createWithFrames(animation3d, int, int, float)" },
{ "trigger": "jsb.Animate3D.setTransitionTime(float)", "contents": "setTransitionTime(float)" },
{ "trigger": "jsb.Animate3D.Animate3D()", "contents": "Animate3D()" },
{ "trigger": "jsb.Skeleton3D.removeAllBones()", "contents": "removeAllBones()" },
{ "trigger": "jsb.Skeleton3D.addBone(bone3d)", "contents": "addBone(bone3d)" },
{ "trigger": "jsb.Skeleton3D.getBoneByName(str)", "contents": "getBoneByName(str)" },
{ "trigger": "jsb.Skeleton3D.getRootBone(int)", "contents": "getRootBone(int)" },
{ "trigger": "jsb.Skeleton3D.updateBoneMatrix()", "contents": "updateBoneMatrix()" },
{ "trigger": "jsb.Skeleton3D.getBoneByIndex(int)", "contents": "getBoneByIndex(int)" },
{ "trigger": "jsb.Skeleton3D.getRootCount()", "contents": "getRootCount()" },
{ "trigger": "jsb.Skeleton3D.getBoneIndex(bone3d)", "contents": "getBoneIndex(bone3d)" },
{ "trigger": "jsb.Skeleton3D.getBoneCount()", "contents": "getBoneCount()" },
{ "trigger": "jsb.Skeleton3D.Skeleton3D()", "contents": "Skeleton3D()" },
{ "trigger": "jsb.Sprite3D.setCullFaceEnabled(bool)", "contents": "setCullFaceEnabled(bool)" },
{ "trigger": "jsb.Sprite3D.setTexture(str)", "contents": "setTexture(str)" },
{ "trigger": "jsb.Sprite3D.getLightMask()", "contents": "getLightMask()" },
{ "trigger": "jsb.Sprite3D.createAttachSprite3DNode(nodedata, materialdatas)", "contents": "createAttachSprite3DNode(nodedata, materialdatas)" },
{ "trigger": "jsb.Sprite3D.loadFromFile(str, nodedatas, meshdatas, materialdatas)", "contents": "loadFromFile(str, nodedatas, meshdatas, materialdatas)" },
{ "trigger": "jsb.Sprite3D.setCullFace(int)", "contents": "setCullFace(int)" },
{ "trigger": "jsb.Sprite3D.addMesh(mesh)", "contents": "addMesh(mesh)" },
{ "trigger": "jsb.Sprite3D.removeAllAttachNode()", "contents": "removeAllAttachNode()" },
{ "trigger": "jsb.Sprite3D.genGLProgramState()", "contents": "genGLProgramState()" },
{ "trigger": "jsb.Sprite3D.getMesh()", "contents": "getMesh()" },
{ "trigger": "jsb.Sprite3D.createSprite3DNode(nodedata, modeldata, materialdatas)", "contents": "createSprite3DNode(nodedata, modeldata, materialdatas)" },
{ "trigger": "jsb.Sprite3D.getMeshCount()", "contents": "getMeshCount()" },
{ "trigger": "jsb.Sprite3D.onAABBDirty()", "contents": "onAABBDirty()" },
{ "trigger": "jsb.Sprite3D.getMeshByIndex(int)", "contents": "getMeshByIndex(int)" },
{ "trigger": "jsb.Sprite3D.createNode(nodedata, node, materialdatas, bool)", "contents": "createNode(nodedata, node, materialdatas, bool)" },
{ "trigger": "jsb.Sprite3D.isForceDepthWrite()", "contents": "isForceDepthWrite()" },
{ "trigger": "jsb.Sprite3D.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "jsb.Sprite3D.getMeshIndexData(str)", "contents": "getMeshIndexData(str)" },
{ "trigger": "jsb.Sprite3D.removeAttachNode(str)", "contents": "removeAttachNode(str)" },
{ "trigger": "jsb.Sprite3D.setLightMask(int)", "contents": "setLightMask(int)" },
{ "trigger": "jsb.Sprite3D.afterAsyncLoad(void)", "contents": "afterAsyncLoad(void)" },
{ "trigger": "jsb.Sprite3D.loadFromCache(str)", "contents": "loadFromCache(str)" },
{ "trigger": "jsb.Sprite3D.initFrom(nodedatas, meshdatas, materialdatas)", "contents": "initFrom(nodedatas, meshdatas, materialdatas)" },
{ "trigger": "jsb.Sprite3D.getAttachNode(str)", "contents": "getAttachNode(str)" },
{ "trigger": "jsb.Sprite3D.initWithFile(str)", "contents": "initWithFile(str)" },
{ "trigger": "jsb.Sprite3D.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "jsb.Sprite3D.getSkeleton()", "contents": "getSkeleton()" },
{ "trigger": "jsb.Sprite3D.setForceDepthWrite(bool)", "contents": "setForceDepthWrite(bool)" },
{ "trigger": "jsb.Sprite3D.getMeshByName(str)", "contents": "getMeshByName(str)" },
{ "trigger": "jsb.Sprite3D.create(str, str)", "contents": "create(str, str)" },
{ "trigger": "jsb.Sprite3D.Sprite3D()", "contents": "Sprite3D()" },
{ "trigger": "jsb.Sprite3DCache.removeSprite3DData(str)", "contents": "removeSprite3DData(str)" },
{ "trigger": "jsb.Sprite3DCache.removeAllSprite3DData()", "contents": "removeAllSprite3DData()" },
{ "trigger": "jsb.Sprite3DCache.destroyInstance()", "contents": "destroyInstance()" },
{ "trigger": "jsb.Sprite3DCache.getInstance()", "contents": "getInstance()" },
{ "trigger": "jsb.Mesh.setTexture(str)", "contents": "setTexture(str)" },
{ "trigger": "jsb.Mesh.getTexture()", "contents": "getTexture()" },
{ "trigger": "jsb.Mesh.getSkin()", "contents": "getSkin()" },
{ "trigger": "jsb.Mesh.getVertexSizeInBytes()", "contents": "getVertexSizeInBytes()" },
{ "trigger": "jsb.Mesh.getName()", "contents": "getName()" },
{ "trigger": "jsb.Mesh.getIndexFormat()", "contents": "getIndexFormat()" },
{ "trigger": "jsb.Mesh.getGLProgramState()", "contents": "getGLProgramState()" },
{ "trigger": "jsb.Mesh.getVertexBuffer()", "contents": "getVertexBuffer()" },
{ "trigger": "jsb.Mesh.calculateAABB()", "contents": "calculateAABB()" },
{ "trigger": "jsb.Mesh.hasVertexAttrib(int)", "contents": "hasVertexAttrib(int)" },
{ "trigger": "jsb.Mesh.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "jsb.Mesh.getMeshIndexData()", "contents": "getMeshIndexData()" },
{ "trigger": "jsb.Mesh.setName(str)", "contents": "setName(str)" },
{ "trigger": "jsb.Mesh.isVisible()", "contents": "isVisible()" },
{ "trigger": "jsb.Mesh.getIndexCount()", "contents": "getIndexCount()" },
{ "trigger": "jsb.Mesh.bindMeshCommand()", "contents": "bindMeshCommand()" },
{ "trigger": "jsb.Mesh.setMeshIndexData(meshindexdata)", "contents": "setMeshIndexData(meshindexdata)" },
{ "trigger": "jsb.Mesh.getMeshVertexAttribCount()", "contents": "getMeshVertexAttribCount()" },
{ "trigger": "jsb.Mesh.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "jsb.Mesh.getPrimitiveType()", "contents": "getPrimitiveType()" },
{ "trigger": "jsb.Mesh.setSkin(meshskin)", "contents": "setSkin(meshskin)" },
{ "trigger": "jsb.Mesh.getIndexBuffer()", "contents": "getIndexBuffer()" },
{ "trigger": "jsb.Mesh.setGLProgramState(glprogramstate)", "contents": "setGLProgramState(glprogramstate)" },
{ "trigger": "jsb.Mesh.setVisible(bool)", "contents": "setVisible(bool)" },
{ "trigger": "jsb.Mesh.Mesh()", "contents": "Mesh()" },
{ "trigger": "jsb.AttachNode.create(bone3d)", "contents": "create(bone3d)" },
{ "trigger": "jsb.AttachNode.AttachNode()", "contents": "AttachNode()" },
{ "trigger": "jsb.BillBoard.getMode()", "contents": "getMode()" },
{ "trigger": "jsb.BillBoard.setMode(mode)", "contents": "setMode(mode)" },
{ "trigger": "jsb.BillBoard.create(str, rect, mode)", "contents": "create(str, rect, mode)" },
{ "trigger": "jsb.BillBoard.createWithTexture(texture2d, mode)", "contents": "createWithTexture(texture2d, mode)" },
{ "trigger": "jsb.BillBoard.BillBoard()", "contents": "BillBoard()" },
{ "trigger": "jsb.TextureCube.reloadTexture()", "contents": "reloadTexture()" },
{ "trigger": "jsb.TextureCube.create(str, str, str, str, str, str)", "contents": "create(str, str, str, str, str, str)" },
{ "trigger": "jsb.TextureCube.TextureCube()", "contents": "TextureCube()" },
{ "trigger": "jsb.Skybox.reload()", "contents": "reload()" },
{ "trigger": "jsb.Skybox.init(str, str, str, str, str, str)", "contents": "init(str, str, str, str, str, str)" },
{ "trigger": "jsb.Skybox.setTexture(texturecube)", "contents": "setTexture(texturecube)" },
{ "trigger": "jsb.Skybox.create(str, str, str, str, str, str)", "contents": "create(str, str, str, str, str, str)" },
{ "trigger": "jsb.Skybox.Skybox()", "contents": "Skybox()" },
{ "trigger": "jsb.Terrain.initHeightMap(char)", "contents": "initHeightMap(char)" },
{ "trigger": "jsb.Terrain.getIntersectionPoint(ray)", "contents": "getIntersectionPoint(ray)" },
{ "trigger": "jsb.Terrain.setAlphaMap(texture2d)", "contents": "setAlphaMap(texture2d)" },
{ "trigger": "jsb.Terrain.setSkirtHeightRatio(float)", "contents": "setSkirtHeightRatio(float)" },
{ "trigger": "jsb.Terrain.convertToTerrainSpace(vec2)", "contents": "convertToTerrainSpace(vec2)" },
{ "trigger": "jsb.Terrain.getHeight(float, float, vec3)", "contents": "getHeight(float, float, vec3)" },
{ "trigger": "jsb.Terrain.initTextures()", "contents": "initTextures()" },
{ "trigger": "jsb.Terrain.initProperties()", "contents": "initProperties()" },
{ "trigger": "jsb.Terrain.getNormal(int, int)", "contents": "getNormal(int, int)" },
{ "trigger": "jsb.Terrain.setDrawWire(bool)", "contents": "setDrawWire(bool)" },
{ "trigger": "jsb.Terrain.reload()", "contents": "reload()" },
{ "trigger": "jsb.Terrain.setDetailMap(int, map)", "contents": "setDetailMap(int, map)" },
{ "trigger": "jsb.Terrain.getImageHeight(int, int)", "contents": "getImageHeight(int, int)" },
{ "trigger": "jsb.Terrain.getMinHeight()", "contents": "getMinHeight()" },
{ "trigger": "jsb.Terrain.setLODDistance(float, float, float)", "contents": "setLODDistance(float, float, float)" },
{ "trigger": "jsb.Terrain.resetHeightMap(char)", "contents": "resetHeightMap(char)" },
{ "trigger": "jsb.Terrain.getMaxHeight()", "contents": "getMaxHeight()" },
{ "trigger": "jsb.Terrain.setMaxDetailMapAmount(int)", "contents": "setMaxDetailMapAmount(int)" },
{ "trigger": "jsb.Terrain.setIsEnableFrustumCull(bool)", "contents": "setIsEnableFrustumCull(bool)" },
{ "trigger": "jsb.ParticleSystem3D.resumeParticleSystem()", "contents": "resumeParticleSystem()" },
{ "trigger": "jsb.ParticleSystem3D.startParticleSystem()", "contents": "startParticleSystem()" },
{ "trigger": "jsb.ParticleSystem3D.isEnabled()", "contents": "isEnabled()" },
{ "trigger": "jsb.ParticleSystem3D.isKeepLocal()", "contents": "isKeepLocal()" },
{ "trigger": "jsb.ParticleSystem3D.setEnabled(bool)", "contents": "setEnabled(bool)" },
{ "trigger": "jsb.ParticleSystem3D.getParticleQuota()", "contents": "getParticleQuota()" },
{ "trigger": "jsb.ParticleSystem3D.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "jsb.ParticleSystem3D.pauseParticleSystem()", "contents": "pauseParticleSystem()" },
{ "trigger": "jsb.ParticleSystem3D.getState()", "contents": "getState()" },
{ "trigger": "jsb.ParticleSystem3D.getAliveParticleCount()", "contents": "getAliveParticleCount()" },
{ "trigger": "jsb.ParticleSystem3D.setParticleQuota(int)", "contents": "setParticleQuota(int)" },
{ "trigger": "jsb.ParticleSystem3D.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "jsb.ParticleSystem3D.stopParticleSystem()", "contents": "stopParticleSystem()" },
{ "trigger": "jsb.ParticleSystem3D.setKeepLocal(bool)", "contents": "setKeepLocal(bool)" },
{ "trigger": "jsb.ParticleSystem3D.ParticleSystem3D()", "contents": "ParticleSystem3D()" },
{ "trigger": "jsb.PUParticleSystem3D.initWithFilePath(str)", "contents": "initWithFilePath(str)" },
{ "trigger": "jsb.PUParticleSystem3D.getParticleSystemScaleVelocity()", "contents": "getParticleSystemScaleVelocity()" },
{ "trigger": "jsb.PUParticleSystem3D.setEmittedSystemQuota(int)", "contents": "setEmittedSystemQuota(int)" },
{ "trigger": "jsb.PUParticleSystem3D.getDefaultDepth()", "contents": "getDefaultDepth()" },
{ "trigger": "jsb.PUParticleSystem3D.getEmittedSystemQuota()", "contents": "getEmittedSystemQuota()" },
{ "trigger": "jsb.PUParticleSystem3D.initWithFilePathAndMaterialPath(str, str)", "contents": "initWithFilePathAndMaterialPath(str, str)" },
{ "trigger": "jsb.PUParticleSystem3D.clearAllParticles()", "contents": "clearAllParticles()" },
{ "trigger": "jsb.PUParticleSystem3D.getMaterialName()", "contents": "getMaterialName()" },
{ "trigger": "jsb.PUParticleSystem3D.calulateRotationOffset()", "contents": "calulateRotationOffset()" },
{ "trigger": "jsb.PUParticleSystem3D.getMaxVelocity()", "contents": "getMaxVelocity()" },
{ "trigger": "jsb.PUParticleSystem3D.forceUpdate(float)", "contents": "forceUpdate(float)" },
{ "trigger": "jsb.PUParticleSystem3D.getTimeElapsedSinceStart()", "contents": "getTimeElapsedSinceStart()" },
{ "trigger": "jsb.PUParticleSystem3D.getEmittedEmitterQuota()", "contents": "getEmittedEmitterQuota()" },
{ "trigger": "jsb.PUParticleSystem3D.isMarkedForEmission()", "contents": "isMarkedForEmission()" },
{ "trigger": "jsb.PUParticleSystem3D.getDefaultWidth()", "contents": "getDefaultWidth()" },
{ "trigger": "jsb.PUParticleSystem3D.setEmittedEmitterQuota(int)", "contents": "setEmittedEmitterQuota(int)" },
{ "trigger": "jsb.PUParticleSystem3D.setMarkedForEmission(bool)", "contents": "setMarkedForEmission(bool)" },
{ "trigger": "jsb.PUParticleSystem3D.clone()", "contents": "clone()" },
{ "trigger": "jsb.PUParticleSystem3D.setDefaultWidth(float)", "contents": "setDefaultWidth(float)" },
{ "trigger": "jsb.PUParticleSystem3D.copyAttributesTo(puparticlesystem3d)", "contents": "copyAttributesTo(puparticlesystem3d)" },
{ "trigger": "jsb.PUParticleSystem3D.setMaterialName(str)", "contents": "setMaterialName(str)" },
{ "trigger": "jsb.PUParticleSystem3D.getParentParticleSystem()", "contents": "getParentParticleSystem()" },
{ "trigger": "jsb.PUParticleSystem3D.setMaxVelocity(float)", "contents": "setMaxVelocity(float)" },
{ "trigger": "jsb.PUParticleSystem3D.getDefaultHeight()", "contents": "getDefaultHeight()" },
{ "trigger": "jsb.PUParticleSystem3D.getDerivedPosition()", "contents": "getDerivedPosition()" },
{ "trigger": "jsb.PUParticleSystem3D.rotationOffset(vec3)", "contents": "rotationOffset(vec3)" },
{ "trigger": "jsb.PUParticleSystem3D.getDerivedOrientation()", "contents": "getDerivedOrientation()" },
{ "trigger": "jsb.PUParticleSystem3D.removeAllEmitter()", "contents": "removeAllEmitter()" },
{ "trigger": "jsb.PUParticleSystem3D.setParticleSystemScaleVelocity(float)", "contents": "setParticleSystemScaleVelocity(float)" },
{ "trigger": "jsb.PUParticleSystem3D.getDerivedScale()", "contents": "getDerivedScale()" },
{ "trigger": "jsb.PUParticleSystem3D.setDefaultHeight(float)", "contents": "setDefaultHeight(float)" },
{ "trigger": "jsb.PUParticleSystem3D.removeAllListener()", "contents": "removeAllListener()" },
{ "trigger": "jsb.PUParticleSystem3D.initSystem(str)", "contents": "initSystem(str)" },
{ "trigger": "jsb.PUParticleSystem3D.setDefaultDepth(float)", "contents": "setDefaultDepth(float)" },
{ "trigger": "jsb.PUParticleSystem3D.create(str, str)", "contents": "create(str, str)" },
{ "trigger": "jsb.PUParticleSystem3D.PUParticleSystem3D()", "contents": "PUParticleSystem3D()" },
{ "trigger": "cc.Action.startWithTarget(node)", "contents": "startWithTarget(node)" },
{ "trigger": "cc.Action.setOriginalTarget(node)", "contents": "setOriginalTarget(node)" },
{ "trigger": "cc.Action.clone()", "contents": "clone()" },
{ "trigger": "cc.Action.getOriginalTarget()", "contents": "getOriginalTarget()" },
{ "trigger": "cc.Action.stop()", "contents": "stop()" },
{ "trigger": "cc.Action.update(float)", "contents": "update(float)" },
{ "trigger": "cc.Action.getTarget()", "contents": "getTarget()" },
{ "trigger": "cc.Action.step(float)", "contents": "step(float)" },
{ "trigger": "cc.Action.setTag(int)", "contents": "setTag(int)" },
{ "trigger": "cc.Action.getTag()", "contents": "getTag()" },
{ "trigger": "cc.Action.setTarget(node)", "contents": "setTarget(node)" },
{ "trigger": "cc.Action.isDone()", "contents": "isDone()" },
{ "trigger": "cc.Action.reverse()", "contents": "reverse()" },
{ "trigger": "cc.FiniteTimeAction.setDuration(float)", "contents": "setDuration(float)" },
{ "trigger": "cc.FiniteTimeAction.getDuration()", "contents": "getDuration()" },
{ "trigger": "cc.Speed.setInnerAction(actioninterval)", "contents": "setInnerAction(actioninterval)" },
{ "trigger": "cc.Speed.getSpeed()", "contents": "getSpeed()" },
{ "trigger": "cc.Speed.setSpeed(float)", "contents": "setSpeed(float)" },
{ "trigger": "cc.Speed.initWithAction(actioninterval, float)", "contents": "initWithAction(actioninterval, float)" },
{ "trigger": "cc.Speed.getInnerAction()", "contents": "getInnerAction()" },
{ "trigger": "cc.Speed.create(actioninterval, float)", "contents": "create(actioninterval, float)" },
{ "trigger": "cc.Speed.Speed()", "contents": "Speed()" },
{ "trigger": "cc.Follow.setBoundarySet(bool)", "contents": "setBoundarySet(bool)" },
{ "trigger": "cc.Follow.initWithTarget(node, rect)", "contents": "initWithTarget(node, rect)" },
{ "trigger": "cc.Follow.isBoundarySet()", "contents": "isBoundarySet()" },
{ "trigger": "cc.Follow.create(node, rect)", "contents": "create(node, rect)" },
{ "trigger": "cc.Follow.Follow()", "contents": "Follow()" },
{ "trigger": "cc.Texture2D.getGLProgram()", "contents": "getGLProgram()" },
{ "trigger": "cc.Texture2D.getMaxT()", "contents": "getMaxT()" },
{ "trigger": "cc.Texture2D.getStringForFormat()", "contents": "getStringForFormat()" },
{ "trigger": "cc.Texture2D.initWithImage(image, pixelformat)", "contents": "initWithImage(image, pixelformat)" },
{ "trigger": "cc.Texture2D.setGLProgram(glprogram)", "contents": "setGLProgram(glprogram)" },
{ "trigger": "cc.Texture2D.getMaxS()", "contents": "getMaxS()" },
{ "trigger": "cc.Texture2D.releaseGLTexture()", "contents": "releaseGLTexture()" },
{ "trigger": "cc.Texture2D.hasPremultipliedAlpha()", "contents": "hasPremultipliedAlpha()" },
{ "trigger": "cc.Texture2D.initWithMipmaps(map, int, pixelformat, int, int)", "contents": "initWithMipmaps(map, int, pixelformat, int, int)" },
{ "trigger": "cc.Texture2D.getPixelsHigh()", "contents": "getPixelsHigh()" },
{ "trigger": "cc.Texture2D.getBitsPerPixelForFormat(pixelformat)", "contents": "getBitsPerPixelForFormat(pixelformat)" },
{ "trigger": "cc.Texture2D.getName()", "contents": "getName()" },
{ "trigger": "cc.Texture2D.initWithString(char, str, float, size, texthalignment, textvalignment)", "contents": "initWithString(char, str, float, size, texthalignment, textvalignment)" },
{ "trigger": "cc.Texture2D.setMaxT(float)", "contents": "setMaxT(float)" },
{ "trigger": "cc.Texture2D.drawInRect(rect)", "contents": "drawInRect(rect)" },
{ "trigger": "cc.Texture2D.getContentSize()", "contents": "getContentSize()" },
{ "trigger": "cc.Texture2D.setAliasTexParameters()", "contents": "setAliasTexParameters()" },
{ "trigger": "cc.Texture2D.setAntiAliasTexParameters()", "contents": "setAntiAliasTexParameters()" },
{ "trigger": "cc.Texture2D.generateMipmap()", "contents": "generateMipmap()" },
{ "trigger": "cc.Texture2D.getDescription()", "contents": "getDescription()" },
{ "trigger": "cc.Texture2D.getPixelFormat()", "contents": "getPixelFormat()" },
{ "trigger": "cc.Texture2D.getContentSizeInPixels()", "contents": "getContentSizeInPixels()" },
{ "trigger": "cc.Texture2D.getPixelsWide()", "contents": "getPixelsWide()" },
{ "trigger": "cc.Texture2D.drawAtPoint(vec2)", "contents": "drawAtPoint(vec2)" },
{ "trigger": "cc.Texture2D.hasMipmaps()", "contents": "hasMipmaps()" },
{ "trigger": "cc.Texture2D.setMaxS(float)", "contents": "setMaxS(float)" },
{ "trigger": "cc.Texture2D.setDefaultAlphaPixelFormat(pixelformat)", "contents": "setDefaultAlphaPixelFormat(pixelformat)" },
{ "trigger": "cc.Texture2D.getDefaultAlphaPixelFormat()", "contents": "getDefaultAlphaPixelFormat()" },
{ "trigger": "cc.Texture2D.Texture2D()", "contents": "Texture2D()" },
{ "trigger": "cc.Touch.getPreviousLocationInView()", "contents": "getPreviousLocationInView()" },
{ "trigger": "cc.Touch.getLocation()", "contents": "getLocation()" },
{ "trigger": "cc.Touch.getDelta()", "contents": "getDelta()" },
{ "trigger": "cc.Touch.getStartLocationInView()", "contents": "getStartLocationInView()" },
{ "trigger": "cc.Touch.getStartLocation()", "contents": "getStartLocation()" },
{ "trigger": "cc.Touch.getID()", "contents": "getID()" },
{ "trigger": "cc.Touch.setTouchInfo(int, float, float)", "contents": "setTouchInfo(int, float, float)" },
{ "trigger": "cc.Touch.getLocationInView()", "contents": "getLocationInView()" },
{ "trigger": "cc.Touch.getPreviousLocation()", "contents": "getPreviousLocation()" },
{ "trigger": "cc.Touch.Touch()", "contents": "Touch()" },
{ "trigger": "cc.Event.isStopped()", "contents": "isStopped()" },
{ "trigger": "cc.Event.getType()", "contents": "getType()" },
{ "trigger": "cc.Event.getCurrentTarget()", "contents": "getCurrentTarget()" },
{ "trigger": "cc.Event.stopPropagation()", "contents": "stopPropagation()" },
{ "trigger": "cc.Event.Event(type)", "contents": "Event(type)" },
{ "trigger": "cc.EventTouch.getEventCode()", "contents": "getEventCode()" },
{ "trigger": "cc.EventTouch.setEventCode(eventcode)", "contents": "setEventCode(eventcode)" },
{ "trigger": "cc.EventTouch.EventTouch()", "contents": "EventTouch()" },
{ "trigger": "cc.Node.addChild(node, int, str)", "contents": "addChild(node, int, str)" },
{ "trigger": "cc.Node.removeComponent(str)", "contents": "removeComponent(str)" },
{ "trigger": "cc.Node.setPhysicsBody(physicsbody)", "contents": "setPhysicsBody(physicsbody)" },
{ "trigger": "cc.Node.getGLProgram()", "contents": "getGLProgram()" },
{ "trigger": "cc.Node.updateTransformFromPhysics(mat4, int)", "contents": "updateTransformFromPhysics(mat4, int)" },
{ "trigger": "cc.Node.getDescription()", "contents": "getDescription()" },
{ "trigger": "cc.Node.setOpacityModifyRGB(bool)", "contents": "setOpacityModifyRGB(bool)" },
{ "trigger": "cc.Node.setCascadeOpacityEnabled(bool)", "contents": "setCascadeOpacityEnabled(bool)" },
{ "trigger": "cc.Node.getChildren()", "contents": "getChildren()" },
{ "trigger": "cc.Node.setOnExitCallback(func)", "contents": "setOnExitCallback(func)" },
{ "trigger": "cc.Node.isIgnoreAnchorPointForPosition()", "contents": "isIgnoreAnchorPointForPosition()" },
{ "trigger": "cc.Node.getChildByName(str)", "contents": "getChildByName(str)" },
{ "trigger": "cc.Node.updateDisplayedOpacity(char)", "contents": "updateDisplayedOpacity(char)" },
{ "trigger": "cc.Node.init()", "contents": "init()" },
{ "trigger": "cc.Node.getCameraMask()", "contents": "getCameraMask()" },
{ "trigger": "cc.Node.setRotation(float)", "contents": "setRotation(float)" },
{ "trigger": "cc.Node.setScaleZ(float)", "contents": "setScaleZ(float)" },
{ "trigger": "cc.Node.setScaleY(float)", "contents": "setScaleY(float)" },
{ "trigger": "cc.Node.setScaleX(float)", "contents": "setScaleX(float)" },
{ "trigger": "cc.Node.getColor()", "contents": "getColor()" },
{ "trigger": "cc.Node.setonEnterTransitionDidFinishCallback(func)", "contents": "setonEnterTransitionDidFinishCallback(func)" },
{ "trigger": "cc.Node.removeFromPhysicsWorld()", "contents": "removeFromPhysicsWorld()" },
{ "trigger": "cc.Node.removeAllComponents()", "contents": "removeAllComponents()" },
{ "trigger": "cc.Node.getOpacity()", "contents": "getOpacity()" },
{ "trigger": "cc.Node.setCameraMask(short, bool)", "contents": "setCameraMask(short, bool)" },
{ "trigger": "cc.Node.getTag()", "contents": "getTag()" },
{ "trigger": "cc.Node.getonEnterTransitionDidFinishCallback()", "contents": "getonEnterTransitionDidFinishCallback()" },
{ "trigger": "cc.Node.isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" },
{ "trigger": "cc.Node.getNodeToWorldAffineTransform()", "contents": "getNodeToWorldAffineTransform()" },
{ "trigger": "cc.Node.getPosition3D()", "contents": "getPosition3D()" },
{ "trigger": "cc.Node.removeChild(node, bool)", "contents": "removeChild(node, bool)" },
{ "trigger": "cc.Node.getScene()", "contents": "getScene()" },
{ "trigger": "cc.Node.getEventDispatcher()", "contents": "getEventDispatcher()" },
{ "trigger": "cc.Node.setSkewX(float)", "contents": "setSkewX(float)" },
{ "trigger": "cc.Node.setGLProgramState(glprogramstate)", "contents": "setGLProgramState(glprogramstate)" },
{ "trigger": "cc.Node.setOnEnterCallback(func)", "contents": "setOnEnterCallback(func)" },
{ "trigger": "cc.Node.setNormalizedPosition(vec2)", "contents": "setNormalizedPosition(vec2)" },
{ "trigger": "cc.Node.setonExitTransitionDidStartCallback(func)", "contents": "setonExitTransitionDidStartCallback(func)" },
{ "trigger": "cc.Node.convertTouchToNodeSpace(touch)", "contents": "convertTouchToNodeSpace(touch)" },
{ "trigger": "cc.Node.removeAllChildrenWithCleanup(bool)", "contents": "removeAllChildrenWithCleanup(bool)" },
{ "trigger": "cc.Node.getRotationSkewX()", "contents": "getRotationSkewX()" },
{ "trigger": "cc.Node.getRotationSkewY()", "contents": "getRotationSkewY()" },
{ "trigger": "cc.Node.getNodeToWorldTransform()", "contents": "getNodeToWorldTransform()" },
{ "trigger": "cc.Node.isCascadeOpacityEnabled()", "contents": "isCascadeOpacityEnabled()" },
{ "trigger": "cc.Node.setParent(node)", "contents": "setParent(node)" },
{ "trigger": "cc.Node.getName()", "contents": "getName()" },
{ "trigger": "cc.Node.getRotation3D()", "contents": "getRotation3D()" },
{ "trigger": "cc.Node.getNodeToParentAffineTransform()", "contents": "getNodeToParentAffineTransform()" },
{ "trigger": "cc.Node.convertTouchToNodeSpaceAR(touch)", "contents": "convertTouchToNodeSpaceAR(touch)" },
{ "trigger": "cc.Node.getOnEnterCallback()", "contents": "getOnEnterCallback()" },
{ "trigger": "cc.Node.getPhysicsBody()", "contents": "getPhysicsBody()" },
{ "trigger": "cc.Node.stopActionByTag(int)", "contents": "stopActionByTag(int)" },
{ "trigger": "cc.Node.reorderChild(node, int)", "contents": "reorderChild(node, int)" },
{ "trigger": "cc.Node.ignoreAnchorPointForPosition(bool)", "contents": "ignoreAnchorPointForPosition(bool)" },
{ "trigger": "cc.Node.setSkewY(float)", "contents": "setSkewY(float)" },
{ "trigger": "cc.Node.setRotation3D(vec3)", "contents": "setRotation3D(vec3)" },
{ "trigger": "cc.Node.setPositionX(float)", "contents": "setPositionX(float)" },
{ "trigger": "cc.Node.setNodeToParentTransform(mat4)", "contents": "setNodeToParentTransform(mat4)" },
{ "trigger": "cc.Node.getAnchorPoint()", "contents": "getAnchorPoint()" },
{ "trigger": "cc.Node.getNumberOfRunningActions()", "contents": "getNumberOfRunningActions()" },
{ "trigger": "cc.Node.updateTransform()", "contents": "updateTransform()" },
{ "trigger": "cc.Node.isVisible()", "contents": "isVisible()" },
{ "trigger": "cc.Node.getChildrenCount()", "contents": "getChildrenCount()" },
{ "trigger": "cc.Node.getNodeToParentTransform()", "contents": "getNodeToParentTransform()" },
{ "trigger": "cc.Node.convertToNodeSpaceAR(vec2)", "contents": "convertToNodeSpaceAR(vec2)" },
{ "trigger": "cc.Node.addComponent(component)", "contents": "addComponent(component)" },
{ "trigger": "cc.Node.runAction(action)", "contents": "runAction(action)" },
{ "trigger": "cc.Node.visit(renderer, mat4, int)", "contents": "visit(renderer, mat4, int)" },
{ "trigger": "cc.Node.setGLProgram(glprogram)", "contents": "setGLProgram(glprogram)" },
{ "trigger": "cc.Node.getRotation()", "contents": "getRotation()" },
{ "trigger": "cc.Node.getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" },
{ "trigger": "cc.Node.getRotationQuat()", "contents": "getRotationQuat()" },
{ "trigger": "cc.Node.removeChildByName(str, bool)", "contents": "removeChildByName(str, bool)" },
{ "trigger": "cc.Node.setPositionZ(float)", "contents": "setPositionZ(float)" },
{ "trigger": "cc.Node.getGLProgramState()", "contents": "getGLProgramState()" },
{ "trigger": "cc.Node.setScheduler(scheduler)", "contents": "setScheduler(scheduler)" },
{ "trigger": "cc.Node.stopAllActions()", "contents": "stopAllActions()" },
{ "trigger": "cc.Node.getSkewX()", "contents": "getSkewX()" },
{ "trigger": "cc.Node.getSkewY()", "contents": "getSkewY()" },
{ "trigger": "cc.Node.isScheduled(str)", "contents": "isScheduled(str)" },
{ "trigger": "cc.Node.getDisplayedColor()", "contents": "getDisplayedColor()" },
{ "trigger": "cc.Node.getActionByTag(int)", "contents": "getActionByTag(int)" },
{ "trigger": "cc.Node.setRotationSkewX(float)", "contents": "setRotationSkewX(float)" },
{ "trigger": "cc.Node.setRotationSkewY(float)", "contents": "setRotationSkewY(float)" },
{ "trigger": "cc.Node.setName(str)", "contents": "setName(str)" },
{ "trigger": "cc.Node.updatePhysicsBodyTransform(mat4, int, float, float)", "contents": "updatePhysicsBodyTransform(mat4, int, float, float)" },
{ "trigger": "cc.Node.getDisplayedOpacity()", "contents": "getDisplayedOpacity()" },
{ "trigger": "cc.Node.getLocalZOrder()", "contents": "getLocalZOrder()" },
{ "trigger": "cc.Node.getScheduler()", "contents": "getScheduler()" },
{ "trigger": "cc.Node.getOrderOfArrival()", "contents": "getOrderOfArrival()" },
{ "trigger": "cc.Node.setActionManager(actionmanager)", "contents": "setActionManager(actionmanager)" },
{ "trigger": "cc.Node.getPosition(float, float)", "contents": "getPosition(float, float)" },
{ "trigger": "cc.Node.isRunning()", "contents": "isRunning()" },
{ "trigger": "cc.Node.getParent()", "contents": "getParent()" },
{ "trigger": "cc.Node.getWorldToNodeTransform()", "contents": "getWorldToNodeTransform()" },
{ "trigger": "cc.Node.getPositionY()", "contents": "getPositionY()" },
{ "trigger": "cc.Node.getPositionX()", "contents": "getPositionX()" },
{ "trigger": "cc.Node.removeChildByTag(int, bool)", "contents": "removeChildByTag(int, bool)" },
{ "trigger": "cc.Node.setPositionY(float)", "contents": "setPositionY(float)" },
{ "trigger": "cc.Node.updateDisplayedColor(color3b)", "contents": "updateDisplayedColor(color3b)" },
{ "trigger": "cc.Node.setVisible(bool)", "contents": "setVisible(bool)" },
{ "trigger": "cc.Node.getParentToNodeAffineTransform()", "contents": "getParentToNodeAffineTransform()" },
{ "trigger": "cc.Node.getPositionZ()", "contents": "getPositionZ()" },
{ "trigger": "cc.Node.setGlobalZOrder(float)", "contents": "setGlobalZOrder(float)" },
{ "trigger": "cc.Node.setScale(float, float)", "contents": "setScale(float, float)" },
{ "trigger": "cc.Node.getOnExitCallback()", "contents": "getOnExitCallback()" },
{ "trigger": "cc.Node.getChildByTag(int)", "contents": "getChildByTag(int)" },
{ "trigger": "cc.Node.setOrderOfArrival(int)", "contents": "setOrderOfArrival(int)" },
{ "trigger": "cc.Node.getScaleZ()", "contents": "getScaleZ()" },
{ "trigger": "cc.Node.getScaleY()", "contents": "getScaleY()" },
{ "trigger": "cc.Node.getScaleX()", "contents": "getScaleX()" },
{ "trigger": "cc.Node.setLocalZOrder(int)", "contents": "setLocalZOrder(int)" },
{ "trigger": "cc.Node.setCascadeColorEnabled(bool)", "contents": "setCascadeColorEnabled(bool)" },
{ "trigger": "cc.Node.setOpacity(char)", "contents": "setOpacity(char)" },
{ "trigger": "cc.Node.cleanup()", "contents": "cleanup()" },
{ "trigger": "cc.Node.getComponent(str)", "contents": "getComponent(str)" },
{ "trigger": "cc.Node.getContentSize()", "contents": "getContentSize()" },
{ "trigger": "cc.Node.stopAllActionsByTag(int)", "contents": "stopAllActionsByTag(int)" },
{ "trigger": "cc.Node.getBoundingBox()", "contents": "getBoundingBox()" },
{ "trigger": "cc.Node.setEventDispatcher(eventdispatcher)", "contents": "setEventDispatcher(eventdispatcher)" },
{ "trigger": "cc.Node.getGlobalZOrder()", "contents": "getGlobalZOrder()" },
{ "trigger": "cc.Node.draw(renderer, mat4, int)", "contents": "draw(renderer, mat4, int)" },
{ "trigger": "cc.Node.setUserObject(ref)", "contents": "setUserObject(ref)" },
{ "trigger": "cc.Node.enumerateChildren(str, func)", "contents": "enumerateChildren(str, func)" },
{ "trigger": "cc.Node.getonExitTransitionDidStartCallback()", "contents": "getonExitTransitionDidStartCallback()" },
{ "trigger": "cc.Node.removeFromParentAndCleanup(bool)", "contents": "removeFromParentAndCleanup(bool)" },
{ "trigger": "cc.Node.setPosition3D(vec3)", "contents": "setPosition3D(vec3)" },
{ "trigger": "cc.Node.update(float)", "contents": "update(float)" },
{ "trigger": "cc.Node.sortAllChildren()", "contents": "sortAllChildren()" },
{ "trigger": "cc.Node.getWorldToNodeAffineTransform()", "contents": "getWorldToNodeAffineTransform()" },
{ "trigger": "cc.Node.getScale()", "contents": "getScale()" },
{ "trigger": "cc.Node.getNormalizedPosition()", "contents": "getNormalizedPosition()" },
{ "trigger": "cc.Node.getParentToNodeTransform()", "contents": "getParentToNodeTransform()" },
{ "trigger": "cc.Node.convertToNodeSpace(vec2)", "contents": "convertToNodeSpace(vec2)" },
{ "trigger": "cc.Node.setTag(int)", "contents": "setTag(int)" },
{ "trigger": "cc.Node.isCascadeColorEnabled()", "contents": "isCascadeColorEnabled()" },
{ "trigger": "cc.Node.setRotationQuat(quaternion)", "contents": "setRotationQuat(quaternion)" },
{ "trigger": "cc.Node.stopAction(action)", "contents": "stopAction(action)" },
{ "trigger": "cc.Node.getActionManager()", "contents": "getActionManager()" },
{ "trigger": "cc.Node.create()", "contents": "create()" },
{ "trigger": "cc.Node.Node()", "contents": "Node()" },
{ "trigger": "cc.__NodeRGBA.__NodeRGBA()", "contents": "__NodeRGBA()" },
{ "trigger": "cc.SpriteFrame.clone()", "contents": "clone()" },
{ "trigger": "cc.SpriteFrame.setRotated(bool)", "contents": "setRotated(bool)" },
{ "trigger": "cc.SpriteFrame.setTexture(texture2d)", "contents": "setTexture(texture2d)" },
{ "trigger": "cc.SpriteFrame.getOffset()", "contents": "getOffset()" },
{ "trigger": "cc.SpriteFrame.setRectInPixels(rect)", "contents": "setRectInPixels(rect)" },
{ "trigger": "cc.SpriteFrame.getTexture()", "contents": "getTexture()" },
{ "trigger": "cc.SpriteFrame.getRect()", "contents": "getRect()" },
{ "trigger": "cc.SpriteFrame.setOffsetInPixels(vec2)", "contents": "setOffsetInPixels(vec2)" },
{ "trigger": "cc.SpriteFrame.getRectInPixels()", "contents": "getRectInPixels()" },
{ "trigger": "cc.SpriteFrame.setOriginalSize(size)", "contents": "setOriginalSize(size)" },
{ "trigger": "cc.SpriteFrame.getOriginalSizeInPixels()", "contents": "getOriginalSizeInPixels()" },
{ "trigger": "cc.SpriteFrame.setOriginalSizeInPixels(size)", "contents": "setOriginalSizeInPixels(size)" },
{ "trigger": "cc.SpriteFrame.setOffset(vec2)", "contents": "setOffset(vec2)" },
{ "trigger": "cc.SpriteFrame.initWithTexture(texture2d, rect, bool, vec2, size)", "contents": "initWithTexture(texture2d, rect, bool, vec2, size)" },
{ "trigger": "cc.SpriteFrame.isRotated()", "contents": "isRotated()" },
{ "trigger": "cc.SpriteFrame.initWithTextureFilename(str, rect, bool, vec2, size)", "contents": "initWithTextureFilename(str, rect, bool, vec2, size)" },
{ "trigger": "cc.SpriteFrame.setRect(rect)", "contents": "setRect(rect)" },
{ "trigger": "cc.SpriteFrame.getOffsetInPixels()", "contents": "getOffsetInPixels()" },
{ "trigger": "cc.SpriteFrame.getOriginalSize()", "contents": "getOriginalSize()" },
{ "trigger": "cc.SpriteFrame.create(str, rect, bool, vec2, size)", "contents": "create(str, rect, bool, vec2, size)" },
{ "trigger": "cc.SpriteFrame.createWithTexture(texture2d, rect, bool, vec2, size)", "contents": "createWithTexture(texture2d, rect, bool, vec2, size)" },
{ "trigger": "cc.SpriteFrame.SpriteFrame()", "contents": "SpriteFrame()" },
{ "trigger": "cc.AnimationFrame.setSpriteFrame(spriteframe)", "contents": "setSpriteFrame(spriteframe)" },
{ "trigger": "cc.AnimationFrame.getUserInfo()", "contents": "getUserInfo()" },
{ "trigger": "cc.AnimationFrame.setDelayUnits(float)", "contents": "setDelayUnits(float)" },
{ "trigger": "cc.AnimationFrame.clone()", "contents": "clone()" },
{ "trigger": "cc.AnimationFrame.getSpriteFrame()", "contents": "getSpriteFrame()" },
{ "trigger": "cc.AnimationFrame.getDelayUnits()", "contents": "getDelayUnits()" },
{ "trigger": "cc.AnimationFrame.setUserInfo(map)", "contents": "setUserInfo(map)" },
{ "trigger": "cc.AnimationFrame.initWithSpriteFrame(spriteframe, float, map)", "contents": "initWithSpriteFrame(spriteframe, float, map)" },
{ "trigger": "cc.AnimationFrame.create(spriteframe, float, map)", "contents": "create(spriteframe, float, map)" },
{ "trigger": "cc.AnimationFrame.AnimationFrame()", "contents": "AnimationFrame()" },
{ "trigger": "cc.Animation.getLoops()", "contents": "getLoops()" },
{ "trigger": "cc.Animation.addSpriteFrame(spriteframe)", "contents": "addSpriteFrame(spriteframe)" },
{ "trigger": "cc.Animation.setRestoreOriginalFrame(bool)", "contents": "setRestoreOriginalFrame(bool)" },
{ "trigger": "cc.Animation.clone()", "contents": "clone()" },
{ "trigger": "cc.Animation.getDuration()", "contents": "getDuration()" },
{ "trigger": "cc.Animation.initWithAnimationFrames(array, float, int)", "contents": "initWithAnimationFrames(array, float, int)" },
{ "trigger": "cc.Animation.init()", "contents": "init()" },
{ "trigger": "cc.Animation.setFrames(array)", "contents": "setFrames(array)" },
{ "trigger": "cc.Animation.getFrames()", "contents": "getFrames()" },
{ "trigger": "cc.Animation.setLoops(int)", "contents": "setLoops(int)" },
{ "trigger": "cc.Animation.setDelayPerUnit(float)", "contents": "setDelayPerUnit(float)" },
{ "trigger": "cc.Animation.addSpriteFrameWithFile(str)", "contents": "addSpriteFrameWithFile(str)" },
{ "trigger": "cc.Animation.getTotalDelayUnits()", "contents": "getTotalDelayUnits()" },
{ "trigger": "cc.Animation.getDelayPerUnit()", "contents": "getDelayPerUnit()" },
{ "trigger": "cc.Animation.initWithSpriteFrames(array, float, int)", "contents": "initWithSpriteFrames(array, float, int)" },
{ "trigger": "cc.Animation.getRestoreOriginalFrame()", "contents": "getRestoreOriginalFrame()" },
{ "trigger": "cc.Animation.addSpriteFrameWithTexture(texture2d, rect)", "contents": "addSpriteFrameWithTexture(texture2d, rect)" },
{ "trigger": "cc.Animation.create(array, float, int)", "contents": "create(array, float, int)" },
{ "trigger": "cc.Animation.createWithSpriteFrames(array, float, int)", "contents": "createWithSpriteFrames(array, float, int)" },
{ "trigger": "cc.Animation.Animation()", "contents": "Animation()" },
{ "trigger": "cc.ActionInterval.getAmplitudeRate()", "contents": "getAmplitudeRate()" },
{ "trigger": "cc.ActionInterval.initWithDuration(float)", "contents": "initWithDuration(float)" },
{ "trigger": "cc.ActionInterval.setAmplitudeRate(float)", "contents": "setAmplitudeRate(float)" },
{ "trigger": "cc.ActionInterval.getElapsed()", "contents": "getElapsed()" },
{ "trigger": "cc.Sequence.initWithTwoActions(finitetimeaction, finitetimeaction)", "contents": "initWithTwoActions(finitetimeaction, finitetimeaction)" },
{ "trigger": "cc.Sequence.Sequence()", "contents": "Sequence()" },
{ "trigger": "cc.Repeat.setInnerAction(finitetimeaction)", "contents": "setInnerAction(finitetimeaction)" },
{ "trigger": "cc.Repeat.initWithAction(finitetimeaction, int)", "contents": "initWithAction(finitetimeaction, int)" },
{ "trigger": "cc.Repeat.getInnerAction()", "contents": "getInnerAction()" },
{ "trigger": "cc.Repeat.create(finitetimeaction, int)", "contents": "create(finitetimeaction, int)" },
{ "trigger": "cc.Repeat.Repeat()", "contents": "Repeat()" },
{ "trigger": "cc.RepeatForever.setInnerAction(actioninterval)", "contents": "setInnerAction(actioninterval)" },
{ "trigger": "cc.RepeatForever.initWithAction(actioninterval)", "contents": "initWithAction(actioninterval)" },
{ "trigger": "cc.RepeatForever.getInnerAction()", "contents": "getInnerAction()" },
{ "trigger": "cc.RepeatForever.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.RepeatForever.RepeatForever()", "contents": "RepeatForever()" },
{ "trigger": "cc.Spawn.initWithTwoActions(finitetimeaction, finitetimeaction)", "contents": "initWithTwoActions(finitetimeaction, finitetimeaction)" },
{ "trigger": "cc.Spawn.Spawn()", "contents": "Spawn()" },
{ "trigger": "cc.RotateTo.initWithDuration(float, float, float)", "contents": "initWithDuration(float, float, float)" },
{ "trigger": "cc.RotateTo.create(float, float, float)", "contents": "create(float, float, float)" },
{ "trigger": "cc.RotateTo.RotateTo()", "contents": "RotateTo()" },
{ "trigger": "cc.RotateBy.initWithDuration(float, float, float)", "contents": "initWithDuration(float, float, float)" },
{ "trigger": "cc.RotateBy.create(float, float, float)", "contents": "create(float, float, float)" },
{ "trigger": "cc.RotateBy.RotateBy()", "contents": "RotateBy()" },
{ "trigger": "cc.MoveBy.initWithDuration(float, vec2)", "contents": "initWithDuration(float, vec2)" },
{ "trigger": "cc.MoveBy.create(float, vec2)", "contents": "create(float, vec2)" },
{ "trigger": "cc.MoveBy.MoveBy()", "contents": "MoveBy()" },
{ "trigger": "cc.MoveTo.initWithDuration(float, vec2)", "contents": "initWithDuration(float, vec2)" },
{ "trigger": "cc.MoveTo.create(float, vec2)", "contents": "create(float, vec2)" },
{ "trigger": "cc.MoveTo.MoveTo()", "contents": "MoveTo()" },
{ "trigger": "cc.SkewTo.initWithDuration(float, float, float)", "contents": "initWithDuration(float, float, float)" },
{ "trigger": "cc.SkewTo.create(float, float, float)", "contents": "create(float, float, float)" },
{ "trigger": "cc.SkewTo.SkewTo()", "contents": "SkewTo()" },
{ "trigger": "cc.SkewBy.initWithDuration(float, float, float)", "contents": "initWithDuration(float, float, float)" },
{ "trigger": "cc.SkewBy.create(float, float, float)", "contents": "create(float, float, float)" },
{ "trigger": "cc.SkewBy.SkewBy()", "contents": "SkewBy()" },
{ "trigger": "cc.JumpBy.initWithDuration(float, vec2, float, int)", "contents": "initWithDuration(float, vec2, float, int)" },
{ "trigger": "cc.JumpBy.create(float, vec2, float, int)", "contents": "create(float, vec2, float, int)" },
{ "trigger": "cc.JumpBy.JumpBy()", "contents": "JumpBy()" },
{ "trigger": "cc.JumpTo.initWithDuration(float, vec2, float, int)", "contents": "initWithDuration(float, vec2, float, int)" },
{ "trigger": "cc.JumpTo.create(float, vec2, float, int)", "contents": "create(float, vec2, float, int)" },
{ "trigger": "cc.JumpTo.JumpTo()", "contents": "JumpTo()" },
{ "trigger": "cc.BezierBy.BezierBy()", "contents": "BezierBy()" },
{ "trigger": "cc.BezierTo.BezierTo()", "contents": "BezierTo()" },
{ "trigger": "cc.ScaleTo.initWithDuration(float, float, float, float)", "contents": "initWithDuration(float, float, float, float)" },
{ "trigger": "cc.ScaleTo.create(float, float, float, float)", "contents": "create(float, float, float, float)" },
{ "trigger": "cc.ScaleTo.ScaleTo()", "contents": "ScaleTo()" },
{ "trigger": "cc.ScaleBy.create(float, float, float, float)", "contents": "create(float, float, float, float)" },
{ "trigger": "cc.ScaleBy.ScaleBy()", "contents": "ScaleBy()" },
{ "trigger": "cc.Blink.initWithDuration(float, int)", "contents": "initWithDuration(float, int)" },
{ "trigger": "cc.Blink.create(float, int)", "contents": "create(float, int)" },
{ "trigger": "cc.Blink.Blink()", "contents": "Blink()" },
{ "trigger": "cc.FadeTo.initWithDuration(float, char)", "contents": "initWithDuration(float, char)" },
{ "trigger": "cc.FadeTo.create(float, char)", "contents": "create(float, char)" },
{ "trigger": "cc.FadeTo.FadeTo()", "contents": "FadeTo()" },
{ "trigger": "cc.FadeIn.setReverseAction(fadeto)", "contents": "setReverseAction(fadeto)" },
{ "trigger": "cc.FadeIn.create(float)", "contents": "create(float)" },
{ "trigger": "cc.FadeIn.FadeIn()", "contents": "FadeIn()" },
{ "trigger": "cc.FadeOut.setReverseAction(fadeto)", "contents": "setReverseAction(fadeto)" },
{ "trigger": "cc.FadeOut.create(float)", "contents": "create(float)" },
{ "trigger": "cc.FadeOut.FadeOut()", "contents": "FadeOut()" },
{ "trigger": "cc.TintTo.initWithDuration(float, char, char, char)", "contents": "initWithDuration(float, char, char, char)" },
{ "trigger": "cc.TintTo.create(float, char, char, char)", "contents": "create(float, char, char, char)" },
{ "trigger": "cc.TintTo.TintTo()", "contents": "TintTo()" },
{ "trigger": "cc.TintBy.initWithDuration(float, short, short, short)", "contents": "initWithDuration(float, short, short, short)" },
{ "trigger": "cc.TintBy.create(float, short, short, short)", "contents": "create(float, short, short, short)" },
{ "trigger": "cc.TintBy.TintBy()", "contents": "TintBy()" },
{ "trigger": "cc.DelayTime.create(float)", "contents": "create(float)" },
{ "trigger": "cc.DelayTime.DelayTime()", "contents": "DelayTime()" },
{ "trigger": "cc.ReverseTime.initWithAction(finitetimeaction)", "contents": "initWithAction(finitetimeaction)" },
{ "trigger": "cc.ReverseTime.create(finitetimeaction)", "contents": "create(finitetimeaction)" },
{ "trigger": "cc.ReverseTime.ReverseTime()", "contents": "ReverseTime()" },
{ "trigger": "cc.Animate.getAnimation()", "contents": "getAnimation()" },
{ "trigger": "cc.Animate.initWithAnimation(animation)", "contents": "initWithAnimation(animation)" },
{ "trigger": "cc.Animate.setAnimation(animation)", "contents": "setAnimation(animation)" },
{ "trigger": "cc.Animate.create(animation)", "contents": "create(animation)" },
{ "trigger": "cc.Animate.Animate()", "contents": "Animate()" },
{ "trigger": "cc.TargetedAction.getForcedTarget()", "contents": "getForcedTarget()" },
{ "trigger": "cc.TargetedAction.initWithTarget(node, finitetimeaction)", "contents": "initWithTarget(node, finitetimeaction)" },
{ "trigger": "cc.TargetedAction.setForcedTarget(node)", "contents": "setForcedTarget(node)" },
{ "trigger": "cc.TargetedAction.create(node, finitetimeaction)", "contents": "create(node, finitetimeaction)" },
{ "trigger": "cc.TargetedAction.TargetedAction()", "contents": "TargetedAction()" },
{ "trigger": "cc.Configuration.supportsPVRTC()", "contents": "supportsPVRTC()" },
{ "trigger": "cc.Configuration.getMaxModelviewStackDepth()", "contents": "getMaxModelviewStackDepth()" },
{ "trigger": "cc.Configuration.supportsShareableVAO()", "contents": "supportsShareableVAO()" },
{ "trigger": "cc.Configuration.supportsBGRA8888()", "contents": "supportsBGRA8888()" },
{ "trigger": "cc.Configuration.checkForGLExtension(str)", "contents": "checkForGLExtension(str)" },
{ "trigger": "cc.Configuration.supportsATITC()", "contents": "supportsATITC()" },
{ "trigger": "cc.Configuration.supportsNPOT()", "contents": "supportsNPOT()" },
{ "trigger": "cc.Configuration.init()", "contents": "init()" },
{ "trigger": "cc.Configuration.getAnimate3DQuality()", "contents": "getAnimate3DQuality()" },
{ "trigger": "cc.Configuration.getMaxSupportPointLightInShader()", "contents": "getMaxSupportPointLightInShader()" },
{ "trigger": "cc.Configuration.getMaxTextureSize()", "contents": "getMaxTextureSize()" },
{ "trigger": "cc.Configuration.setValue(str, value)", "contents": "setValue(str, value)" },
{ "trigger": "cc.Configuration.getMaxSupportSpotLightInShader()", "contents": "getMaxSupportSpotLightInShader()" },
{ "trigger": "cc.Configuration.supportsETC()", "contents": "supportsETC()" },
{ "trigger": "cc.Configuration.getMaxSupportDirLightInShader()", "contents": "getMaxSupportDirLightInShader()" },
{ "trigger": "cc.Configuration.loadConfigFile(str)", "contents": "loadConfigFile(str)" },
{ "trigger": "cc.Configuration.supportsDiscardFramebuffer()", "contents": "supportsDiscardFramebuffer()" },
{ "trigger": "cc.Configuration.supportsS3TC()", "contents": "supportsS3TC()" },
{ "trigger": "cc.Configuration.getInfo()", "contents": "getInfo()" },
{ "trigger": "cc.Configuration.getMaxTextureUnits()", "contents": "getMaxTextureUnits()" },
{ "trigger": "cc.Configuration.getValue(str, value)", "contents": "getValue(str, value)" },
{ "trigger": "cc.Configuration.gatherGPUInfo()", "contents": "gatherGPUInfo()" },
{ "trigger": "cc.Configuration.destroyInstance()", "contents": "destroyInstance()" },
{ "trigger": "cc.Configuration.getInstance()", "contents": "getInstance()" },
{ "trigger": "cc.Scene.setCameraOrderDirty()", "contents": "setCameraOrderDirty()" },
{ "trigger": "cc.Scene.render(renderer)", "contents": "render(renderer)" },
{ "trigger": "cc.Scene.onProjectionChanged(eventcustom)", "contents": "onProjectionChanged(eventcustom)" },
{ "trigger": "cc.Scene.initWithSize(size)", "contents": "initWithSize(size)" },
{ "trigger": "cc.Scene.getDefaultCamera()", "contents": "getDefaultCamera()" },
{ "trigger": "cc.Scene.createWithSize(size)", "contents": "createWithSize(size)" },
{ "trigger": "cc.Scene.create()", "contents": "create()" },
{ "trigger": "cc.Scene.Scene()", "contents": "Scene()" },
{ "trigger": "cc.GLView.setFrameSize(float, float)", "contents": "setFrameSize(float, float)" },
{ "trigger": "cc.GLView.getViewPortRect()", "contents": "getViewPortRect()" },
{ "trigger": "cc.GLView.setContentScaleFactor(float)", "contents": "setContentScaleFactor(float)" },
{ "trigger": "cc.GLView.getContentScaleFactor()", "contents": "getContentScaleFactor()" },
{ "trigger": "cc.GLView.setIMEKeyboardState(bool)", "contents": "setIMEKeyboardState(bool)" },
{ "trigger": "cc.GLView.setScissorInPoints(float, float, float, float)", "contents": "setScissorInPoints(float, float, float, float)" },
{ "trigger": "cc.GLView.getViewName()", "contents": "getViewName()" },
{ "trigger": "cc.GLView.isOpenGLReady()", "contents": "isOpenGLReady()" },
{ "trigger": "cc.GLView.setCursorVisible(bool)", "contents": "setCursorVisible(bool)" },
{ "trigger": "cc.GLView.getScaleY()", "contents": "getScaleY()" },
{ "trigger": "cc.GLView.getScaleX()", "contents": "getScaleX()" },
{ "trigger": "cc.GLView.getVisibleOrigin()", "contents": "getVisibleOrigin()" },
{ "trigger": "cc.GLView.getFrameSize()", "contents": "getFrameSize()" },
{ "trigger": "cc.GLView.setFrameZoomFactor(float)", "contents": "setFrameZoomFactor(float)" },
{ "trigger": "cc.GLView.getFrameZoomFactor()", "contents": "getFrameZoomFactor()" },
{ "trigger": "cc.GLView.getDesignResolutionSize()", "contents": "getDesignResolutionSize()" },
{ "trigger": "cc.GLView.windowShouldClose()", "contents": "windowShouldClose()" },
{ "trigger": "cc.GLView.setDesignResolutionSize(float, float, resolutionpolicy)", "contents": "setDesignResolutionSize(float, float, resolutionpolicy)" },
{ "trigger": "cc.GLView.getResolutionPolicy()", "contents": "getResolutionPolicy()" },
{ "trigger": "cc.GLView.isRetinaDisplay()", "contents": "isRetinaDisplay()" },
{ "trigger": "cc.GLView.setViewPortInPoints(float, float, float, float)", "contents": "setViewPortInPoints(float, float, float, float)" },
{ "trigger": "cc.GLView.getScissorRect()", "contents": "getScissorRect()" },
{ "trigger": "cc.GLView.getRetinaFactor()", "contents": "getRetinaFactor()" },
{ "trigger": "cc.GLView.setViewName(str)", "contents": "setViewName(str)" },
{ "trigger": "cc.GLView.getVisibleRect()", "contents": "getVisibleRect()" },
{ "trigger": "cc.GLView.getVisibleSize()", "contents": "getVisibleSize()" },
{ "trigger": "cc.GLView.isScissorEnabled()", "contents": "isScissorEnabled()" },
{ "trigger": "cc.GLView.pollEvents()", "contents": "pollEvents()" },
{ "trigger": "cc.GLView.setGLContextAttrs(glcontextattrs)", "contents": "setGLContextAttrs(glcontextattrs)" },
{ "trigger": "cc.GLView.getGLContextAttrs()", "contents": "getGLContextAttrs()" },
{ "trigger": "cc.Director.pause()", "contents": "pause()" },
{ "trigger": "cc.Director.setEventDispatcher(eventdispatcher)", "contents": "setEventDispatcher(eventdispatcher)" },
{ "trigger": "cc.Director.setContentScaleFactor(float)", "contents": "setContentScaleFactor(float)" },
{ "trigger": "cc.Director.getContentScaleFactor()", "contents": "getContentScaleFactor()" },
{ "trigger": "cc.Director.getWinSizeInPixels()", "contents": "getWinSizeInPixels()" },
{ "trigger": "cc.Director.getDeltaTime()", "contents": "getDeltaTime()" },
{ "trigger": "cc.Director.setGLDefaultValues()", "contents": "setGLDefaultValues()" },
{ "trigger": "cc.Director.setActionManager(actionmanager)", "contents": "setActionManager(actionmanager)" },
{ "trigger": "cc.Director.setAlphaBlending(bool)", "contents": "setAlphaBlending(bool)" },
{ "trigger": "cc.Director.popToRootScene()", "contents": "popToRootScene()" },
{ "trigger": "cc.Director.loadMatrix(matrix_stack_type, mat4)", "contents": "loadMatrix(matrix_stack_type, mat4)" },
{ "trigger": "cc.Director.getNotificationNode()", "contents": "getNotificationNode()" },
{ "trigger": "cc.Director.getWinSize()", "contents": "getWinSize()" },
{ "trigger": "cc.Director.end()", "contents": "end()" },
{ "trigger": "cc.Director.getTextureCache()", "contents": "getTextureCache()" },
{ "trigger": "cc.Director.isSendCleanupToScene()", "contents": "isSendCleanupToScene()" },
{ "trigger": "cc.Director.getVisibleOrigin()", "contents": "getVisibleOrigin()" },
{ "trigger": "cc.Director.mainLoop()", "contents": "mainLoop()" },
{ "trigger": "cc.Director.setDepthTest(bool)", "contents": "setDepthTest(bool)" },
{ "trigger": "cc.Director.getFrameRate()", "contents": "getFrameRate()" },
{ "trigger": "cc.Director.getSecondsPerFrame()", "contents": "getSecondsPerFrame()" },
{ "trigger": "cc.Director.resetMatrixStack()", "contents": "resetMatrixStack()" },
{ "trigger": "cc.Director.convertToUI(vec2)", "contents": "convertToUI(vec2)" },
{ "trigger": "cc.Director.pushMatrix(matrix_stack_type)", "contents": "pushMatrix(matrix_stack_type)" },
{ "trigger": "cc.Director.setDefaultValues()", "contents": "setDefaultValues()" },
{ "trigger": "cc.Director.init()", "contents": "init()" },
{ "trigger": "cc.Director.setScheduler(scheduler)", "contents": "setScheduler(scheduler)" },
{ "trigger": "cc.Director.getMatrix(matrix_stack_type)", "contents": "getMatrix(matrix_stack_type)" },
{ "trigger": "cc.Director.startAnimation()", "contents": "startAnimation()" },
{ "trigger": "cc.Director.getOpenGLView()", "contents": "getOpenGLView()" },
{ "trigger": "cc.Director.getRunningScene()", "contents": "getRunningScene()" },
{ "trigger": "cc.Director.setViewport()", "contents": "setViewport()" },
{ "trigger": "cc.Director.stopAnimation()", "contents": "stopAnimation()" },
{ "trigger": "cc.Director.popToSceneStackLevel(int)", "contents": "popToSceneStackLevel(int)" },
{ "trigger": "cc.Director.resume()", "contents": "resume()" },
{ "trigger": "cc.Director.isNextDeltaTimeZero()", "contents": "isNextDeltaTimeZero()" },
{ "trigger": "cc.Director.setClearColor(color4f)", "contents": "setClearColor(color4f)" },
{ "trigger": "cc.Director.setOpenGLView(glview)", "contents": "setOpenGLView(glview)" },
{ "trigger": "cc.Director.convertToGL(vec2)", "contents": "convertToGL(vec2)" },
{ "trigger": "cc.Director.purgeCachedData()", "contents": "purgeCachedData()" },
{ "trigger": "cc.Director.getTotalFrames()", "contents": "getTotalFrames()" },
{ "trigger": "cc.Director.runWithScene(scene)", "contents": "runWithScene(scene)" },
{ "trigger": "cc.Director.setNotificationNode(node)", "contents": "setNotificationNode(node)" },
{ "trigger": "cc.Director.drawScene()", "contents": "drawScene()" },
{ "trigger": "cc.Director.restart()", "contents": "restart()" },
{ "trigger": "cc.Director.popScene()", "contents": "popScene()" },
{ "trigger": "cc.Director.loadIdentityMatrix(matrix_stack_type)", "contents": "loadIdentityMatrix(matrix_stack_type)" },
{ "trigger": "cc.Director.isDisplayStats()", "contents": "isDisplayStats()" },
{ "trigger": "cc.Director.setProjection(projection)", "contents": "setProjection(projection)" },
{ "trigger": "cc.Director.multiplyMatrix(matrix_stack_type, mat4)", "contents": "multiplyMatrix(matrix_stack_type, mat4)" },
{ "trigger": "cc.Director.getZEye()", "contents": "getZEye()" },
{ "trigger": "cc.Director.setNextDeltaTimeZero(bool)", "contents": "setNextDeltaTimeZero(bool)" },
{ "trigger": "cc.Director.popMatrix(matrix_stack_type)", "contents": "popMatrix(matrix_stack_type)" },
{ "trigger": "cc.Director.getVisibleSize()", "contents": "getVisibleSize()" },
{ "trigger": "cc.Director.getScheduler()", "contents": "getScheduler()" },
{ "trigger": "cc.Director.pushScene(scene)", "contents": "pushScene(scene)" },
{ "trigger": "cc.Director.getAnimationInterval()", "contents": "getAnimationInterval()" },
{ "trigger": "cc.Director.isPaused()", "contents": "isPaused()" },
{ "trigger": "cc.Director.setDisplayStats(bool)", "contents": "setDisplayStats(bool)" },
{ "trigger": "cc.Director.getEventDispatcher()", "contents": "getEventDispatcher()" },
{ "trigger": "cc.Director.replaceScene(scene)", "contents": "replaceScene(scene)" },
{ "trigger": "cc.Director.setAnimationInterval(double)", "contents": "setAnimationInterval(double)" },
{ "trigger": "cc.Director.getActionManager()", "contents": "getActionManager()" },
{ "trigger": "cc.Director.getInstance()", "contents": "getInstance()" },
{ "trigger": "cc.Scheduler.setTimeScale(float)", "contents": "setTimeScale(float)" },
{ "trigger": "cc.Scheduler.unscheduleAllWithMinPriority(int)", "contents": "unscheduleAllWithMinPriority(int)" },
{ "trigger": "cc.Scheduler.update(float)", "contents": "update(float)" },
{ "trigger": "cc.Scheduler.unscheduleScriptEntry(int)", "contents": "unscheduleScriptEntry(int)" },
{ "trigger": "cc.Scheduler.performFunctionInCocosThread(func)", "contents": "performFunctionInCocosThread(func)" },
{ "trigger": "cc.Scheduler.unscheduleAll()", "contents": "unscheduleAll()" },
{ "trigger": "cc.Scheduler.getTimeScale()", "contents": "getTimeScale()" },
{ "trigger": "cc.Scheduler.Scheduler()", "contents": "Scheduler()" },
{ "trigger": "cc.FileUtils.fullPathForFilename(str)", "contents": "fullPathForFilename(str)" },
{ "trigger": "cc.FileUtils.getStringFromFile(str)", "contents": "getStringFromFile(str)" },
{ "trigger": "cc.FileUtils.removeFile(str)", "contents": "removeFile(str)" },
{ "trigger": "cc.FileUtils.isAbsolutePath(str)", "contents": "isAbsolutePath(str)" },
{ "trigger": "cc.FileUtils.renameFile(str, str, str)", "contents": "renameFile(str, str, str)" },
{ "trigger": "cc.FileUtils.loadFilenameLookupDictionaryFromFile(str)", "contents": "loadFilenameLookupDictionaryFromFile(str)" },
{ "trigger": "cc.FileUtils.isPopupNotify()", "contents": "isPopupNotify()" },
{ "trigger": "cc.FileUtils.getValueVectorFromFile(str)", "contents": "getValueVectorFromFile(str)" },
{ "trigger": "cc.FileUtils.getSearchPaths()", "contents": "getSearchPaths()" },
{ "trigger": "cc.FileUtils.writeToFile(map, str)", "contents": "writeToFile(map, str)" },
{ "trigger": "cc.FileUtils.getValueMapFromFile(str)", "contents": "getValueMapFromFile(str)" },
{ "trigger": "cc.FileUtils.getValueMapFromData(char, int)", "contents": "getValueMapFromData(char, int)" },
{ "trigger": "cc.FileUtils.removeDirectory(str)", "contents": "removeDirectory(str)" },
{ "trigger": "cc.FileUtils.setSearchPaths(array)", "contents": "setSearchPaths(array)" },
{ "trigger": "cc.FileUtils.getFileSize(str)", "contents": "getFileSize(str)" },
{ "trigger": "cc.FileUtils.setSearchResolutionsOrder(array)", "contents": "setSearchResolutionsOrder(array)" },
{ "trigger": "cc.FileUtils.addSearchResolutionsOrder(str, bool)", "contents": "addSearchResolutionsOrder(str, bool)" },
{ "trigger": "cc.FileUtils.addSearchPath(str, bool)", "contents": "addSearchPath(str, bool)" },
{ "trigger": "cc.FileUtils.isFileExist(str)", "contents": "isFileExist(str)" },
{ "trigger": "cc.FileUtils.purgeCachedEntries()", "contents": "purgeCachedEntries()" },
{ "trigger": "cc.FileUtils.fullPathFromRelativeFile(str, str)", "contents": "fullPathFromRelativeFile(str, str)" },
{ "trigger": "cc.FileUtils.setWritablePath(str)", "contents": "setWritablePath(str)" },
{ "trigger": "cc.FileUtils.setPopupNotify(bool)", "contents": "setPopupNotify(bool)" },
{ "trigger": "cc.FileUtils.isDirectoryExist(str)", "contents": "isDirectoryExist(str)" },
{ "trigger": "cc.FileUtils.setDefaultResourceRootPath(str)", "contents": "setDefaultResourceRootPath(str)" },
{ "trigger": "cc.FileUtils.getSearchResolutionsOrder()", "contents": "getSearchResolutionsOrder()" },
{ "trigger": "cc.FileUtils.createDirectory(str)", "contents": "createDirectory(str)" },
{ "trigger": "cc.FileUtils.getWritablePath()", "contents": "getWritablePath()" },
{ "trigger": "cc.FileUtils.setDelegate(fileutils)", "contents": "setDelegate(fileutils)" },
{ "trigger": "cc.FileUtils.getInstance()", "contents": "getInstance()" },
{ "trigger": "cc.EventListener.setEnabled(bool)", "contents": "setEnabled(bool)" },
{ "trigger": "cc.EventListener.isEnabled()", "contents": "isEnabled()" },
{ "trigger": "cc.EventListener.clone()", "contents": "clone()" },
{ "trigger": "cc.EventListener.checkAvailable()", "contents": "checkAvailable()" },
{ "trigger": "cc.EventDispatcher.setEnabled(bool)", "contents": "setEnabled(bool)" },
{ "trigger": "cc.EventDispatcher.removeAllEventListeners()", "contents": "removeAllEventListeners()" },
{ "trigger": "cc.EventDispatcher.addEventListenerWithSceneGraphPriority(eventlistener, node)", "contents": "addEventListenerWithSceneGraphPriority(eventlistener, node)" },
{ "trigger": "cc.EventDispatcher.addCustomEventListener(str, func)", "contents": "addCustomEventListener(str, func)" },
{ "trigger": "cc.EventDispatcher.addEventListenerWithFixedPriority(eventlistener, int)", "contents": "addEventListenerWithFixedPriority(eventlistener, int)" },
{ "trigger": "cc.EventDispatcher.removeEventListenersForTarget(node, bool)", "contents": "removeEventListenersForTarget(node, bool)" },
{ "trigger": "cc.EventDispatcher.resumeEventListenersForTarget(node, bool)", "contents": "resumeEventListenersForTarget(node, bool)" },
{ "trigger": "cc.EventDispatcher.setPriority(eventlistener, int)", "contents": "setPriority(eventlistener, int)" },
{ "trigger": "cc.EventDispatcher.dispatchEvent(event)", "contents": "dispatchEvent(event)" },
{ "trigger": "cc.EventDispatcher.pauseEventListenersForTarget(node, bool)", "contents": "pauseEventListenersForTarget(node, bool)" },
{ "trigger": "cc.EventDispatcher.removeCustomEventListeners(str)", "contents": "removeCustomEventListeners(str)" },
{ "trigger": "cc.EventDispatcher.removeEventListener(eventlistener)", "contents": "removeEventListener(eventlistener)" },
{ "trigger": "cc.EventDispatcher.isEnabled()", "contents": "isEnabled()" },
{ "trigger": "cc.EventDispatcher.EventDispatcher()", "contents": "EventDispatcher()" },
{ "trigger": "cc.EventListenerTouchOneByOne.isSwallowTouches()", "contents": "isSwallowTouches()" },
{ "trigger": "cc.EventListenerTouchOneByOne.setSwallowTouches(bool)", "contents": "setSwallowTouches(bool)" },
{ "trigger": "cc.EventListenerTouchOneByOne.init()", "contents": "init()" },
{ "trigger": "cc.EventListenerTouchOneByOne.EventListenerTouchOneByOne()", "contents": "EventListenerTouchOneByOne()" },
{ "trigger": "cc.EventListenerTouchAllAtOnce.init()", "contents": "init()" },
{ "trigger": "cc.EventListenerTouchAllAtOnce.EventListenerTouchAllAtOnce()", "contents": "EventListenerTouchAllAtOnce()" },
{ "trigger": "cc.EventListenerKeyboard.init()", "contents": "init()" },
{ "trigger": "cc.EventListenerKeyboard.EventListenerKeyboard()", "contents": "EventListenerKeyboard()" },
{ "trigger": "cc.EventMouse.getMouseButton()", "contents": "getMouseButton()" },
{ "trigger": "cc.EventMouse.getLocation()", "contents": "getLocation()" },
{ "trigger": "cc.EventMouse.setMouseButton(int)", "contents": "setMouseButton(int)" },
{ "trigger": "cc.EventMouse.setScrollData(float, float)", "contents": "setScrollData(float, float)" },
{ "trigger": "cc.EventMouse.getPreviousLocationInView()", "contents": "getPreviousLocationInView()" },
{ "trigger": "cc.EventMouse.getDelta()", "contents": "getDelta()" },
{ "trigger": "cc.EventMouse.getStartLocation()", "contents": "getStartLocation()" },
{ "trigger": "cc.EventMouse.getCursorY()", "contents": "getCursorY()" },
{ "trigger": "cc.EventMouse.getCursorX()", "contents": "getCursorX()" },
{ "trigger": "cc.EventMouse.getLocationInView()", "contents": "getLocationInView()" },
{ "trigger": "cc.EventMouse.getScrollY()", "contents": "getScrollY()" },
{ "trigger": "cc.EventMouse.setCursorPosition(float, float)", "contents": "setCursorPosition(float, float)" },
{ "trigger": "cc.EventMouse.getScrollX()", "contents": "getScrollX()" },
{ "trigger": "cc.EventMouse.getPreviousLocation()", "contents": "getPreviousLocation()" },
{ "trigger": "cc.EventMouse.getStartLocationInView()", "contents": "getStartLocationInView()" },
{ "trigger": "cc.EventMouse.EventMouse(mouseeventtype)", "contents": "EventMouse(mouseeventtype)" },
{ "trigger": "cc.EventListenerMouse.init()", "contents": "init()" },
{ "trigger": "cc.EventListenerMouse.EventListenerMouse()", "contents": "EventListenerMouse()" },
{ "trigger": "cc.EventAcceleration.EventAcceleration(acceleration)", "contents": "EventAcceleration(acceleration)" },
{ "trigger": "cc.EventListenerAcceleration.init(func)", "contents": "init(func)" },
{ "trigger": "cc.EventListenerAcceleration.create(func)", "contents": "create(func)" },
{ "trigger": "cc.EventListenerAcceleration.EventListenerAcceleration()", "contents": "EventListenerAcceleration()" },
{ "trigger": "cc.EventCustom.getEventName()", "contents": "getEventName()" },
{ "trigger": "cc.EventCustom.EventCustom(str)", "contents": "EventCustom(str)" },
{ "trigger": "cc.EventListenerCustom.create(str, func)", "contents": "create(str, func)" },
{ "trigger": "cc.EventListenerCustom.EventListenerCustom()", "contents": "EventListenerCustom()" },
{ "trigger": "cc.EventFocus.EventFocus(widget, widget)", "contents": "EventFocus(widget, widget)" },
{ "trigger": "cc.EventListenerFocus.init()", "contents": "init()" },
{ "trigger": "cc.EventListenerFocus.EventListenerFocus()", "contents": "EventListenerFocus()" },
{ "trigger": "cc.ActionCamera.setEye(float, float, float)", "contents": "setEye(float, float, float)" },
{ "trigger": "cc.ActionCamera.getEye()", "contents": "getEye()" },
{ "trigger": "cc.ActionCamera.setUp(vec3)", "contents": "setUp(vec3)" },
{ "trigger": "cc.ActionCamera.getCenter()", "contents": "getCenter()" },
{ "trigger": "cc.ActionCamera.setCenter(vec3)", "contents": "setCenter(vec3)" },
{ "trigger": "cc.ActionCamera.getUp()", "contents": "getUp()" },
{ "trigger": "cc.ActionCamera.ActionCamera()", "contents": "ActionCamera()" },
{ "trigger": "cc.OrbitCamera.sphericalRadius(float, float, float)", "contents": "sphericalRadius(float, float, float)" },
{ "trigger": "cc.OrbitCamera.initWithDuration(float, float, float, float, float, float, float)", "contents": "initWithDuration(float, float, float, float, float, float, float)" },
{ "trigger": "cc.OrbitCamera.create(float, float, float, float, float, float, float)", "contents": "create(float, float, float, float, float, float, float)" },
{ "trigger": "cc.OrbitCamera.OrbitCamera()", "contents": "OrbitCamera()" },
{ "trigger": "cc.ActionManager.getActionByTag(int, node)", "contents": "getActionByTag(int, node)" },
{ "trigger": "cc.ActionManager.removeActionByTag(int, node)", "contents": "removeActionByTag(int, node)" },
{ "trigger": "cc.ActionManager.removeAllActions()", "contents": "removeAllActions()" },
{ "trigger": "cc.ActionManager.addAction(action, node, bool)", "contents": "addAction(action, node, bool)" },
{ "trigger": "cc.ActionManager.resumeTarget(node)", "contents": "resumeTarget(node)" },
{ "trigger": "cc.ActionManager.update(float)", "contents": "update(float)" },
{ "trigger": "cc.ActionManager.pauseTarget(node)", "contents": "pauseTarget(node)" },
{ "trigger": "cc.ActionManager.getNumberOfRunningActionsInTarget(node)", "contents": "getNumberOfRunningActionsInTarget(node)" },
{ "trigger": "cc.ActionManager.removeAllActionsFromTarget(node)", "contents": "removeAllActionsFromTarget(node)" },
{ "trigger": "cc.ActionManager.resumeTargets(array)", "contents": "resumeTargets(array)" },
{ "trigger": "cc.ActionManager.removeAction(action)", "contents": "removeAction(action)" },
{ "trigger": "cc.ActionManager.removeAllActionsByTag(int, node)", "contents": "removeAllActionsByTag(int, node)" },
{ "trigger": "cc.ActionManager.pauseAllRunningActions()", "contents": "pauseAllRunningActions()" },
{ "trigger": "cc.ActionManager.ActionManager()", "contents": "ActionManager()" },
{ "trigger": "cc.ActionEase.initWithAction(actioninterval)", "contents": "initWithAction(actioninterval)" },
{ "trigger": "cc.ActionEase.getInnerAction()", "contents": "getInnerAction()" },
{ "trigger": "cc.EaseRateAction.setRate(float)", "contents": "setRate(float)" },
{ "trigger": "cc.EaseRateAction.initWithAction(actioninterval, float)", "contents": "initWithAction(actioninterval, float)" },
{ "trigger": "cc.EaseRateAction.getRate()", "contents": "getRate()" },
{ "trigger": "cc.EaseIn.create(actioninterval, float)", "contents": "create(actioninterval, float)" },
{ "trigger": "cc.EaseIn.EaseIn()", "contents": "EaseIn()" },
{ "trigger": "cc.EaseOut.create(actioninterval, float)", "contents": "create(actioninterval, float)" },
{ "trigger": "cc.EaseOut.EaseOut()", "contents": "EaseOut()" },
{ "trigger": "cc.EaseInOut.create(actioninterval, float)", "contents": "create(actioninterval, float)" },
{ "trigger": "cc.EaseInOut.EaseInOut()", "contents": "EaseInOut()" },
{ "trigger": "cc.EaseExponentialIn.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseExponentialIn.EaseExponentialIn()", "contents": "EaseExponentialIn()" },
{ "trigger": "cc.EaseExponentialOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseExponentialOut.EaseExponentialOut()", "contents": "EaseExponentialOut()" },
{ "trigger": "cc.EaseExponentialInOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseExponentialInOut.EaseExponentialInOut()", "contents": "EaseExponentialInOut()" },
{ "trigger": "cc.EaseSineIn.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseSineIn.EaseSineIn()", "contents": "EaseSineIn()" },
{ "trigger": "cc.EaseSineOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseSineOut.EaseSineOut()", "contents": "EaseSineOut()" },
{ "trigger": "cc.EaseSineInOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseSineInOut.EaseSineInOut()", "contents": "EaseSineInOut()" },
{ "trigger": "cc.EaseElastic.setPeriod(float)", "contents": "setPeriod(float)" },
{ "trigger": "cc.EaseElastic.initWithAction(actioninterval, float)", "contents": "initWithAction(actioninterval, float)" },
{ "trigger": "cc.EaseElastic.getPeriod()", "contents": "getPeriod()" },
{ "trigger": "cc.EaseElasticIn.create(actioninterval, float)", "contents": "create(actioninterval, float)" },
{ "trigger": "cc.EaseElasticIn.EaseElasticIn()", "contents": "EaseElasticIn()" },
{ "trigger": "cc.EaseElasticOut.create(actioninterval, float)", "contents": "create(actioninterval, float)" },
{ "trigger": "cc.EaseElasticOut.EaseElasticOut()", "contents": "EaseElasticOut()" },
{ "trigger": "cc.EaseElasticInOut.create(actioninterval, float)", "contents": "create(actioninterval, float)" },
{ "trigger": "cc.EaseElasticInOut.EaseElasticInOut()", "contents": "EaseElasticInOut()" },
{ "trigger": "cc.EaseBounceIn.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseBounceIn.EaseBounceIn()", "contents": "EaseBounceIn()" },
{ "trigger": "cc.EaseBounceOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseBounceOut.EaseBounceOut()", "contents": "EaseBounceOut()" },
{ "trigger": "cc.EaseBounceInOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseBounceInOut.EaseBounceInOut()", "contents": "EaseBounceInOut()" },
{ "trigger": "cc.EaseBackIn.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseBackIn.EaseBackIn()", "contents": "EaseBackIn()" },
{ "trigger": "cc.EaseBackOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseBackOut.EaseBackOut()", "contents": "EaseBackOut()" },
{ "trigger": "cc.EaseBackInOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseBackInOut.EaseBackInOut()", "contents": "EaseBackInOut()" },
{ "trigger": "cc.EaseBezierAction.setBezierParamer(float, float, float, float)", "contents": "setBezierParamer(float, float, float, float)" },
{ "trigger": "cc.EaseBezierAction.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseBezierAction.EaseBezierAction()", "contents": "EaseBezierAction()" },
{ "trigger": "cc.EaseQuadraticActionIn.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseQuadraticActionIn.EaseQuadraticActionIn()", "contents": "EaseQuadraticActionIn()" },
{ "trigger": "cc.EaseQuadraticActionOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseQuadraticActionOut.EaseQuadraticActionOut()", "contents": "EaseQuadraticActionOut()" },
{ "trigger": "cc.EaseQuadraticActionInOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseQuadraticActionInOut.EaseQuadraticActionInOut()", "contents": "EaseQuadraticActionInOut()" },
{ "trigger": "cc.EaseQuarticActionIn.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseQuarticActionIn.EaseQuarticActionIn()", "contents": "EaseQuarticActionIn()" },
{ "trigger": "cc.EaseQuarticActionOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseQuarticActionOut.EaseQuarticActionOut()", "contents": "EaseQuarticActionOut()" },
{ "trigger": "cc.EaseQuarticActionInOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseQuarticActionInOut.EaseQuarticActionInOut()", "contents": "EaseQuarticActionInOut()" },
{ "trigger": "cc.EaseQuinticActionIn.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseQuinticActionIn.EaseQuinticActionIn()", "contents": "EaseQuinticActionIn()" },
{ "trigger": "cc.EaseQuinticActionOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseQuinticActionOut.EaseQuinticActionOut()", "contents": "EaseQuinticActionOut()" },
{ "trigger": "cc.EaseQuinticActionInOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseQuinticActionInOut.EaseQuinticActionInOut()", "contents": "EaseQuinticActionInOut()" },
{ "trigger": "cc.EaseCircleActionIn.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseCircleActionIn.EaseCircleActionIn()", "contents": "EaseCircleActionIn()" },
{ "trigger": "cc.EaseCircleActionOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseCircleActionOut.EaseCircleActionOut()", "contents": "EaseCircleActionOut()" },
{ "trigger": "cc.EaseCircleActionInOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseCircleActionInOut.EaseCircleActionInOut()", "contents": "EaseCircleActionInOut()" },
{ "trigger": "cc.EaseCubicActionIn.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseCubicActionIn.EaseCubicActionIn()", "contents": "EaseCubicActionIn()" },
{ "trigger": "cc.EaseCubicActionOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseCubicActionOut.EaseCubicActionOut()", "contents": "EaseCubicActionOut()" },
{ "trigger": "cc.EaseCubicActionInOut.create(actioninterval)", "contents": "create(actioninterval)" },
{ "trigger": "cc.EaseCubicActionInOut.EaseCubicActionInOut()", "contents": "EaseCubicActionInOut()" },
{ "trigger": "cc.Show.create()", "contents": "create()" },
{ "trigger": "cc.Show.Show()", "contents": "Show()" },
{ "trigger": "cc.Hide.create()", "contents": "create()" },
{ "trigger": "cc.Hide.Hide()", "contents": "Hide()" },
{ "trigger": "cc.ToggleVisibility.create()", "contents": "create()" },
{ "trigger": "cc.ToggleVisibility.ToggleVisibility()", "contents": "ToggleVisibility()" },
{ "trigger": "cc.RemoveSelf.init(bool)", "contents": "init(bool)" },
{ "trigger": "cc.RemoveSelf.create()", "contents": "create()" },
{ "trigger": "cc.RemoveSelf.RemoveSelf()", "contents": "RemoveSelf()" },
{ "trigger": "cc.FlipX.initWithFlipX(bool)", "contents": "initWithFlipX(bool)" },
{ "trigger": "cc.FlipX.create(bool)", "contents": "create(bool)" },
{ "trigger": "cc.FlipX.FlipX()", "contents": "FlipX()" },
{ "trigger": "cc.FlipY.initWithFlipY(bool)", "contents": "initWithFlipY(bool)" },
{ "trigger": "cc.FlipY.create(bool)", "contents": "create(bool)" },
{ "trigger": "cc.FlipY.FlipY()", "contents": "FlipY()" },
{ "trigger": "cc.Place.initWithPosition(vec2)", "contents": "initWithPosition(vec2)" },
{ "trigger": "cc.Place.create(vec2)", "contents": "create(vec2)" },
{ "trigger": "cc.Place.Place()", "contents": "Place()" },
{ "trigger": "cc.CallFunc.execute()", "contents": "execute()" },
{ "trigger": "cc.CallFunc.CallFunc()", "contents": "CallFunc()" },
{ "trigger": "cc.CallFuncN.CallFuncN()", "contents": "CallFuncN()" },
{ "trigger": "cc.GridAction.getGrid()", "contents": "getGrid()" },
{ "trigger": "cc.GridAction.initWithDuration(float, size)", "contents": "initWithDuration(float, size)" },
{ "trigger": "cc.StopGrid.create()", "contents": "create()" },
{ "trigger": "cc.StopGrid.StopGrid()", "contents": "StopGrid()" },
{ "trigger": "cc.ReuseGrid.initWithTimes(int)", "contents": "initWithTimes(int)" },
{ "trigger": "cc.ReuseGrid.create(int)", "contents": "create(int)" },
{ "trigger": "cc.ReuseGrid.ReuseGrid()", "contents": "ReuseGrid()" },
{ "trigger": "cc.Waves3D.setAmplitudeRate(float)", "contents": "setAmplitudeRate(float)" },
{ "trigger": "cc.Waves3D.initWithDuration(float, size, int, float)", "contents": "initWithDuration(float, size, int, float)" },
{ "trigger": "cc.Waves3D.getAmplitude()", "contents": "getAmplitude()" },
{ "trigger": "cc.Waves3D.getAmplitudeRate()", "contents": "getAmplitudeRate()" },
{ "trigger": "cc.Waves3D.setAmplitude(float)", "contents": "setAmplitude(float)" },
{ "trigger": "cc.Waves3D.create(float, size, int, float)", "contents": "create(float, size, int, float)" },
{ "trigger": "cc.Waves3D.Waves3D()", "contents": "Waves3D()" },
{ "trigger": "cc.FlipX3D.initWithSize(size, float)", "contents": "initWithSize(size, float)" },
{ "trigger": "cc.FlipX3D.initWithDuration(float)", "contents": "initWithDuration(float)" },
{ "trigger": "cc.FlipX3D.create(float)", "contents": "create(float)" },
{ "trigger": "cc.FlipX3D.FlipX3D()", "contents": "FlipX3D()" },
{ "trigger": "cc.FlipY3D.create(float)", "contents": "create(float)" },
{ "trigger": "cc.FlipY3D.FlipY3D()", "contents": "FlipY3D()" },
{ "trigger": "cc.Lens3D.setConcave(bool)", "contents": "setConcave(bool)" },
{ "trigger": "cc.Lens3D.initWithDuration(float, size, vec2, float)", "contents": "initWithDuration(float, size, vec2, float)" },
{ "trigger": "cc.Lens3D.setLensEffect(float)", "contents": "setLensEffect(float)" },
{ "trigger": "cc.Lens3D.getLensEffect()", "contents": "getLensEffect()" },
{ "trigger": "cc.Lens3D.setPosition(vec2)", "contents": "setPosition(vec2)" },
{ "trigger": "cc.Lens3D.getPosition()", "contents": "getPosition()" },
{ "trigger": "cc.Lens3D.create(float, size, vec2, float)", "contents": "create(float, size, vec2, float)" },
{ "trigger": "cc.Lens3D.Lens3D()", "contents": "Lens3D()" },
{ "trigger": "cc.Ripple3D.setAmplitudeRate(float)", "contents": "setAmplitudeRate(float)" },
{ "trigger": "cc.Ripple3D.initWithDuration(float, size, vec2, float, int, float)", "contents": "initWithDuration(float, size, vec2, float, int, float)" },
{ "trigger": "cc.Ripple3D.getAmplitudeRate()", "contents": "getAmplitudeRate()" },
{ "trigger": "cc.Ripple3D.setAmplitude(float)", "contents": "setAmplitude(float)" },
{ "trigger": "cc.Ripple3D.getAmplitude()", "contents": "getAmplitude()" },
{ "trigger": "cc.Ripple3D.setPosition(vec2)", "contents": "setPosition(vec2)" },
{ "trigger": "cc.Ripple3D.getPosition()", "contents": "getPosition()" },
{ "trigger": "cc.Ripple3D.create(float, size, vec2, float, int, float)", "contents": "create(float, size, vec2, float, int, float)" },
{ "trigger": "cc.Ripple3D.Ripple3D()", "contents": "Ripple3D()" },
{ "trigger": "cc.Shaky3D.initWithDuration(float, size, int, bool)", "contents": "initWithDuration(float, size, int, bool)" },
{ "trigger": "cc.Shaky3D.create(float, size, int, bool)", "contents": "create(float, size, int, bool)" },
{ "trigger": "cc.Shaky3D.Shaky3D()", "contents": "Shaky3D()" },
{ "trigger": "cc.Liquid.setAmplitudeRate(float)", "contents": "setAmplitudeRate(float)" },
{ "trigger": "cc.Liquid.initWithDuration(float, size, int, float)", "contents": "initWithDuration(float, size, int, float)" },
{ "trigger": "cc.Liquid.getAmplitude()", "contents": "getAmplitude()" },
{ "trigger": "cc.Liquid.getAmplitudeRate()", "contents": "getAmplitudeRate()" },
{ "trigger": "cc.Liquid.setAmplitude(float)", "contents": "setAmplitude(float)" },
{ "trigger": "cc.Liquid.create(float, size, int, float)", "contents": "create(float, size, int, float)" },
{ "trigger": "cc.Liquid.Liquid()", "contents": "Liquid()" },
{ "trigger": "cc.Waves.setAmplitudeRate(float)", "contents": "setAmplitudeRate(float)" },
{ "trigger": "cc.Waves.initWithDuration(float, size, int, float, bool, bool)", "contents": "initWithDuration(float, size, int, float, bool, bool)" },
{ "trigger": "cc.Waves.getAmplitude()", "contents": "getAmplitude()" },
{ "trigger": "cc.Waves.getAmplitudeRate()", "contents": "getAmplitudeRate()" },
{ "trigger": "cc.Waves.setAmplitude(float)", "contents": "setAmplitude(float)" },
{ "trigger": "cc.Waves.create(float, size, int, float, bool, bool)", "contents": "create(float, size, int, float, bool, bool)" },
{ "trigger": "cc.Waves.Waves()", "contents": "Waves()" },
{ "trigger": "cc.Twirl.setAmplitudeRate(float)", "contents": "setAmplitudeRate(float)" },
{ "trigger": "cc.Twirl.initWithDuration(float, size, vec2, int, float)", "contents": "initWithDuration(float, size, vec2, int, float)" },
{ "trigger": "cc.Twirl.getAmplitudeRate()", "contents": "getAmplitudeRate()" },
{ "trigger": "cc.Twirl.setAmplitude(float)", "contents": "setAmplitude(float)" },
{ "trigger": "cc.Twirl.getAmplitude()", "contents": "getAmplitude()" },
{ "trigger": "cc.Twirl.setPosition(vec2)", "contents": "setPosition(vec2)" },
{ "trigger": "cc.Twirl.getPosition()", "contents": "getPosition()" },
{ "trigger": "cc.Twirl.create(float, size, vec2, int, float)", "contents": "create(float, size, vec2, int, float)" },
{ "trigger": "cc.Twirl.Twirl()", "contents": "Twirl()" },
{ "trigger": "cc.PageTurn3D.create(float, size)", "contents": "create(float, size)" },
{ "trigger": "cc.ProgressTo.initWithDuration(float, float)", "contents": "initWithDuration(float, float)" },
{ "trigger": "cc.ProgressTo.create(float, float)", "contents": "create(float, float)" },
{ "trigger": "cc.ProgressTo.ProgressTo()", "contents": "ProgressTo()" },
{ "trigger": "cc.ProgressFromTo.initWithDuration(float, float, float)", "contents": "initWithDuration(float, float, float)" },
{ "trigger": "cc.ProgressFromTo.create(float, float, float)", "contents": "create(float, float, float)" },
{ "trigger": "cc.ProgressFromTo.ProgressFromTo()", "contents": "ProgressFromTo()" },
{ "trigger": "cc.ShakyTiles3D.initWithDuration(float, size, int, bool)", "contents": "initWithDuration(float, size, int, bool)" },
{ "trigger": "cc.ShakyTiles3D.create(float, size, int, bool)", "contents": "create(float, size, int, bool)" },
{ "trigger": "cc.ShakyTiles3D.ShakyTiles3D()", "contents": "ShakyTiles3D()" },
{ "trigger": "cc.ShatteredTiles3D.initWithDuration(float, size, int, bool)", "contents": "initWithDuration(float, size, int, bool)" },
{ "trigger": "cc.ShatteredTiles3D.create(float, size, int, bool)", "contents": "create(float, size, int, bool)" },
{ "trigger": "cc.ShatteredTiles3D.ShatteredTiles3D()", "contents": "ShatteredTiles3D()" },
{ "trigger": "cc.ShuffleTiles.placeTile(vec2, tile)", "contents": "placeTile(vec2, tile)" },
{ "trigger": "cc.ShuffleTiles.shuffle(int, int)", "contents": "shuffle(int, int)" },
{ "trigger": "cc.ShuffleTiles.initWithDuration(float, size, int)", "contents": "initWithDuration(float, size, int)" },
{ "trigger": "cc.ShuffleTiles.getDelta(size)", "contents": "getDelta(size)" },
{ "trigger": "cc.ShuffleTiles.create(float, size, int)", "contents": "create(float, size, int)" },
{ "trigger": "cc.ShuffleTiles.ShuffleTiles()", "contents": "ShuffleTiles()" },
{ "trigger": "cc.FadeOutTRTiles.turnOnTile(vec2)", "contents": "turnOnTile(vec2)" },
{ "trigger": "cc.FadeOutTRTiles.turnOffTile(vec2)", "contents": "turnOffTile(vec2)" },
{ "trigger": "cc.FadeOutTRTiles.transformTile(vec2, float)", "contents": "transformTile(vec2, float)" },
{ "trigger": "cc.FadeOutTRTiles.testFunc(size, float)", "contents": "testFunc(size, float)" },
{ "trigger": "cc.FadeOutTRTiles.create(float, size)", "contents": "create(float, size)" },
{ "trigger": "cc.FadeOutTRTiles.FadeOutTRTiles()", "contents": "FadeOutTRTiles()" },
{ "trigger": "cc.FadeOutBLTiles.create(float, size)", "contents": "create(float, size)" },
{ "trigger": "cc.FadeOutBLTiles.FadeOutBLTiles()", "contents": "FadeOutBLTiles()" },
{ "trigger": "cc.FadeOutUpTiles.create(float, size)", "contents": "create(float, size)" },
{ "trigger": "cc.FadeOutUpTiles.FadeOutUpTiles()", "contents": "FadeOutUpTiles()" },
{ "trigger": "cc.FadeOutDownTiles.create(float, size)", "contents": "create(float, size)" },
{ "trigger": "cc.FadeOutDownTiles.FadeOutDownTiles()", "contents": "FadeOutDownTiles()" },
{ "trigger": "cc.TurnOffTiles.turnOnTile(vec2)", "contents": "turnOnTile(vec2)" },
{ "trigger": "cc.TurnOffTiles.turnOffTile(vec2)", "contents": "turnOffTile(vec2)" },
{ "trigger": "cc.TurnOffTiles.shuffle(int, int)", "contents": "shuffle(int, int)" },
{ "trigger": "cc.TurnOffTiles.initWithDuration(float, size, int)", "contents": "initWithDuration(float, size, int)" },
{ "trigger": "cc.TurnOffTiles.create(float, size, int)", "contents": "create(float, size, int)" },
{ "trigger": "cc.TurnOffTiles.TurnOffTiles()", "contents": "TurnOffTiles()" },
{ "trigger": "cc.WavesTiles3D.setAmplitudeRate(float)", "contents": "setAmplitudeRate(float)" },
{ "trigger": "cc.WavesTiles3D.initWithDuration(float, size, int, float)", "contents": "initWithDuration(float, size, int, float)" },
{ "trigger": "cc.WavesTiles3D.getAmplitude()", "contents": "getAmplitude()" },
{ "trigger": "cc.WavesTiles3D.getAmplitudeRate()", "contents": "getAmplitudeRate()" },
{ "trigger": "cc.WavesTiles3D.setAmplitude(float)", "contents": "setAmplitude(float)" },
{ "trigger": "cc.WavesTiles3D.create(float, size, int, float)", "contents": "create(float, size, int, float)" },
{ "trigger": "cc.WavesTiles3D.WavesTiles3D()", "contents": "WavesTiles3D()" },
{ "trigger": "cc.JumpTiles3D.setAmplitudeRate(float)", "contents": "setAmplitudeRate(float)" },
{ "trigger": "cc.JumpTiles3D.initWithDuration(float, size, int, float)", "contents": "initWithDuration(float, size, int, float)" },
{ "trigger": "cc.JumpTiles3D.getAmplitude()", "contents": "getAmplitude()" },
{ "trigger": "cc.JumpTiles3D.getAmplitudeRate()", "contents": "getAmplitudeRate()" },
{ "trigger": "cc.JumpTiles3D.setAmplitude(float)", "contents": "setAmplitude(float)" },
{ "trigger": "cc.JumpTiles3D.create(float, size, int, float)", "contents": "create(float, size, int, float)" },
{ "trigger": "cc.JumpTiles3D.JumpTiles3D()", "contents": "JumpTiles3D()" },
{ "trigger": "cc.SplitRows.initWithDuration(float, int)", "contents": "initWithDuration(float, int)" },
{ "trigger": "cc.SplitRows.create(float, int)", "contents": "create(float, int)" },
{ "trigger": "cc.SplitRows.SplitRows()", "contents": "SplitRows()" },
{ "trigger": "cc.SplitCols.initWithDuration(float, int)", "contents": "initWithDuration(float, int)" },
{ "trigger": "cc.SplitCols.create(float, int)", "contents": "create(float, int)" },
{ "trigger": "cc.SplitCols.SplitCols()", "contents": "SplitCols()" },
{ "trigger": "cc.ActionTween.initWithDuration(float, str, float, float)", "contents": "initWithDuration(float, str, float, float)" },
{ "trigger": "cc.ActionTween.create(float, str, float, float)", "contents": "create(float, str, float, float)" },
{ "trigger": "cc.CardinalSplineTo.getPoints()", "contents": "getPoints()" },
{ "trigger": "cc.CardinalSplineTo.updatePosition(vec2)", "contents": "updatePosition(vec2)" },
{ "trigger": "cc.CardinalSplineTo.CardinalSplineTo()", "contents": "CardinalSplineTo()" },
{ "trigger": "cc.CardinalSplineBy.CardinalSplineBy()", "contents": "CardinalSplineBy()" },
{ "trigger": "cc.ProtectedNode.addProtectedChild(node, int, int)", "contents": "addProtectedChild(node, int, int)" },
{ "trigger": "cc.ProtectedNode.disableCascadeColor()", "contents": "disableCascadeColor()" },
{ "trigger": "cc.ProtectedNode.removeProtectedChildByTag(int, bool)", "contents": "removeProtectedChildByTag(int, bool)" },
{ "trigger": "cc.ProtectedNode.reorderProtectedChild(node, int)", "contents": "reorderProtectedChild(node, int)" },
{ "trigger": "cc.ProtectedNode.removeAllProtectedChildrenWithCleanup(bool)", "contents": "removeAllProtectedChildrenWithCleanup(bool)" },
{ "trigger": "cc.ProtectedNode.disableCascadeOpacity()", "contents": "disableCascadeOpacity()" },
{ "trigger": "cc.ProtectedNode.sortAllProtectedChildren()", "contents": "sortAllProtectedChildren()" },
{ "trigger": "cc.ProtectedNode.getProtectedChildByTag(int)", "contents": "getProtectedChildByTag(int)" },
{ "trigger": "cc.ProtectedNode.removeProtectedChild(node, bool)", "contents": "removeProtectedChild(node, bool)" },
{ "trigger": "cc.ProtectedNode.removeAllProtectedChildren()", "contents": "removeAllProtectedChildren()" },
{ "trigger": "cc.ProtectedNode.create()", "contents": "create()" },
{ "trigger": "cc.ProtectedNode.ProtectedNode()", "contents": "ProtectedNode()" },
{ "trigger": "cc.GLProgramState.setUniformTexture(int, int)", "contents": "setUniformTexture(int, int)" },
{ "trigger": "cc.GLProgramState.setUniformMat4(str, mat4)", "contents": "setUniformMat4(str, mat4)" },
{ "trigger": "cc.GLProgramState.applyUniforms()", "contents": "applyUniforms()" },
{ "trigger": "cc.GLProgramState.setUniformCallback(str, func)", "contents": "setUniformCallback(str, func)" },
{ "trigger": "cc.GLProgramState.applyGLProgram(mat4)", "contents": "applyGLProgram(mat4)" },
{ "trigger": "cc.GLProgramState.getUniformCount()", "contents": "getUniformCount()" },
{ "trigger": "cc.GLProgramState.applyAttributes()", "contents": "applyAttributes()" },
{ "trigger": "cc.GLProgramState.setUniformFloat(str, float)", "contents": "setUniformFloat(str, float)" },
{ "trigger": "cc.GLProgramState.setUniformVec3(str, vec3)", "contents": "setUniformVec3(str, vec3)" },
{ "trigger": "cc.GLProgramState.setUniformInt(str, int)", "contents": "setUniformInt(str, int)" },
{ "trigger": "cc.GLProgramState.getVertexAttribCount()", "contents": "getVertexAttribCount()" },
{ "trigger": "cc.GLProgramState.setGLProgram(glprogram)", "contents": "setGLProgram(glprogram)" },
{ "trigger": "cc.GLProgramState.setUniformVec2(str, vec2)", "contents": "setUniformVec2(str, vec2)" },
{ "trigger": "cc.GLProgramState.getVertexAttribsFlags()", "contents": "getVertexAttribsFlags()" },
{ "trigger": "cc.GLProgramState.setVertexAttribCallback(str, func)", "contents": "setVertexAttribCallback(str, func)" },
{ "trigger": "cc.GLProgramState.apply(mat4)", "contents": "apply(mat4)" },
{ "trigger": "cc.GLProgramState.getGLProgram()", "contents": "getGLProgram()" },
{ "trigger": "cc.GLProgramState.create(glprogram)", "contents": "create(glprogram)" },
{ "trigger": "cc.GLProgramState.getOrCreateWithGLProgramName(str)", "contents": "getOrCreateWithGLProgramName(str)" },
{ "trigger": "cc.GLProgramState.getOrCreateWithGLProgram(glprogram)", "contents": "getOrCreateWithGLProgram(glprogram)" },
{ "trigger": "cc.AtlasNode.updateAtlasValues()", "contents": "updateAtlasValues()" },
{ "trigger": "cc.AtlasNode.initWithTileFile(str, int, int, int)", "contents": "initWithTileFile(str, int, int, int)" },
{ "trigger": "cc.AtlasNode.getTexture()", "contents": "getTexture()" },
{ "trigger": "cc.AtlasNode.setTextureAtlas(textureatlas)", "contents": "setTextureAtlas(textureatlas)" },
{ "trigger": "cc.AtlasNode.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "cc.AtlasNode.getTextureAtlas()", "contents": "getTextureAtlas()" },
{ "trigger": "cc.AtlasNode.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "cc.AtlasNode.getQuadsToDraw()", "contents": "getQuadsToDraw()" },
{ "trigger": "cc.AtlasNode.setTexture(texture2d)", "contents": "setTexture(texture2d)" },
{ "trigger": "cc.AtlasNode.initWithTexture(texture2d, int, int, int)", "contents": "initWithTexture(texture2d, int, int, int)" },
{ "trigger": "cc.AtlasNode.setQuadsToDraw(long)", "contents": "setQuadsToDraw(long)" },
{ "trigger": "cc.AtlasNode.create(str, int, int, int)", "contents": "create(str, int, int, int)" },
{ "trigger": "cc.AtlasNode.AtlasNode()", "contents": "AtlasNode()" },
{ "trigger": "cc.DrawNode.drawLine(vec2, vec2, color4f)", "contents": "drawLine(vec2, vec2, color4f)" },
{ "trigger": "cc.DrawNode.drawPoints(vec2, int, float, color4f)", "contents": "drawPoints(vec2, int, float, color4f)" },
{ "trigger": "cc.DrawNode.drawRect(vec2, vec2, vec2, vec2, color4f)", "contents": "drawRect(vec2, vec2, vec2, vec2, color4f)" },
{ "trigger": "cc.DrawNode.drawSolidCircle(vec2, float, float, int, float, float, color4f)", "contents": "drawSolidCircle(vec2, float, float, int, float, float, color4f)" },
{ "trigger": "cc.DrawNode.onDrawGLPoint(mat4, int)", "contents": "onDrawGLPoint(mat4, int)" },
{ "trigger": "cc.DrawNode.drawDot(vec2, float, color4f)", "contents": "drawDot(vec2, float, color4f)" },
{ "trigger": "cc.DrawNode.drawCatmullRom(pointarray, int, color4f)", "contents": "drawCatmullRom(pointarray, int, color4f)" },
{ "trigger": "cc.DrawNode.drawSegment(vec2, vec2, float, color4f)", "contents": "drawSegment(vec2, vec2, float, color4f)" },
{ "trigger": "cc.DrawNode.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "cc.DrawNode.onDraw(mat4, int)", "contents": "onDraw(mat4, int)" },
{ "trigger": "cc.DrawNode.drawCircle(vec2, float, float, int, bool, float, float, color4f)", "contents": "drawCircle(vec2, float, float, int, bool, float, float, color4f)" },
{ "trigger": "cc.DrawNode.drawQuadBezier(vec2, vec2, vec2, int, color4f)", "contents": "drawQuadBezier(vec2, vec2, vec2, int, color4f)" },
{ "trigger": "cc.DrawNode.onDrawGLLine(mat4, int)", "contents": "onDrawGLLine(mat4, int)" },
{ "trigger": "cc.DrawNode.drawSolidPoly(vec2, int, color4f)", "contents": "drawSolidPoly(vec2, int, color4f)" },
{ "trigger": "cc.DrawNode.drawTriangle(vec2, vec2, vec2, color4f)", "contents": "drawTriangle(vec2, vec2, vec2, color4f)" },
{ "trigger": "cc.DrawNode.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "cc.DrawNode.clear()", "contents": "clear()" },
{ "trigger": "cc.DrawNode.drawCardinalSpline(pointarray, float, int, color4f)", "contents": "drawCardinalSpline(pointarray, float, int, color4f)" },
{ "trigger": "cc.DrawNode.drawSolidRect(vec2, vec2, color4f)", "contents": "drawSolidRect(vec2, vec2, color4f)" },
{ "trigger": "cc.DrawNode.drawPoly(vec2, int, bool, color4f)", "contents": "drawPoly(vec2, int, bool, color4f)" },
{ "trigger": "cc.DrawNode.drawPoint(vec2, float, color4f)", "contents": "drawPoint(vec2, float, color4f)" },
{ "trigger": "cc.DrawNode.drawCubicBezier(vec2, vec2, vec2, vec2, int, color4f)", "contents": "drawCubicBezier(vec2, vec2, vec2, vec2, int, color4f)" },
{ "trigger": "cc.DrawNode.create()", "contents": "create()" },
{ "trigger": "cc.DrawNode.DrawNode()", "contents": "DrawNode()" },
{ "trigger": "cc.LabelAtlas.setString(str)", "contents": "setString(str)" },
{ "trigger": "cc.LabelAtlas.initWithString(str, texture2d, int, int, int)", "contents": "initWithString(str, texture2d, int, int, int)" },
{ "trigger": "cc.LabelAtlas.getString()", "contents": "getString()" },
{ "trigger": "cc.LabelAtlas.create(str, str, int, int, int)", "contents": "create(str, str, int, int, int)" },
{ "trigger": "cc.LabelAtlas.LabelAtlas()", "contents": "LabelAtlas()" },
{ "trigger": "cc.LabelTTF.enableShadow(size, float, float, bool)", "contents": "enableShadow(size, float, float, bool)" },
{ "trigger": "cc.LabelTTF.setDimensions(size)", "contents": "setDimensions(size)" },
{ "trigger": "cc.LabelTTF.getFontSize()", "contents": "getFontSize()" },
{ "trigger": "cc.LabelTTF.getString()", "contents": "getString()" },
{ "trigger": "cc.LabelTTF.setFlippedY(bool)", "contents": "setFlippedY(bool)" },
{ "trigger": "cc.LabelTTF.setFlippedX(bool)", "contents": "setFlippedX(bool)" },
{ "trigger": "cc.LabelTTF.setTextDefinition(fontdefinition)", "contents": "setTextDefinition(fontdefinition)" },
{ "trigger": "cc.LabelTTF.setFontName(str)", "contents": "setFontName(str)" },
{ "trigger": "cc.LabelTTF.getHorizontalAlignment()", "contents": "getHorizontalAlignment()" },
{ "trigger": "cc.LabelTTF.initWithStringAndTextDefinition(str, fontdefinition)", "contents": "initWithStringAndTextDefinition(str, fontdefinition)" },
{ "trigger": "cc.LabelTTF.setString(str)", "contents": "setString(str)" },
{ "trigger": "cc.LabelTTF.initWithString(str, str, float, size, texthalignment, textvalignment)", "contents": "initWithString(str, str, float, size, texthalignment, textvalignment)" },
{ "trigger": "cc.LabelTTF.setFontFillColor(color3b, bool)", "contents": "setFontFillColor(color3b, bool)" },
{ "trigger": "cc.LabelTTF.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "cc.LabelTTF.enableStroke(color3b, float, bool)", "contents": "enableStroke(color3b, float, bool)" },
{ "trigger": "cc.LabelTTF.getDimensions()", "contents": "getDimensions()" },
{ "trigger": "cc.LabelTTF.setVerticalAlignment(textvalignment)", "contents": "setVerticalAlignment(textvalignment)" },
{ "trigger": "cc.LabelTTF.setFontSize(float)", "contents": "setFontSize(float)" },
{ "trigger": "cc.LabelTTF.getVerticalAlignment()", "contents": "getVerticalAlignment()" },
{ "trigger": "cc.LabelTTF.getTextDefinition()", "contents": "getTextDefinition()" },
{ "trigger": "cc.LabelTTF.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "cc.LabelTTF.getFontName()", "contents": "getFontName()" },
{ "trigger": "cc.LabelTTF.setHorizontalAlignment(texthalignment)", "contents": "setHorizontalAlignment(texthalignment)" },
{ "trigger": "cc.LabelTTF.disableShadow()", "contents": "disableShadow()" },
{ "trigger": "cc.LabelTTF.disableStroke()", "contents": "disableStroke()" },
{ "trigger": "cc.LabelTTF.create(str, str, float, size, texthalignment, textvalignment)", "contents": "create(str, str, float, size, texthalignment, textvalignment)" },
{ "trigger": "cc.LabelTTF.createWithFontDefinition(str, fontdefinition)", "contents": "createWithFontDefinition(str, fontdefinition)" },
{ "trigger": "cc.LabelTTF.LabelTTF()", "contents": "LabelTTF()" },
{ "trigger": "cc.SpriteBatchNode.appendChild(sprite)", "contents": "appendChild(sprite)" },
{ "trigger": "cc.SpriteBatchNode.addSpriteWithoutQuad(sprite, int, int)", "contents": "addSpriteWithoutQuad(sprite, int, int)" },
{ "trigger": "cc.SpriteBatchNode.reorderBatch(bool)", "contents": "reorderBatch(bool)" },
{ "trigger": "cc.SpriteBatchNode.initWithTexture(texture2d, long)", "contents": "initWithTexture(texture2d, long)" },
{ "trigger": "cc.SpriteBatchNode.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "cc.SpriteBatchNode.lowestAtlasIndexInChild(sprite)", "contents": "lowestAtlasIndexInChild(sprite)" },
{ "trigger": "cc.SpriteBatchNode.atlasIndexForChild(sprite, int)", "contents": "atlasIndexForChild(sprite, int)" },
{ "trigger": "cc.SpriteBatchNode.setTextureAtlas(textureatlas)", "contents": "setTextureAtlas(textureatlas)" },
{ "trigger": "cc.SpriteBatchNode.initWithFile(str, long)", "contents": "initWithFile(str, long)" },
{ "trigger": "cc.SpriteBatchNode.getTexture()", "contents": "getTexture()" },
{ "trigger": "cc.SpriteBatchNode.increaseAtlasCapacity()", "contents": "increaseAtlasCapacity()" },
{ "trigger": "cc.SpriteBatchNode.getTextureAtlas()", "contents": "getTextureAtlas()" },
{ "trigger": "cc.SpriteBatchNode.insertQuadFromSprite(sprite, long)", "contents": "insertQuadFromSprite(sprite, long)" },
{ "trigger": "cc.SpriteBatchNode.setTexture(texture2d)", "contents": "setTexture(texture2d)" },
{ "trigger": "cc.SpriteBatchNode.rebuildIndexInOrder(sprite, long)", "contents": "rebuildIndexInOrder(sprite, long)" },
{ "trigger": "cc.SpriteBatchNode.highestAtlasIndexInChild(sprite)", "contents": "highestAtlasIndexInChild(sprite)" },
{ "trigger": "cc.SpriteBatchNode.removeChildAtIndex(long, bool)", "contents": "removeChildAtIndex(long, bool)" },
{ "trigger": "cc.SpriteBatchNode.removeSpriteFromAtlas(sprite)", "contents": "removeSpriteFromAtlas(sprite)" },
{ "trigger": "cc.SpriteBatchNode.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "cc.SpriteBatchNode.create(str, long)", "contents": "create(str, long)" },
{ "trigger": "cc.SpriteBatchNode.createWithTexture(texture2d, long)", "contents": "createWithTexture(texture2d, long)" },
{ "trigger": "cc.SpriteBatchNode.SpriteBatchNode()", "contents": "SpriteBatchNode()" },
{ "trigger": "cc.Label.isClipMarginEnabled()", "contents": "isClipMarginEnabled()" },
{ "trigger": "cc.Label.enableShadow()", "contents": "enableShadow()" },
{ "trigger": "cc.Label.setDimensions(float, float)", "contents": "setDimensions(float, float)" },
{ "trigger": "cc.Label.getString()", "contents": "getString()" },
{ "trigger": "cc.Label.getHeight()", "contents": "getHeight()" },
{ "trigger": "cc.Label.disableEffect(labeleffect)", "contents": "disableEffect(labeleffect)" },
{ "trigger": "cc.Label.getTextColor()", "contents": "getTextColor()" },
{ "trigger": "cc.Label.setWidth(float)", "contents": "setWidth(float)" },
{ "trigger": "cc.Label.getMaxLineWidth()", "contents": "getMaxLineWidth()" },
{ "trigger": "cc.Label.getHorizontalAlignment()", "contents": "getHorizontalAlignment()" },
{ "trigger": "cc.Label.setClipMarginEnabled(bool)", "contents": "setClipMarginEnabled(bool)" },
{ "trigger": "cc.Label.setString(str)", "contents": "setString(str)" },
{ "trigger": "cc.Label.setSystemFontName(str)", "contents": "setSystemFontName(str)" },
{ "trigger": "cc.Label.setBMFontFilePath(str, vec2)", "contents": "setBMFontFilePath(str, vec2)" },
{ "trigger": "cc.Label.setLineHeight(float)", "contents": "setLineHeight(float)" },
{ "trigger": "cc.Label.setSystemFontSize(float)", "contents": "setSystemFontSize(float)" },
{ "trigger": "cc.Label.updateContent()", "contents": "updateContent()" },
{ "trigger": "cc.Label.getStringLength()", "contents": "getStringLength()" },
{ "trigger": "cc.Label.setLineBreakWithoutSpace(bool)", "contents": "setLineBreakWithoutSpace(bool)" },
{ "trigger": "cc.Label.getStringNumLines()", "contents": "getStringNumLines()" },
{ "trigger": "cc.Label.enableOutline(color4b, int)", "contents": "enableOutline(color4b, int)" },
{ "trigger": "cc.Label.getAdditionalKerning()", "contents": "getAdditionalKerning()" },
{ "trigger": "cc.Label.setCharMap(str, int, int, int)", "contents": "setCharMap(str, int, int, int)" },
{ "trigger": "cc.Label.getDimensions()", "contents": "getDimensions()" },
{ "trigger": "cc.Label.setMaxLineWidth(float)", "contents": "setMaxLineWidth(float)" },
{ "trigger": "cc.Label.getSystemFontName()", "contents": "getSystemFontName()" },
{ "trigger": "cc.Label.setVerticalAlignment(textvalignment)", "contents": "setVerticalAlignment(textvalignment)" },
{ "trigger": "cc.Label.getLineHeight()", "contents": "getLineHeight()" },
{ "trigger": "cc.Label.getTTFConfig()", "contents": "getTTFConfig()" },
{ "trigger": "cc.Label.getVerticalAlignment()", "contents": "getVerticalAlignment()" },
{ "trigger": "cc.Label.setTextColor(color4b)", "contents": "setTextColor(color4b)" },
{ "trigger": "cc.Label.setHeight(float)", "contents": "setHeight(float)" },
{ "trigger": "cc.Label.getWidth()", "contents": "getWidth()" },
{ "trigger": "cc.Label.enableGlow(color4b)", "contents": "enableGlow(color4b)" },
{ "trigger": "cc.Label.getLetter(int)", "contents": "getLetter(int)" },
{ "trigger": "cc.Label.setAdditionalKerning(float)", "contents": "setAdditionalKerning(float)" },
{ "trigger": "cc.Label.getSystemFontSize()", "contents": "getSystemFontSize()" },
{ "trigger": "cc.Label.getTextAlignment()", "contents": "getTextAlignment()" },
{ "trigger": "cc.Label.getBMFontFilePath()", "contents": "getBMFontFilePath()" },
{ "trigger": "cc.Label.setHorizontalAlignment(texthalignment)", "contents": "setHorizontalAlignment(texthalignment)" },
{ "trigger": "cc.Label.setAlignment(texthalignment, textvalignment)", "contents": "setAlignment(texthalignment, textvalignment)" },
{ "trigger": "cc.Label.requestSystemFontRefresh()", "contents": "requestSystemFontRefresh()" },
{ "trigger": "cc.Label.createWithBMFont(str, str, texthalignment, int, vec2)", "contents": "createWithBMFont(str, str, texthalignment, int, vec2)" },
{ "trigger": "cc.Label.create()", "contents": "create()" },
{ "trigger": "cc.Label.createWithCharMap(str, int, int, int)", "contents": "createWithCharMap(str, int, int, int)" },
{ "trigger": "cc.Label.createWithSystemFont(str, str, float, size, texthalignment, textvalignment)", "contents": "createWithSystemFont(str, str, float, size, texthalignment, textvalignment)" },
{ "trigger": "cc.Label.Label()", "contents": "Label()" },
{ "trigger": "cc.LabelBMFont.setLineBreakWithoutSpace(bool)", "contents": "setLineBreakWithoutSpace(bool)" },
{ "trigger": "cc.LabelBMFont.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "cc.LabelBMFont.getLetter(int)", "contents": "getLetter(int)" },
{ "trigger": "cc.LabelBMFont.getString()", "contents": "getString()" },
{ "trigger": "cc.LabelBMFont.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "cc.LabelBMFont.setString(str)", "contents": "setString(str)" },
{ "trigger": "cc.LabelBMFont.initWithString(str, str, float, texthalignment, vec2)", "contents": "initWithString(str, str, float, texthalignment, vec2)" },
{ "trigger": "cc.LabelBMFont.getFntFile()", "contents": "getFntFile()" },
{ "trigger": "cc.LabelBMFont.setFntFile(str, vec2)", "contents": "setFntFile(str, vec2)" },
{ "trigger": "cc.LabelBMFont.setAlignment(texthalignment)", "contents": "setAlignment(texthalignment)" },
{ "trigger": "cc.LabelBMFont.setWidth(float)", "contents": "setWidth(float)" },
{ "trigger": "cc.LabelBMFont.create(str, str, float, texthalignment, vec2)", "contents": "create(str, str, float, texthalignment, vec2)" },
{ "trigger": "cc.LabelBMFont.LabelBMFont()", "contents": "LabelBMFont()" },
{ "trigger": "cc.Layer.create()", "contents": "create()" },
{ "trigger": "cc.Layer.Layer()", "contents": "Layer()" },
{ "trigger": "cc.__LayerRGBA.create()", "contents": "create()" },
{ "trigger": "cc.__LayerRGBA.__LayerRGBA()", "contents": "__LayerRGBA()" },
{ "trigger": "cc.LayerColor.changeWidthAndHeight(float, float)", "contents": "changeWidthAndHeight(float, float)" },
{ "trigger": "cc.LayerColor.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "cc.LayerColor.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "cc.LayerColor.changeWidth(float)", "contents": "changeWidth(float)" },
{ "trigger": "cc.LayerColor.initWithColor(color4b, float, float)", "contents": "initWithColor(color4b, float, float)" },
{ "trigger": "cc.LayerColor.changeHeight(float)", "contents": "changeHeight(float)" },
{ "trigger": "cc.LayerColor.create(color4b, float, float)", "contents": "create(color4b, float, float)" },
{ "trigger": "cc.LayerColor.LayerColor()", "contents": "LayerColor()" },
{ "trigger": "cc.LayerGradient.getStartColor()", "contents": "getStartColor()" },
{ "trigger": "cc.LayerGradient.isCompressedInterpolation()", "contents": "isCompressedInterpolation()" },
{ "trigger": "cc.LayerGradient.getStartOpacity()", "contents": "getStartOpacity()" },
{ "trigger": "cc.LayerGradient.setVector(vec2)", "contents": "setVector(vec2)" },
{ "trigger": "cc.LayerGradient.setStartOpacity(char)", "contents": "setStartOpacity(char)" },
{ "trigger": "cc.LayerGradient.setCompressedInterpolation(bool)", "contents": "setCompressedInterpolation(bool)" },
{ "trigger": "cc.LayerGradient.setEndOpacity(char)", "contents": "setEndOpacity(char)" },
{ "trigger": "cc.LayerGradient.getVector()", "contents": "getVector()" },
{ "trigger": "cc.LayerGradient.setEndColor(color3b)", "contents": "setEndColor(color3b)" },
{ "trigger": "cc.LayerGradient.initWithColor(color4b, color4b, vec2)", "contents": "initWithColor(color4b, color4b, vec2)" },
{ "trigger": "cc.LayerGradient.getEndColor()", "contents": "getEndColor()" },
{ "trigger": "cc.LayerGradient.getEndOpacity()", "contents": "getEndOpacity()" },
{ "trigger": "cc.LayerGradient.setStartColor(color3b)", "contents": "setStartColor(color3b)" },
{ "trigger": "cc.LayerGradient.create(color4b, color4b, vec2)", "contents": "create(color4b, color4b, vec2)" },
{ "trigger": "cc.LayerGradient.LayerGradient()", "contents": "LayerGradient()" },
{ "trigger": "cc.LayerMultiplex.initWithArray(array)", "contents": "initWithArray(array)" },
{ "trigger": "cc.LayerMultiplex.switchToAndReleaseMe(int)", "contents": "switchToAndReleaseMe(int)" },
{ "trigger": "cc.LayerMultiplex.addLayer(layer)", "contents": "addLayer(layer)" },
{ "trigger": "cc.LayerMultiplex.switchTo(int)", "contents": "switchTo(int)" },
{ "trigger": "cc.LayerMultiplex.LayerMultiplex()", "contents": "LayerMultiplex()" },
{ "trigger": "cc.TransitionEaseScene.easeActionWithAction(actioninterval)", "contents": "easeActionWithAction(actioninterval)" },
{ "trigger": "cc.TransitionScene.getInScene()", "contents": "getInScene()" },
{ "trigger": "cc.TransitionScene.finish()", "contents": "finish()" },
{ "trigger": "cc.TransitionScene.initWithDuration(float, scene)", "contents": "initWithDuration(float, scene)" },
{ "trigger": "cc.TransitionScene.getDuration()", "contents": "getDuration()" },
{ "trigger": "cc.TransitionScene.hideOutShowIn()", "contents": "hideOutShowIn()" },
{ "trigger": "cc.TransitionScene.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionScene.TransitionScene()", "contents": "TransitionScene()" },
{ "trigger": "cc.TransitionSceneOriented.initWithDuration(float, scene, orientation)", "contents": "initWithDuration(float, scene, orientation)" },
{ "trigger": "cc.TransitionSceneOriented.create(float, scene, orientation)", "contents": "create(float, scene, orientation)" },
{ "trigger": "cc.TransitionSceneOriented.TransitionSceneOriented()", "contents": "TransitionSceneOriented()" },
{ "trigger": "cc.TransitionRotoZoom.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionRotoZoom.TransitionRotoZoom()", "contents": "TransitionRotoZoom()" },
{ "trigger": "cc.TransitionJumpZoom.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionJumpZoom.TransitionJumpZoom()", "contents": "TransitionJumpZoom()" },
{ "trigger": "cc.TransitionMoveInL.action()", "contents": "action()" },
{ "trigger": "cc.TransitionMoveInL.easeActionWithAction(actioninterval)", "contents": "easeActionWithAction(actioninterval)" },
{ "trigger": "cc.TransitionMoveInL.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionMoveInL.TransitionMoveInL()", "contents": "TransitionMoveInL()" },
{ "trigger": "cc.TransitionMoveInR.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionMoveInR.TransitionMoveInR()", "contents": "TransitionMoveInR()" },
{ "trigger": "cc.TransitionMoveInT.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionMoveInT.TransitionMoveInT()", "contents": "TransitionMoveInT()" },
{ "trigger": "cc.TransitionMoveInB.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionMoveInB.TransitionMoveInB()", "contents": "TransitionMoveInB()" },
{ "trigger": "cc.TransitionSlideInL.action()", "contents": "action()" },
{ "trigger": "cc.TransitionSlideInL.easeActionWithAction(actioninterval)", "contents": "easeActionWithAction(actioninterval)" },
{ "trigger": "cc.TransitionSlideInL.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionSlideInL.TransitionSlideInL()", "contents": "TransitionSlideInL()" },
{ "trigger": "cc.TransitionSlideInR.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionSlideInR.TransitionSlideInR()", "contents": "TransitionSlideInR()" },
{ "trigger": "cc.TransitionSlideInB.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionSlideInB.TransitionSlideInB()", "contents": "TransitionSlideInB()" },
{ "trigger": "cc.TransitionSlideInT.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionSlideInT.TransitionSlideInT()", "contents": "TransitionSlideInT()" },
{ "trigger": "cc.TransitionShrinkGrow.easeActionWithAction(actioninterval)", "contents": "easeActionWithAction(actioninterval)" },
{ "trigger": "cc.TransitionShrinkGrow.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionShrinkGrow.TransitionShrinkGrow()", "contents": "TransitionShrinkGrow()" },
{ "trigger": "cc.TransitionFlipX.create(float, scene, orientation)", "contents": "create(float, scene, orientation)" },
{ "trigger": "cc.TransitionFlipX.TransitionFlipX()", "contents": "TransitionFlipX()" },
{ "trigger": "cc.TransitionFlipY.create(float, scene, orientation)", "contents": "create(float, scene, orientation)" },
{ "trigger": "cc.TransitionFlipY.TransitionFlipY()", "contents": "TransitionFlipY()" },
{ "trigger": "cc.TransitionFlipAngular.create(float, scene, orientation)", "contents": "create(float, scene, orientation)" },
{ "trigger": "cc.TransitionFlipAngular.TransitionFlipAngular()", "contents": "TransitionFlipAngular()" },
{ "trigger": "cc.TransitionZoomFlipX.create(float, scene, orientation)", "contents": "create(float, scene, orientation)" },
{ "trigger": "cc.TransitionZoomFlipX.TransitionZoomFlipX()", "contents": "TransitionZoomFlipX()" },
{ "trigger": "cc.TransitionZoomFlipY.create(float, scene, orientation)", "contents": "create(float, scene, orientation)" },
{ "trigger": "cc.TransitionZoomFlipY.TransitionZoomFlipY()", "contents": "TransitionZoomFlipY()" },
{ "trigger": "cc.TransitionZoomFlipAngular.create(float, scene, orientation)", "contents": "create(float, scene, orientation)" },
{ "trigger": "cc.TransitionZoomFlipAngular.TransitionZoomFlipAngular()", "contents": "TransitionZoomFlipAngular()" },
{ "trigger": "cc.TransitionFade.initWithDuration(float, scene, color3b)", "contents": "initWithDuration(float, scene, color3b)" },
{ "trigger": "cc.TransitionFade.create(float, scene, color3b)", "contents": "create(float, scene, color3b)" },
{ "trigger": "cc.TransitionFade.TransitionFade()", "contents": "TransitionFade()" },
{ "trigger": "cc.TransitionCrossFade.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionCrossFade.TransitionCrossFade()", "contents": "TransitionCrossFade()" },
{ "trigger": "cc.TransitionTurnOffTiles.easeActionWithAction(actioninterval)", "contents": "easeActionWithAction(actioninterval)" },
{ "trigger": "cc.TransitionTurnOffTiles.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionTurnOffTiles.TransitionTurnOffTiles()", "contents": "TransitionTurnOffTiles()" },
{ "trigger": "cc.TransitionSplitCols.action()", "contents": "action()" },
{ "trigger": "cc.TransitionSplitCols.easeActionWithAction(actioninterval)", "contents": "easeActionWithAction(actioninterval)" },
{ "trigger": "cc.TransitionSplitCols.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionSplitCols.TransitionSplitCols()", "contents": "TransitionSplitCols()" },
{ "trigger": "cc.TransitionSplitRows.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionSplitRows.TransitionSplitRows()", "contents": "TransitionSplitRows()" },
{ "trigger": "cc.TransitionFadeTR.easeActionWithAction(actioninterval)", "contents": "easeActionWithAction(actioninterval)" },
{ "trigger": "cc.TransitionFadeTR.actionWithSize(size)", "contents": "actionWithSize(size)" },
{ "trigger": "cc.TransitionFadeTR.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionFadeTR.TransitionFadeTR()", "contents": "TransitionFadeTR()" },
{ "trigger": "cc.TransitionFadeBL.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionFadeBL.TransitionFadeBL()", "contents": "TransitionFadeBL()" },
{ "trigger": "cc.TransitionFadeUp.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionFadeUp.TransitionFadeUp()", "contents": "TransitionFadeUp()" },
{ "trigger": "cc.TransitionFadeDown.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionFadeDown.TransitionFadeDown()", "contents": "TransitionFadeDown()" },
{ "trigger": "cc.TransitionPageTurn.actionWithSize(size)", "contents": "actionWithSize(size)" },
{ "trigger": "cc.TransitionPageTurn.initWithDuration(float, scene, bool)", "contents": "initWithDuration(float, scene, bool)" },
{ "trigger": "cc.TransitionPageTurn.create(float, scene, bool)", "contents": "create(float, scene, bool)" },
{ "trigger": "cc.TransitionPageTurn.TransitionPageTurn()", "contents": "TransitionPageTurn()" },
{ "trigger": "cc.TransitionProgress.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionProgress.TransitionProgress()", "contents": "TransitionProgress()" },
{ "trigger": "cc.TransitionProgressRadialCCW.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionProgressRadialCCW.TransitionProgressRadialCCW()", "contents": "TransitionProgressRadialCCW()" },
{ "trigger": "cc.TransitionProgressRadialCW.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionProgressRadialCW.TransitionProgressRadialCW()", "contents": "TransitionProgressRadialCW()" },
{ "trigger": "cc.TransitionProgressHorizontal.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionProgressHorizontal.TransitionProgressHorizontal()", "contents": "TransitionProgressHorizontal()" },
{ "trigger": "cc.TransitionProgressVertical.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionProgressVertical.TransitionProgressVertical()", "contents": "TransitionProgressVertical()" },
{ "trigger": "cc.TransitionProgressInOut.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionProgressInOut.TransitionProgressInOut()", "contents": "TransitionProgressInOut()" },
{ "trigger": "cc.TransitionProgressOutIn.create(float, scene)", "contents": "create(float, scene)" },
{ "trigger": "cc.TransitionProgressOutIn.TransitionProgressOutIn()", "contents": "TransitionProgressOutIn()" },
{ "trigger": "cc.MenuItem.setEnabled(bool)", "contents": "setEnabled(bool)" },
{ "trigger": "cc.MenuItem.activate()", "contents": "activate()" },
{ "trigger": "cc.MenuItem.initWithCallback(func)", "contents": "initWithCallback(func)" },
{ "trigger": "cc.MenuItem.isEnabled()", "contents": "isEnabled()" },
{ "trigger": "cc.MenuItem.selected()", "contents": "selected()" },
{ "trigger": "cc.MenuItem.isSelected()", "contents": "isSelected()" },
{ "trigger": "cc.MenuItem.unselected()", "contents": "unselected()" },
{ "trigger": "cc.MenuItem.rect()", "contents": "rect()" },
{ "trigger": "cc.MenuItem.MenuItem()", "contents": "MenuItem()" },
{ "trigger": "cc.MenuItemLabel.setLabel(node)", "contents": "setLabel(node)" },
{ "trigger": "cc.MenuItemLabel.getDisabledColor()", "contents": "getDisabledColor()" },
{ "trigger": "cc.MenuItemLabel.setString(str)", "contents": "setString(str)" },
{ "trigger": "cc.MenuItemLabel.initWithLabel(node, func)", "contents": "initWithLabel(node, func)" },
{ "trigger": "cc.MenuItemLabel.setDisabledColor(color3b)", "contents": "setDisabledColor(color3b)" },
{ "trigger": "cc.MenuItemLabel.getLabel()", "contents": "getLabel()" },
{ "trigger": "cc.MenuItemLabel.MenuItemLabel()", "contents": "MenuItemLabel()" },
{ "trigger": "cc.MenuItemAtlasFont.initWithString(str, str, int, int, char, func)", "contents": "initWithString(str, str, int, int, char, func)" },
{ "trigger": "cc.MenuItemAtlasFont.MenuItemAtlasFont()", "contents": "MenuItemAtlasFont()" },
{ "trigger": "cc.MenuItemFont.setFontNameObj(str)", "contents": "setFontNameObj(str)" },
{ "trigger": "cc.MenuItemFont.getFontSizeObj()", "contents": "getFontSizeObj()" },
{ "trigger": "cc.MenuItemFont.setFontSizeObj(int)", "contents": "setFontSizeObj(int)" },
{ "trigger": "cc.MenuItemFont.initWithString(str, func)", "contents": "initWithString(str, func)" },
{ "trigger": "cc.MenuItemFont.getFontNameObj()", "contents": "getFontNameObj()" },
{ "trigger": "cc.MenuItemFont.setFontName(str)", "contents": "setFontName(str)" },
{ "trigger": "cc.MenuItemFont.getFontSize()", "contents": "getFontSize()" },
{ "trigger": "cc.MenuItemFont.getFontName()", "contents": "getFontName()" },
{ "trigger": "cc.MenuItemFont.setFontSize(int)", "contents": "setFontSize(int)" },
{ "trigger": "cc.MenuItemFont.MenuItemFont()", "contents": "MenuItemFont()" },
{ "trigger": "cc.MenuItemSprite.setEnabled(bool)", "contents": "setEnabled(bool)" },
{ "trigger": "cc.MenuItemSprite.selected()", "contents": "selected()" },
{ "trigger": "cc.MenuItemSprite.setNormalImage(node)", "contents": "setNormalImage(node)" },
{ "trigger": "cc.MenuItemSprite.setDisabledImage(node)", "contents": "setDisabledImage(node)" },
{ "trigger": "cc.MenuItemSprite.initWithNormalSprite(node, node, node, func)", "contents": "initWithNormalSprite(node, node, node, func)" },
{ "trigger": "cc.MenuItemSprite.setSelectedImage(node)", "contents": "setSelectedImage(node)" },
{ "trigger": "cc.MenuItemSprite.getDisabledImage()", "contents": "getDisabledImage()" },
{ "trigger": "cc.MenuItemSprite.getSelectedImage()", "contents": "getSelectedImage()" },
{ "trigger": "cc.MenuItemSprite.getNormalImage()", "contents": "getNormalImage()" },
{ "trigger": "cc.MenuItemSprite.unselected()", "contents": "unselected()" },
{ "trigger": "cc.MenuItemSprite.MenuItemSprite()", "contents": "MenuItemSprite()" },
{ "trigger": "cc.MenuItemImage.setDisabledSpriteFrame(spriteframe)", "contents": "setDisabledSpriteFrame(spriteframe)" },
{ "trigger": "cc.MenuItemImage.setSelectedSpriteFrame(spriteframe)", "contents": "setSelectedSpriteFrame(spriteframe)" },
{ "trigger": "cc.MenuItemImage.setNormalSpriteFrame(spriteframe)", "contents": "setNormalSpriteFrame(spriteframe)" },
{ "trigger": "cc.MenuItemImage.init()", "contents": "init()" },
{ "trigger": "cc.MenuItemImage.initWithNormalImage(str, str, str, func)", "contents": "initWithNormalImage(str, str, str, func)" },
{ "trigger": "cc.MenuItemImage.MenuItemImage()", "contents": "MenuItemImage()" },
{ "trigger": "cc.MenuItemToggle.setSubItems(array)", "contents": "setSubItems(array)" },
{ "trigger": "cc.MenuItemToggle.initWithItem(menuitem)", "contents": "initWithItem(menuitem)" },
{ "trigger": "cc.MenuItemToggle.getSelectedIndex()", "contents": "getSelectedIndex()" },
{ "trigger": "cc.MenuItemToggle.addSubItem(menuitem)", "contents": "addSubItem(menuitem)" },
{ "trigger": "cc.MenuItemToggle.getSelectedItem()", "contents": "getSelectedItem()" },
{ "trigger": "cc.MenuItemToggle.setSelectedIndex(int)", "contents": "setSelectedIndex(int)" },
{ "trigger": "cc.MenuItemToggle.MenuItemToggle()", "contents": "MenuItemToggle()" },
{ "trigger": "cc.Menu.initWithArray(array)", "contents": "initWithArray(array)" },
{ "trigger": "cc.Menu.setEnabled(bool)", "contents": "setEnabled(bool)" },
{ "trigger": "cc.Menu.alignItemsVertically()", "contents": "alignItemsVertically()" },
{ "trigger": "cc.Menu.isEnabled()", "contents": "isEnabled()" },
{ "trigger": "cc.Menu.alignItemsHorizontallyWithPadding(float)", "contents": "alignItemsHorizontallyWithPadding(float)" },
{ "trigger": "cc.Menu.alignItemsVerticallyWithPadding(float)", "contents": "alignItemsVerticallyWithPadding(float)" },
{ "trigger": "cc.Menu.alignItemsHorizontally()", "contents": "alignItemsHorizontally()" },
{ "trigger": "cc.Menu.Menu()", "contents": "Menu()" },
{ "trigger": "cc.ClippingNode.hasContent()", "contents": "hasContent()" },
{ "trigger": "cc.ClippingNode.setInverted(bool)", "contents": "setInverted(bool)" },
{ "trigger": "cc.ClippingNode.setStencil(node)", "contents": "setStencil(node)" },
{ "trigger": "cc.ClippingNode.getAlphaThreshold()", "contents": "getAlphaThreshold()" },
{ "trigger": "cc.ClippingNode.getStencil()", "contents": "getStencil()" },
{ "trigger": "cc.ClippingNode.setAlphaThreshold(float)", "contents": "setAlphaThreshold(float)" },
{ "trigger": "cc.ClippingNode.isInverted()", "contents": "isInverted()" },
{ "trigger": "cc.ClippingNode.create(node)", "contents": "create(node)" },
{ "trigger": "cc.ClippingNode.ClippingNode()", "contents": "ClippingNode()" },
{ "trigger": "cc.MotionStreak.reset()", "contents": "reset()" },
{ "trigger": "cc.MotionStreak.setTexture(texture2d)", "contents": "setTexture(texture2d)" },
{ "trigger": "cc.MotionStreak.getTexture()", "contents": "getTexture()" },
{ "trigger": "cc.MotionStreak.tintWithColor(color3b)", "contents": "tintWithColor(color3b)" },
{ "trigger": "cc.MotionStreak.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "cc.MotionStreak.setStartingPositionInitialized(bool)", "contents": "setStartingPositionInitialized(bool)" },
{ "trigger": "cc.MotionStreak.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "cc.MotionStreak.isStartingPositionInitialized()", "contents": "isStartingPositionInitialized()" },
{ "trigger": "cc.MotionStreak.isFastMode()", "contents": "isFastMode()" },
{ "trigger": "cc.MotionStreak.getStroke()", "contents": "getStroke()" },
{ "trigger": "cc.MotionStreak.initWithFade(float, float, float, color3b, str)", "contents": "initWithFade(float, float, float, color3b, str)" },
{ "trigger": "cc.MotionStreak.setFastMode(bool)", "contents": "setFastMode(bool)" },
{ "trigger": "cc.MotionStreak.setStroke(float)", "contents": "setStroke(float)" },
{ "trigger": "cc.MotionStreak.create(float, float, float, color3b, str)", "contents": "create(float, float, float, color3b, str)" },
{ "trigger": "cc.MotionStreak.MotionStreak()", "contents": "MotionStreak()" },
{ "trigger": "cc.ProgressTimer.initWithSprite(sprite)", "contents": "initWithSprite(sprite)" },
{ "trigger": "cc.ProgressTimer.isReverseDirection()", "contents": "isReverseDirection()" },
{ "trigger": "cc.ProgressTimer.setBarChangeRate(vec2)", "contents": "setBarChangeRate(vec2)" },
{ "trigger": "cc.ProgressTimer.getPercentage()", "contents": "getPercentage()" },
{ "trigger": "cc.ProgressTimer.setSprite(sprite)", "contents": "setSprite(sprite)" },
{ "trigger": "cc.ProgressTimer.getType()", "contents": "getType()" },
{ "trigger": "cc.ProgressTimer.getSprite()", "contents": "getSprite()" },
{ "trigger": "cc.ProgressTimer.setMidpoint(vec2)", "contents": "setMidpoint(vec2)" },
{ "trigger": "cc.ProgressTimer.getBarChangeRate()", "contents": "getBarChangeRate()" },
{ "trigger": "cc.ProgressTimer.setReverseDirection(bool)", "contents": "setReverseDirection(bool)" },
{ "trigger": "cc.ProgressTimer.getMidpoint()", "contents": "getMidpoint()" },
{ "trigger": "cc.ProgressTimer.setPercentage(float)", "contents": "setPercentage(float)" },
{ "trigger": "cc.ProgressTimer.setType(type)", "contents": "setType(type)" },
{ "trigger": "cc.ProgressTimer.create(sprite)", "contents": "create(sprite)" },
{ "trigger": "cc.ProgressTimer.ProgressTimer()", "contents": "ProgressTimer()" },
{ "trigger": "cc.Sprite.setSpriteFrame(str)", "contents": "setSpriteFrame(str)" },
{ "trigger": "cc.Sprite.setTexture(str)", "contents": "setTexture(str)" },
{ "trigger": "cc.Sprite.getTexture()", "contents": "getTexture()" },
{ "trigger": "cc.Sprite.setFlippedY(bool)", "contents": "setFlippedY(bool)" },
{ "trigger": "cc.Sprite.setFlippedX(bool)", "contents": "setFlippedX(bool)" },
{ "trigger": "cc.Sprite.setRotationSkewX(float)", "contents": "setRotationSkewX(float)" },
{ "trigger": "cc.Sprite.setRotationSkewY(float)", "contents": "setRotationSkewY(float)" },
{ "trigger": "cc.Sprite.initWithTexture(texture2d, rect, bool)", "contents": "initWithTexture(texture2d, rect, bool)" },
{ "trigger": "cc.Sprite.getBatchNode()", "contents": "getBatchNode()" },
{ "trigger": "cc.Sprite.getOffsetPosition()", "contents": "getOffsetPosition()" },
{ "trigger": "cc.Sprite.removeAllChildrenWithCleanup(bool)", "contents": "removeAllChildrenWithCleanup(bool)" },
{ "trigger": "cc.Sprite.setTextureRect(rect, bool, size)", "contents": "setTextureRect(rect, bool, size)" },
{ "trigger": "cc.Sprite.initWithSpriteFrameName(str)", "contents": "initWithSpriteFrameName(str)" },
{ "trigger": "cc.Sprite.isFrameDisplayed(spriteframe)", "contents": "isFrameDisplayed(spriteframe)" },
{ "trigger": "cc.Sprite.getAtlasIndex()", "contents": "getAtlasIndex()" },
{ "trigger": "cc.Sprite.setBatchNode(spritebatchnode)", "contents": "setBatchNode(spritebatchnode)" },
{ "trigger": "cc.Sprite.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "cc.Sprite.setDisplayFrameWithAnimationName(str, long)", "contents": "setDisplayFrameWithAnimationName(str, long)" },
{ "trigger": "cc.Sprite.setTextureAtlas(textureatlas)", "contents": "setTextureAtlas(textureatlas)" },
{ "trigger": "cc.Sprite.getSpriteFrame()", "contents": "getSpriteFrame()" },
{ "trigger": "cc.Sprite.isDirty()", "contents": "isDirty()" },
{ "trigger": "cc.Sprite.setAtlasIndex(long)", "contents": "setAtlasIndex(long)" },
{ "trigger": "cc.Sprite.setDirty(bool)", "contents": "setDirty(bool)" },
{ "trigger": "cc.Sprite.isTextureRectRotated()", "contents": "isTextureRectRotated()" },
{ "trigger": "cc.Sprite.getTextureRect()", "contents": "getTextureRect()" },
{ "trigger": "cc.Sprite.initWithFile(str, rect)", "contents": "initWithFile(str, rect)" },
{ "trigger": "cc.Sprite.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "cc.Sprite.getTextureAtlas()", "contents": "getTextureAtlas()" },
{ "trigger": "cc.Sprite.initWithSpriteFrame(spriteframe)", "contents": "initWithSpriteFrame(spriteframe)" },
{ "trigger": "cc.Sprite.isFlippedX()", "contents": "isFlippedX()" },
{ "trigger": "cc.Sprite.isFlippedY()", "contents": "isFlippedY()" },
{ "trigger": "cc.Sprite.setVertexRect(rect)", "contents": "setVertexRect(rect)" },
{ "trigger": "cc.Sprite.create(str, rect)", "contents": "create(str, rect)" },
{ "trigger": "cc.Sprite.createWithTexture(texture2d, rect, bool)", "contents": "createWithTexture(texture2d, rect, bool)" },
{ "trigger": "cc.Sprite.createWithSpriteFrameName(str)", "contents": "createWithSpriteFrameName(str)" },
{ "trigger": "cc.Sprite.createWithSpriteFrame(spriteframe)", "contents": "createWithSpriteFrame(spriteframe)" },
{ "trigger": "cc.Sprite.Sprite()", "contents": "Sprite()" },
{ "trigger": "cc.Image.hasPremultipliedAlpha()", "contents": "hasPremultipliedAlpha()" },
{ "trigger": "cc.Image.getDataLen()", "contents": "getDataLen()" },
{ "trigger": "cc.Image.saveToFile(str, bool)", "contents": "saveToFile(str, bool)" },
{ "trigger": "cc.Image.hasAlpha()", "contents": "hasAlpha()" },
{ "trigger": "cc.Image.isCompressed()", "contents": "isCompressed()" },
{ "trigger": "cc.Image.getHeight()", "contents": "getHeight()" },
{ "trigger": "cc.Image.initWithImageFile(str)", "contents": "initWithImageFile(str)" },
{ "trigger": "cc.Image.getWidth()", "contents": "getWidth()" },
{ "trigger": "cc.Image.getBitPerPixel()", "contents": "getBitPerPixel()" },
{ "trigger": "cc.Image.getFileType()", "contents": "getFileType()" },
{ "trigger": "cc.Image.getNumberOfMipmaps()", "contents": "getNumberOfMipmaps()" },
{ "trigger": "cc.Image.getRenderFormat()", "contents": "getRenderFormat()" },
{ "trigger": "cc.Image.getData()", "contents": "getData()" },
{ "trigger": "cc.Image.getMipmaps()", "contents": "getMipmaps()" },
{ "trigger": "cc.Image.initWithRawData(char, long, int, int, int, bool)", "contents": "initWithRawData(char, long, int, int, int, bool)" },
{ "trigger": "cc.Image.setPVRImagesHavePremultipliedAlpha(bool)", "contents": "setPVRImagesHavePremultipliedAlpha(bool)" },
{ "trigger": "cc.Image.Image()", "contents": "Image()" },
{ "trigger": "cc.RenderTexture.setVirtualViewport(vec2, rect, rect)", "contents": "setVirtualViewport(vec2, rect, rect)" },
{ "trigger": "cc.RenderTexture.clearStencil(int)", "contents": "clearStencil(int)" },
{ "trigger": "cc.RenderTexture.getClearDepth()", "contents": "getClearDepth()" },
{ "trigger": "cc.RenderTexture.getClearStencil()", "contents": "getClearStencil()" },
{ "trigger": "cc.RenderTexture.end()", "contents": "end()" },
{ "trigger": "cc.RenderTexture.setClearStencil(int)", "contents": "setClearStencil(int)" },
{ "trigger": "cc.RenderTexture.setSprite(sprite)", "contents": "setSprite(sprite)" },
{ "trigger": "cc.RenderTexture.getSprite()", "contents": "getSprite()" },
{ "trigger": "cc.RenderTexture.isAutoDraw()", "contents": "isAutoDraw()" },
{ "trigger": "cc.RenderTexture.setKeepMatrix(bool)", "contents": "setKeepMatrix(bool)" },
{ "trigger": "cc.RenderTexture.setClearFlags(int)", "contents": "setClearFlags(int)" },
{ "trigger": "cc.RenderTexture.begin()", "contents": "begin()" },
{ "trigger": "cc.RenderTexture.setAutoDraw(bool)", "contents": "setAutoDraw(bool)" },
{ "trigger": "cc.RenderTexture.setClearColor(color4f)", "contents": "setClearColor(color4f)" },
{ "trigger": "cc.RenderTexture.endToLua()", "contents": "endToLua()" },
{ "trigger": "cc.RenderTexture.beginWithClear(float, float, float, float, float, int)", "contents": "beginWithClear(float, float, float, float, float, int)" },
{ "trigger": "cc.RenderTexture.clearDepth(float)", "contents": "clearDepth(float)" },
{ "trigger": "cc.RenderTexture.getClearColor()", "contents": "getClearColor()" },
{ "trigger": "cc.RenderTexture.clear(float, float, float, float)", "contents": "clear(float, float, float, float)" },
{ "trigger": "cc.RenderTexture.getClearFlags()", "contents": "getClearFlags()" },
{ "trigger": "cc.RenderTexture.newImage()", "contents": "newImage()" },
{ "trigger": "cc.RenderTexture.setClearDepth(float)", "contents": "setClearDepth(float)" },
{ "trigger": "cc.RenderTexture.initWithWidthAndHeight(int, int, pixelformat, int)", "contents": "initWithWidthAndHeight(int, int, pixelformat, int)" },
{ "trigger": "cc.RenderTexture.create(int, int, pixelformat, int)", "contents": "create(int, int, pixelformat, int)" },
{ "trigger": "cc.RenderTexture.RenderTexture()", "contents": "RenderTexture()" },
{ "trigger": "cc.NodeGrid.setTarget(node)", "contents": "setTarget(node)" },
{ "trigger": "cc.NodeGrid.getGrid()", "contents": "getGrid()" },
{ "trigger": "cc.NodeGrid.create()", "contents": "create()" },
{ "trigger": "cc.NodeGrid.NodeGrid()", "contents": "NodeGrid()" },
{ "trigger": "cc.ParticleBatchNode.setTexture(texture2d)", "contents": "setTexture(texture2d)" },
{ "trigger": "cc.ParticleBatchNode.initWithTexture(texture2d, int)", "contents": "initWithTexture(texture2d, int)" },
{ "trigger": "cc.ParticleBatchNode.disableParticle(int)", "contents": "disableParticle(int)" },
{ "trigger": "cc.ParticleBatchNode.getTexture()", "contents": "getTexture()" },
{ "trigger": "cc.ParticleBatchNode.setTextureAtlas(textureatlas)", "contents": "setTextureAtlas(textureatlas)" },
{ "trigger": "cc.ParticleBatchNode.initWithFile(str, int)", "contents": "initWithFile(str, int)" },
{ "trigger": "cc.ParticleBatchNode.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "cc.ParticleBatchNode.removeAllChildrenWithCleanup(bool)", "contents": "removeAllChildrenWithCleanup(bool)" },
{ "trigger": "cc.ParticleBatchNode.getTextureAtlas()", "contents": "getTextureAtlas()" },
{ "trigger": "cc.ParticleBatchNode.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "cc.ParticleBatchNode.insertChild(particlesystem, int)", "contents": "insertChild(particlesystem, int)" },
{ "trigger": "cc.ParticleBatchNode.removeChildAtIndex(int, bool)", "contents": "removeChildAtIndex(int, bool)" },
{ "trigger": "cc.ParticleBatchNode.create(str, int)", "contents": "create(str, int)" },
{ "trigger": "cc.ParticleBatchNode.createWithTexture(texture2d, int)", "contents": "createWithTexture(texture2d, int)" },
{ "trigger": "cc.ParticleBatchNode.ParticleBatchNode()", "contents": "ParticleBatchNode()" },
{ "trigger": "cc.ParticleSystem.getStartSizeVar()", "contents": "getStartSizeVar()" },
{ "trigger": "cc.ParticleSystem.getTexture()", "contents": "getTexture()" },
{ "trigger": "cc.ParticleSystem.isFull()", "contents": "isFull()" },
{ "trigger": "cc.ParticleSystem.getBatchNode()", "contents": "getBatchNode()" },
{ "trigger": "cc.ParticleSystem.getStartColor()", "contents": "getStartColor()" },
{ "trigger": "cc.ParticleSystem.getPositionType()", "contents": "getPositionType()" },
{ "trigger": "cc.ParticleSystem.setPosVar(vec2)", "contents": "setPosVar(vec2)" },
{ "trigger": "cc.ParticleSystem.getEndSpin()", "contents": "getEndSpin()" },
{ "trigger": "cc.ParticleSystem.setRotatePerSecondVar(float)", "contents": "setRotatePerSecondVar(float)" },
{ "trigger": "cc.ParticleSystem.getStartSpinVar()", "contents": "getStartSpinVar()" },
{ "trigger": "cc.ParticleSystem.getRadialAccelVar()", "contents": "getRadialAccelVar()" },
{ "trigger": "cc.ParticleSystem.getEndSizeVar()", "contents": "getEndSizeVar()" },
{ "trigger": "cc.ParticleSystem.setTangentialAccel(float)", "contents": "setTangentialAccel(float)" },
{ "trigger": "cc.ParticleSystem.getRadialAccel()", "contents": "getRadialAccel()" },
{ "trigger": "cc.ParticleSystem.setStartRadius(float)", "contents": "setStartRadius(float)" },
{ "trigger": "cc.ParticleSystem.setRotatePerSecond(float)", "contents": "setRotatePerSecond(float)" },
{ "trigger": "cc.ParticleSystem.setEndSize(float)", "contents": "setEndSize(float)" },
{ "trigger": "cc.ParticleSystem.getGravity()", "contents": "getGravity()" },
{ "trigger": "cc.ParticleSystem.getTangentialAccel()", "contents": "getTangentialAccel()" },
{ "trigger": "cc.ParticleSystem.setEndRadius(float)", "contents": "setEndRadius(float)" },
{ "trigger": "cc.ParticleSystem.getSpeed()", "contents": "getSpeed()" },
{ "trigger": "cc.ParticleSystem.getAngle()", "contents": "getAngle()" },
{ "trigger": "cc.ParticleSystem.setEndColor(color4f)", "contents": "setEndColor(color4f)" },
{ "trigger": "cc.ParticleSystem.setStartSpin(float)", "contents": "setStartSpin(float)" },
{ "trigger": "cc.ParticleSystem.setDuration(float)", "contents": "setDuration(float)" },
{ "trigger": "cc.ParticleSystem.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSystem.setTexture(texture2d)", "contents": "setTexture(texture2d)" },
{ "trigger": "cc.ParticleSystem.getPosVar()", "contents": "getPosVar()" },
{ "trigger": "cc.ParticleSystem.updateWithNoTime()", "contents": "updateWithNoTime()" },
{ "trigger": "cc.ParticleSystem.isBlendAdditive()", "contents": "isBlendAdditive()" },
{ "trigger": "cc.ParticleSystem.getSpeedVar()", "contents": "getSpeedVar()" },
{ "trigger": "cc.ParticleSystem.setPositionType(positiontype)", "contents": "setPositionType(positiontype)" },
{ "trigger": "cc.ParticleSystem.stopSystem()", "contents": "stopSystem()" },
{ "trigger": "cc.ParticleSystem.getSourcePosition()", "contents": "getSourcePosition()" },
{ "trigger": "cc.ParticleSystem.setLifeVar(float)", "contents": "setLifeVar(float)" },
{ "trigger": "cc.ParticleSystem.setTotalParticles(int)", "contents": "setTotalParticles(int)" },
{ "trigger": "cc.ParticleSystem.setEndColorVar(color4f)", "contents": "setEndColorVar(color4f)" },
{ "trigger": "cc.ParticleSystem.updateQuadWithParticle(sparticle, vec2)", "contents": "updateQuadWithParticle(sparticle, vec2)" },
{ "trigger": "cc.ParticleSystem.getAtlasIndex()", "contents": "getAtlasIndex()" },
{ "trigger": "cc.ParticleSystem.getStartSize()", "contents": "getStartSize()" },
{ "trigger": "cc.ParticleSystem.setStartSpinVar(float)", "contents": "setStartSpinVar(float)" },
{ "trigger": "cc.ParticleSystem.resetSystem()", "contents": "resetSystem()" },
{ "trigger": "cc.ParticleSystem.setAtlasIndex(int)", "contents": "setAtlasIndex(int)" },
{ "trigger": "cc.ParticleSystem.setTangentialAccelVar(float)", "contents": "setTangentialAccelVar(float)" },
{ "trigger": "cc.ParticleSystem.setEndRadiusVar(float)", "contents": "setEndRadiusVar(float)" },
{ "trigger": "cc.ParticleSystem.getEndRadius()", "contents": "getEndRadius()" },
{ "trigger": "cc.ParticleSystem.isActive()", "contents": "isActive()" },
{ "trigger": "cc.ParticleSystem.setRadialAccelVar(float)", "contents": "setRadialAccelVar(float)" },
{ "trigger": "cc.ParticleSystem.setStartSize(float)", "contents": "setStartSize(float)" },
{ "trigger": "cc.ParticleSystem.setSpeed(float)", "contents": "setSpeed(float)" },
{ "trigger": "cc.ParticleSystem.getStartSpin()", "contents": "getStartSpin()" },
{ "trigger": "cc.ParticleSystem.getRotatePerSecond()", "contents": "getRotatePerSecond()" },
{ "trigger": "cc.ParticleSystem.initParticle(sparticle)", "contents": "initParticle(sparticle)" },
{ "trigger": "cc.ParticleSystem.setEmitterMode(mode)", "contents": "setEmitterMode(mode)" },
{ "trigger": "cc.ParticleSystem.getDuration()", "contents": "getDuration()" },
{ "trigger": "cc.ParticleSystem.setSourcePosition(vec2)", "contents": "setSourcePosition(vec2)" },
{ "trigger": "cc.ParticleSystem.getEndSpinVar()", "contents": "getEndSpinVar()" },
{ "trigger": "cc.ParticleSystem.setBlendAdditive(bool)", "contents": "setBlendAdditive(bool)" },
{ "trigger": "cc.ParticleSystem.setLife(float)", "contents": "setLife(float)" },
{ "trigger": "cc.ParticleSystem.setAngleVar(float)", "contents": "setAngleVar(float)" },
{ "trigger": "cc.ParticleSystem.setRotationIsDir(bool)", "contents": "setRotationIsDir(bool)" },
{ "trigger": "cc.ParticleSystem.setEndSizeVar(float)", "contents": "setEndSizeVar(float)" },
{ "trigger": "cc.ParticleSystem.setAngle(float)", "contents": "setAngle(float)" },
{ "trigger": "cc.ParticleSystem.setBatchNode(particlebatchnode)", "contents": "setBatchNode(particlebatchnode)" },
{ "trigger": "cc.ParticleSystem.getTangentialAccelVar()", "contents": "getTangentialAccelVar()" },
{ "trigger": "cc.ParticleSystem.getEmitterMode()", "contents": "getEmitterMode()" },
{ "trigger": "cc.ParticleSystem.setEndSpinVar(float)", "contents": "setEndSpinVar(float)" },
{ "trigger": "cc.ParticleSystem.initWithFile(str)", "contents": "initWithFile(str)" },
{ "trigger": "cc.ParticleSystem.getAngleVar()", "contents": "getAngleVar()" },
{ "trigger": "cc.ParticleSystem.setStartColor(color4f)", "contents": "setStartColor(color4f)" },
{ "trigger": "cc.ParticleSystem.getRotatePerSecondVar()", "contents": "getRotatePerSecondVar()" },
{ "trigger": "cc.ParticleSystem.getEndSize()", "contents": "getEndSize()" },
{ "trigger": "cc.ParticleSystem.getLife()", "contents": "getLife()" },
{ "trigger": "cc.ParticleSystem.setSpeedVar(float)", "contents": "setSpeedVar(float)" },
{ "trigger": "cc.ParticleSystem.setAutoRemoveOnFinish(bool)", "contents": "setAutoRemoveOnFinish(bool)" },
{ "trigger": "cc.ParticleSystem.setGravity(vec2)", "contents": "setGravity(vec2)" },
{ "trigger": "cc.ParticleSystem.postStep()", "contents": "postStep()" },
{ "trigger": "cc.ParticleSystem.setEmissionRate(float)", "contents": "setEmissionRate(float)" },
{ "trigger": "cc.ParticleSystem.getEndColorVar()", "contents": "getEndColorVar()" },
{ "trigger": "cc.ParticleSystem.getRotationIsDir()", "contents": "getRotationIsDir()" },
{ "trigger": "cc.ParticleSystem.getEmissionRate()", "contents": "getEmissionRate()" },
{ "trigger": "cc.ParticleSystem.getEndColor()", "contents": "getEndColor()" },
{ "trigger": "cc.ParticleSystem.getLifeVar()", "contents": "getLifeVar()" },
{ "trigger": "cc.ParticleSystem.setStartSizeVar(float)", "contents": "setStartSizeVar(float)" },
{ "trigger": "cc.ParticleSystem.addParticle()", "contents": "addParticle()" },
{ "trigger": "cc.ParticleSystem.getStartRadius()", "contents": "getStartRadius()" },
{ "trigger": "cc.ParticleSystem.getParticleCount()", "contents": "getParticleCount()" },
{ "trigger": "cc.ParticleSystem.getStartRadiusVar()", "contents": "getStartRadiusVar()" },
{ "trigger": "cc.ParticleSystem.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "cc.ParticleSystem.setStartColorVar(color4f)", "contents": "setStartColorVar(color4f)" },
{ "trigger": "cc.ParticleSystem.setEndSpin(float)", "contents": "setEndSpin(float)" },
{ "trigger": "cc.ParticleSystem.setRadialAccel(float)", "contents": "setRadialAccel(float)" },
{ "trigger": "cc.ParticleSystem.initWithDictionary(map, str)", "contents": "initWithDictionary(map, str)" },
{ "trigger": "cc.ParticleSystem.isAutoRemoveOnFinish()", "contents": "isAutoRemoveOnFinish()" },
{ "trigger": "cc.ParticleSystem.getTotalParticles()", "contents": "getTotalParticles()" },
{ "trigger": "cc.ParticleSystem.setStartRadiusVar(float)", "contents": "setStartRadiusVar(float)" },
{ "trigger": "cc.ParticleSystem.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "cc.ParticleSystem.getEndRadiusVar()", "contents": "getEndRadiusVar()" },
{ "trigger": "cc.ParticleSystem.getStartColorVar()", "contents": "getStartColorVar()" },
{ "trigger": "cc.ParticleSystem.create(str)", "contents": "create(str)" },
{ "trigger": "cc.ParticleSystem.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSystem.ParticleSystem()", "contents": "ParticleSystem()" },
{ "trigger": "cc.ParticleSystemQuad.setDisplayFrame(spriteframe)", "contents": "setDisplayFrame(spriteframe)" },
{ "trigger": "cc.ParticleSystemQuad.setTextureWithRect(texture2d, rect)", "contents": "setTextureWithRect(texture2d, rect)" },
{ "trigger": "cc.ParticleSystemQuad.listenRendererRecreated(eventcustom)", "contents": "listenRendererRecreated(eventcustom)" },
{ "trigger": "cc.ParticleSystemQuad.create(map)", "contents": "create(map)" },
{ "trigger": "cc.ParticleSystemQuad.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSystemQuad.ParticleSystemQuad()", "contents": "ParticleSystemQuad()" },
{ "trigger": "cc.ParticleFire.create()", "contents": "create()" },
{ "trigger": "cc.ParticleFire.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleFire.ParticleFire()", "contents": "ParticleFire()" },
{ "trigger": "cc.ParticleFireworks.init()", "contents": "init()" },
{ "trigger": "cc.ParticleFireworks.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleFireworks.create()", "contents": "create()" },
{ "trigger": "cc.ParticleFireworks.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleFireworks.ParticleFireworks()", "contents": "ParticleFireworks()" },
{ "trigger": "cc.ParticleSun.init()", "contents": "init()" },
{ "trigger": "cc.ParticleSun.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSun.create()", "contents": "create()" },
{ "trigger": "cc.ParticleSun.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSun.ParticleSun()", "contents": "ParticleSun()" },
{ "trigger": "cc.ParticleGalaxy.init()", "contents": "init()" },
{ "trigger": "cc.ParticleGalaxy.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleGalaxy.create()", "contents": "create()" },
{ "trigger": "cc.ParticleGalaxy.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleGalaxy.ParticleGalaxy()", "contents": "ParticleGalaxy()" },
{ "trigger": "cc.ParticleFlower.init()", "contents": "init()" },
{ "trigger": "cc.ParticleFlower.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleFlower.create()", "contents": "create()" },
{ "trigger": "cc.ParticleFlower.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleFlower.ParticleFlower()", "contents": "ParticleFlower()" },
{ "trigger": "cc.ParticleMeteor.init()", "contents": "init()" },
{ "trigger": "cc.ParticleMeteor.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleMeteor.create()", "contents": "create()" },
{ "trigger": "cc.ParticleMeteor.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleMeteor.ParticleMeteor()", "contents": "ParticleMeteor()" },
{ "trigger": "cc.ParticleSpiral.init()", "contents": "init()" },
{ "trigger": "cc.ParticleSpiral.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSpiral.create()", "contents": "create()" },
{ "trigger": "cc.ParticleSpiral.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSpiral.ParticleSpiral()", "contents": "ParticleSpiral()" },
{ "trigger": "cc.ParticleExplosion.init()", "contents": "init()" },
{ "trigger": "cc.ParticleExplosion.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleExplosion.create()", "contents": "create()" },
{ "trigger": "cc.ParticleExplosion.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleExplosion.ParticleExplosion()", "contents": "ParticleExplosion()" },
{ "trigger": "cc.ParticleSmoke.init()", "contents": "init()" },
{ "trigger": "cc.ParticleSmoke.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSmoke.create()", "contents": "create()" },
{ "trigger": "cc.ParticleSmoke.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSmoke.ParticleSmoke()", "contents": "ParticleSmoke()" },
{ "trigger": "cc.ParticleSnow.init()", "contents": "init()" },
{ "trigger": "cc.ParticleSnow.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSnow.create()", "contents": "create()" },
{ "trigger": "cc.ParticleSnow.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleSnow.ParticleSnow()", "contents": "ParticleSnow()" },
{ "trigger": "cc.ParticleRain.init()", "contents": "init()" },
{ "trigger": "cc.ParticleRain.initWithTotalParticles(int)", "contents": "initWithTotalParticles(int)" },
{ "trigger": "cc.ParticleRain.create()", "contents": "create()" },
{ "trigger": "cc.ParticleRain.createWithTotalParticles(int)", "contents": "createWithTotalParticles(int)" },
{ "trigger": "cc.ParticleRain.ParticleRain()", "contents": "ParticleRain()" },
{ "trigger": "cc.GridBase.setGridSize(size)", "contents": "setGridSize(size)" },
{ "trigger": "cc.GridBase.afterBlit()", "contents": "afterBlit()" },
{ "trigger": "cc.GridBase.afterDraw(node)", "contents": "afterDraw(node)" },
{ "trigger": "cc.GridBase.beforeDraw()", "contents": "beforeDraw()" },
{ "trigger": "cc.GridBase.calculateVertexPoints()", "contents": "calculateVertexPoints()" },
{ "trigger": "cc.GridBase.isTextureFlipped()", "contents": "isTextureFlipped()" },
{ "trigger": "cc.GridBase.getGridSize()", "contents": "getGridSize()" },
{ "trigger": "cc.GridBase.getStep()", "contents": "getStep()" },
{ "trigger": "cc.GridBase.set2DProjection()", "contents": "set2DProjection()" },
{ "trigger": "cc.GridBase.setStep(vec2)", "contents": "setStep(vec2)" },
{ "trigger": "cc.GridBase.setTextureFlipped(bool)", "contents": "setTextureFlipped(bool)" },
{ "trigger": "cc.GridBase.blit()", "contents": "blit()" },
{ "trigger": "cc.GridBase.setActive(bool)", "contents": "setActive(bool)" },
{ "trigger": "cc.GridBase.getReuseGrid()", "contents": "getReuseGrid()" },
{ "trigger": "cc.GridBase.initWithSize(size, texture2d, bool)", "contents": "initWithSize(size, texture2d, bool)" },
{ "trigger": "cc.GridBase.beforeBlit()", "contents": "beforeBlit()" },
{ "trigger": "cc.GridBase.setReuseGrid(int)", "contents": "setReuseGrid(int)" },
{ "trigger": "cc.GridBase.isActive()", "contents": "isActive()" },
{ "trigger": "cc.GridBase.reuse()", "contents": "reuse()" },
{ "trigger": "cc.GridBase.create(size, texture2d, bool)", "contents": "create(size, texture2d, bool)" },
{ "trigger": "cc.Grid3D.getNeedDepthTestForBlit()", "contents": "getNeedDepthTestForBlit()" },
{ "trigger": "cc.Grid3D.setNeedDepthTestForBlit(bool)", "contents": "setNeedDepthTestForBlit(bool)" },
{ "trigger": "cc.Grid3D.create(size, texture2d, bool)", "contents": "create(size, texture2d, bool)" },
{ "trigger": "cc.Grid3D.Grid3D()", "contents": "Grid3D()" },
{ "trigger": "cc.TiledGrid3D.create(size, texture2d, bool)", "contents": "create(size, texture2d, bool)" },
{ "trigger": "cc.TiledGrid3D.TiledGrid3D()", "contents": "TiledGrid3D()" },
{ "trigger": "cc.Camera.setScene(scene)", "contents": "setScene(scene)" },
{ "trigger": "cc.Camera.initPerspective(float, float, float, float)", "contents": "initPerspective(float, float, float, float)" },
{ "trigger": "cc.Camera.getProjectionMatrix()", "contents": "getProjectionMatrix()" },
{ "trigger": "cc.Camera.getViewProjectionMatrix()", "contents": "getViewProjectionMatrix()" },
{ "trigger": "cc.Camera.getViewMatrix()", "contents": "getViewMatrix()" },
{ "trigger": "cc.Camera.getCameraFlag()", "contents": "getCameraFlag()" },
{ "trigger": "cc.Camera.getType()", "contents": "getType()" },
{ "trigger": "cc.Camera.initDefault()", "contents": "initDefault()" },
{ "trigger": "cc.Camera.project(vec3)", "contents": "project(vec3)" },
{ "trigger": "cc.Camera.getDepthInView(mat4)", "contents": "getDepthInView(mat4)" },
{ "trigger": "cc.Camera.lookAt(vec3, vec3)", "contents": "lookAt(vec3, vec3)" },
{ "trigger": "cc.Camera.setCameraFlag(cameraflag)", "contents": "setCameraFlag(cameraflag)" },
{ "trigger": "cc.Camera.initOrthographic(float, float, float, float)", "contents": "initOrthographic(float, float, float, float)" },
{ "trigger": "cc.Camera.setAdditionalProjection(mat4)", "contents": "setAdditionalProjection(mat4)" },
{ "trigger": "cc.Camera.getDepth()", "contents": "getDepth()" },
{ "trigger": "cc.Camera.setDepth(int)", "contents": "setDepth(int)" },
{ "trigger": "cc.Camera.create()", "contents": "create()" },
{ "trigger": "cc.Camera.createPerspective(float, float, float, float)", "contents": "createPerspective(float, float, float, float)" },
{ "trigger": "cc.Camera.createOrthographic(float, float, float, float)", "contents": "createOrthographic(float, float, float, float)" },
{ "trigger": "cc.Camera.getDefaultCamera()", "contents": "getDefaultCamera()" },
{ "trigger": "cc.Camera.getVisitingCamera()", "contents": "getVisitingCamera()" },
{ "trigger": "cc.Camera.Camera()", "contents": "Camera()" },
{ "trigger": "cc.BaseLight.setEnabled(bool)", "contents": "setEnabled(bool)" },
{ "trigger": "cc.BaseLight.getIntensity()", "contents": "getIntensity()" },
{ "trigger": "cc.BaseLight.isEnabled()", "contents": "isEnabled()" },
{ "trigger": "cc.BaseLight.getLightType()", "contents": "getLightType()" },
{ "trigger": "cc.BaseLight.setLightFlag(lightflag)", "contents": "setLightFlag(lightflag)" },
{ "trigger": "cc.BaseLight.setIntensity(float)", "contents": "setIntensity(float)" },
{ "trigger": "cc.BaseLight.getLightFlag()", "contents": "getLightFlag()" },
{ "trigger": "cc.DirectionLight.getDirection()", "contents": "getDirection()" },
{ "trigger": "cc.DirectionLight.getDirectionInWorld()", "contents": "getDirectionInWorld()" },
{ "trigger": "cc.DirectionLight.setDirection(vec3)", "contents": "setDirection(vec3)" },
{ "trigger": "cc.DirectionLight.create(vec3, color3b)", "contents": "create(vec3, color3b)" },
{ "trigger": "cc.DirectionLight.DirectionLight()", "contents": "DirectionLight()" },
{ "trigger": "cc.PointLight.getRange()", "contents": "getRange()" },
{ "trigger": "cc.PointLight.setRange(float)", "contents": "setRange(float)" },
{ "trigger": "cc.PointLight.create(vec3, color3b, float)", "contents": "create(vec3, color3b, float)" },
{ "trigger": "cc.PointLight.PointLight()", "contents": "PointLight()" },
{ "trigger": "cc.SpotLight.getRange()", "contents": "getRange()" },
{ "trigger": "cc.SpotLight.setDirection(vec3)", "contents": "setDirection(vec3)" },
{ "trigger": "cc.SpotLight.getCosInnerAngle()", "contents": "getCosInnerAngle()" },
{ "trigger": "cc.SpotLight.getOuterAngle()", "contents": "getOuterAngle()" },
{ "trigger": "cc.SpotLight.getInnerAngle()", "contents": "getInnerAngle()" },
{ "trigger": "cc.SpotLight.getDirection()", "contents": "getDirection()" },
{ "trigger": "cc.SpotLight.getCosOuterAngle()", "contents": "getCosOuterAngle()" },
{ "trigger": "cc.SpotLight.setOuterAngle(float)", "contents": "setOuterAngle(float)" },
{ "trigger": "cc.SpotLight.setInnerAngle(float)", "contents": "setInnerAngle(float)" },
{ "trigger": "cc.SpotLight.getDirectionInWorld()", "contents": "getDirectionInWorld()" },
{ "trigger": "cc.SpotLight.setRange(float)", "contents": "setRange(float)" },
{ "trigger": "cc.SpotLight.create(vec3, vec3, color3b, float, float, float)", "contents": "create(vec3, vec3, color3b, float, float, float)" },
{ "trigger": "cc.SpotLight.SpotLight()", "contents": "SpotLight()" },
{ "trigger": "cc.AmbientLight.create(color3b)", "contents": "create(color3b)" },
{ "trigger": "cc.AmbientLight.AmbientLight()", "contents": "AmbientLight()" },
{ "trigger": "cc.GLProgram.getFragmentShaderLog()", "contents": "getFragmentShaderLog()" },
{ "trigger": "cc.GLProgram.bindAttribLocation(str, int)", "contents": "bindAttribLocation(str, int)" },
{ "trigger": "cc.GLProgram.getUniformLocationForName(char)", "contents": "getUniformLocationForName(char)" },
{ "trigger": "cc.GLProgram.use()", "contents": "use()" },
{ "trigger": "cc.GLProgram.getVertexShaderLog()", "contents": "getVertexShaderLog()" },
{ "trigger": "cc.GLProgram.getUniform(str)", "contents": "getUniform(str)" },
{ "trigger": "cc.GLProgram.initWithByteArrays(char, char)", "contents": "initWithByteArrays(char, char)" },
{ "trigger": "cc.GLProgram.setUniformLocationWith1f(int, float)", "contents": "setUniformLocationWith1f(int, float)" },
{ "trigger": "cc.GLProgram.initWithFilenames(str, str)", "contents": "initWithFilenames(str, str)" },
{ "trigger": "cc.GLProgram.setUniformLocationWith3f(int, float, float, float)", "contents": "setUniformLocationWith3f(int, float, float, float)" },
{ "trigger": "cc.GLProgram.setUniformsForBuiltins(mat4)", "contents": "setUniformsForBuiltins(mat4)" },
{ "trigger": "cc.GLProgram.setUniformLocationWith3i(int, int, int, int)", "contents": "setUniformLocationWith3i(int, int, int, int)" },
{ "trigger": "cc.GLProgram.setUniformLocationWith4f(int, float, float, float, float)", "contents": "setUniformLocationWith4f(int, float, float, float, float)" },
{ "trigger": "cc.GLProgram.updateUniforms()", "contents": "updateUniforms()" },
{ "trigger": "cc.GLProgram.getUniformLocation(str)", "contents": "getUniformLocation(str)" },
{ "trigger": "cc.GLProgram.link()", "contents": "link()" },
{ "trigger": "cc.GLProgram.reset()", "contents": "reset()" },
{ "trigger": "cc.GLProgram.getAttribLocation(str)", "contents": "getAttribLocation(str)" },
{ "trigger": "cc.GLProgram.getVertexAttrib(str)", "contents": "getVertexAttrib(str)" },
{ "trigger": "cc.GLProgram.setUniformLocationWith2f(int, float, float)", "contents": "setUniformLocationWith2f(int, float, float)" },
{ "trigger": "cc.GLProgram.setUniformLocationWith4i(int, int, int, int, int)", "contents": "setUniformLocationWith4i(int, int, int, int, int)" },
{ "trigger": "cc.GLProgram.setUniformLocationWith1i(int, int)", "contents": "setUniformLocationWith1i(int, int)" },
{ "trigger": "cc.GLProgram.setUniformLocationWith2i(int, int, int)", "contents": "setUniformLocationWith2i(int, int, int)" },
{ "trigger": "cc.GLProgram.createWithByteArrays(char, char)", "contents": "createWithByteArrays(char, char)" },
{ "trigger": "cc.GLProgram.createWithFilenames(str, str)", "contents": "createWithFilenames(str, str)" },
{ "trigger": "cc.GLProgram.GLProgram()", "contents": "GLProgram()" },
{ "trigger": "cc.GLProgramCache.reloadDefaultGLPrograms()", "contents": "reloadDefaultGLPrograms()" },
{ "trigger": "cc.GLProgramCache.addGLProgram(glprogram, str)", "contents": "addGLProgram(glprogram, str)" },
{ "trigger": "cc.GLProgramCache.getGLProgram(str)", "contents": "getGLProgram(str)" },
{ "trigger": "cc.GLProgramCache.loadDefaultGLPrograms()", "contents": "loadDefaultGLPrograms()" },
{ "trigger": "cc.GLProgramCache.destroyInstance()", "contents": "destroyInstance()" },
{ "trigger": "cc.GLProgramCache.getInstance()", "contents": "getInstance()" },
{ "trigger": "cc.GLProgramCache.GLProgramCache()", "contents": "GLProgramCache()" },
{ "trigger": "cc.TextureCache.reloadTexture(str)", "contents": "reloadTexture(str)" },
{ "trigger": "cc.TextureCache.unbindAllImageAsync()", "contents": "unbindAllImageAsync()" },
{ "trigger": "cc.TextureCache.removeTextureForKey(str)", "contents": "removeTextureForKey(str)" },
{ "trigger": "cc.TextureCache.removeAllTextures()", "contents": "removeAllTextures()" },
{ "trigger": "cc.TextureCache.addImageAsync(str, func)", "contents": "addImageAsync(str, func)" },
{ "trigger": "cc.TextureCache.getDescription()", "contents": "getDescription()" },
{ "trigger": "cc.TextureCache.getCachedTextureInfo()", "contents": "getCachedTextureInfo()" },
{ "trigger": "cc.TextureCache.addImage(image, str)", "contents": "addImage(image, str)" },
{ "trigger": "cc.TextureCache.unbindImageAsync(str)", "contents": "unbindImageAsync(str)" },
{ "trigger": "cc.TextureCache.getTextureForKey(str)", "contents": "getTextureForKey(str)" },
{ "trigger": "cc.TextureCache.removeUnusedTextures()", "contents": "removeUnusedTextures()" },
{ "trigger": "cc.TextureCache.removeTexture(texture2d)", "contents": "removeTexture(texture2d)" },
{ "trigger": "cc.TextureCache.waitForQuit()", "contents": "waitForQuit()" },
{ "trigger": "cc.TextureCache.TextureCache()", "contents": "TextureCache()" },
{ "trigger": "cc.Device.setAccelerometerEnabled(bool)", "contents": "setAccelerometerEnabled(bool)" },
{ "trigger": "cc.Device.setKeepScreenOn(bool)", "contents": "setKeepScreenOn(bool)" },
{ "trigger": "cc.Device.setAccelerometerInterval(float)", "contents": "setAccelerometerInterval(float)" },
{ "trigger": "cc.Device.getDPI()", "contents": "getDPI()" },
{ "trigger": "cc.SAXParser.init(char)", "contents": "init(char)" },
{ "trigger": "cc.Application.openURL(str)", "contents": "openURL(str)" },
{ "trigger": "cc.Application.getTargetPlatform()", "contents": "getTargetPlatform()" },
{ "trigger": "cc.Application.getCurrentLanguage()", "contents": "getCurrentLanguage()" },
{ "trigger": "cc.Application.getInstance()", "contents": "getInstance()" },
{ "trigger": "cc.AnimationCache.getAnimation(str)", "contents": "getAnimation(str)" },
{ "trigger": "cc.AnimationCache.addAnimation(animation, str)", "contents": "addAnimation(animation, str)" },
{ "trigger": "cc.AnimationCache.init()", "contents": "init()" },
{ "trigger": "cc.AnimationCache.addAnimationsWithDictionary(map, str)", "contents": "addAnimationsWithDictionary(map, str)" },
{ "trigger": "cc.AnimationCache.removeAnimation(str)", "contents": "removeAnimation(str)" },
{ "trigger": "cc.AnimationCache.addAnimationsWithFile(str)", "contents": "addAnimationsWithFile(str)" },
{ "trigger": "cc.AnimationCache.destroyInstance()", "contents": "destroyInstance()" },
{ "trigger": "cc.AnimationCache.getInstance()", "contents": "getInstance()" },
{ "trigger": "cc.AnimationCache.AnimationCache()", "contents": "AnimationCache()" },
{ "trigger": "cc.SpriteFrameCache.addSpriteFramesWithFileContent(str, texture2d)", "contents": "addSpriteFramesWithFileContent(str, texture2d)" },
{ "trigger": "cc.SpriteFrameCache.addSpriteFrame(spriteframe, str)", "contents": "addSpriteFrame(spriteframe, str)" },
{ "trigger": "cc.SpriteFrameCache.addSpriteFramesWithFile(str, texture2d)", "contents": "addSpriteFramesWithFile(str, texture2d)" },
{ "trigger": "cc.SpriteFrameCache.getSpriteFrameByName(str)", "contents": "getSpriteFrameByName(str)" },
{ "trigger": "cc.SpriteFrameCache.removeSpriteFramesFromFile(str)", "contents": "removeSpriteFramesFromFile(str)" },
{ "trigger": "cc.SpriteFrameCache.init()", "contents": "init()" },
{ "trigger": "cc.SpriteFrameCache.removeSpriteFrames()", "contents": "removeSpriteFrames()" },
{ "trigger": "cc.SpriteFrameCache.removeUnusedSpriteFrames()", "contents": "removeUnusedSpriteFrames()" },
{ "trigger": "cc.SpriteFrameCache.removeSpriteFramesFromFileContent(str)", "contents": "removeSpriteFramesFromFileContent(str)" },
{ "trigger": "cc.SpriteFrameCache.removeSpriteFrameByName(str)", "contents": "removeSpriteFrameByName(str)" },
{ "trigger": "cc.SpriteFrameCache.isSpriteFramesWithFileLoaded(str)", "contents": "isSpriteFramesWithFileLoaded(str)" },
{ "trigger": "cc.SpriteFrameCache.removeSpriteFramesFromTexture(texture2d)", "contents": "removeSpriteFramesFromTexture(texture2d)" },
{ "trigger": "cc.SpriteFrameCache.destroyInstance()", "contents": "destroyInstance()" },
{ "trigger": "cc.SpriteFrameCache.getInstance()", "contents": "getInstance()" },
{ "trigger": "cc.TextFieldTTF.getCharCount()", "contents": "getCharCount()" },
{ "trigger": "cc.TextFieldTTF.setSecureTextEntry(bool)", "contents": "setSecureTextEntry(bool)" },
{ "trigger": "cc.TextFieldTTF.getColorSpaceHolder()", "contents": "getColorSpaceHolder()" },
{ "trigger": "cc.TextFieldTTF.initWithPlaceHolder(str, size, texthalignment, str, float)", "contents": "initWithPlaceHolder(str, size, texthalignment, str, float)" },
{ "trigger": "cc.TextFieldTTF.setColorSpaceHolder(color3b)", "contents": "setColorSpaceHolder(color3b)" },
{ "trigger": "cc.TextFieldTTF.detachWithIME()", "contents": "detachWithIME()" },
{ "trigger": "cc.TextFieldTTF.setPlaceHolder(str)", "contents": "setPlaceHolder(str)" },
{ "trigger": "cc.TextFieldTTF.isSecureTextEntry()", "contents": "isSecureTextEntry()" },
{ "trigger": "cc.TextFieldTTF.getPlaceHolder()", "contents": "getPlaceHolder()" },
{ "trigger": "cc.TextFieldTTF.attachWithIME()", "contents": "attachWithIME()" },
{ "trigger": "cc.TextFieldTTF.textFieldWithPlaceHolder(str, size, texthalignment, str, float)", "contents": "textFieldWithPlaceHolder(str, size, texthalignment, str, float)" },
{ "trigger": "cc.TextFieldTTF.TextFieldTTF()", "contents": "TextFieldTTF()" },
{ "trigger": "cc.ParallaxNode.getParallaxArray()", "contents": "getParallaxArray()" },
{ "trigger": "cc.ParallaxNode.addChild(node, int, vec2, vec2)", "contents": "addChild(node, int, vec2, vec2)" },
{ "trigger": "cc.ParallaxNode.removeAllChildrenWithCleanup(bool)", "contents": "removeAllChildrenWithCleanup(bool)" },
{ "trigger": "cc.ParallaxNode.setParallaxArray(_ccarray)", "contents": "setParallaxArray(_ccarray)" },
{ "trigger": "cc.ParallaxNode.create()", "contents": "create()" },
{ "trigger": "cc.ParallaxNode.ParallaxNode()", "contents": "ParallaxNode()" },
{ "trigger": "cc.TMXObjectGroup.setPositionOffset(vec2)", "contents": "setPositionOffset(vec2)" },
{ "trigger": "cc.TMXObjectGroup.getProperty(str)", "contents": "getProperty(str)" },
{ "trigger": "cc.TMXObjectGroup.getPositionOffset()", "contents": "getPositionOffset()" },
{ "trigger": "cc.TMXObjectGroup.getObject(str)", "contents": "getObject(str)" },
{ "trigger": "cc.TMXObjectGroup.getObjects()", "contents": "getObjects()" },
{ "trigger": "cc.TMXObjectGroup.setGroupName(str)", "contents": "setGroupName(str)" },
{ "trigger": "cc.TMXObjectGroup.getProperties()", "contents": "getProperties()" },
{ "trigger": "cc.TMXObjectGroup.getGroupName()", "contents": "getGroupName()" },
{ "trigger": "cc.TMXObjectGroup.setProperties(map)", "contents": "setProperties(map)" },
{ "trigger": "cc.TMXObjectGroup.setObjects(array)", "contents": "setObjects(array)" },
{ "trigger": "cc.TMXObjectGroup.TMXObjectGroup()", "contents": "TMXObjectGroup()" },
{ "trigger": "cc.TMXLayerInfo.setProperties(map)", "contents": "setProperties(map)" },
{ "trigger": "cc.TMXLayerInfo.getProperties()", "contents": "getProperties()" },
{ "trigger": "cc.TMXLayerInfo.TMXLayerInfo()", "contents": "TMXLayerInfo()" },
{ "trigger": "cc.TMXTilesetInfo.getRectForGID(int)", "contents": "getRectForGID(int)" },
{ "trigger": "cc.TMXTilesetInfo.TMXTilesetInfo()", "contents": "TMXTilesetInfo()" },
{ "trigger": "cc.TMXMapInfo.setObjectGroups(array)", "contents": "setObjectGroups(array)" },
{ "trigger": "cc.TMXMapInfo.setTileSize(size)", "contents": "setTileSize(size)" },
{ "trigger": "cc.TMXMapInfo.initWithTMXFile(str)", "contents": "initWithTMXFile(str)" },
{ "trigger": "cc.TMXMapInfo.getOrientation()", "contents": "getOrientation()" },
{ "trigger": "cc.TMXMapInfo.isStoringCharacters()", "contents": "isStoringCharacters()" },
{ "trigger": "cc.TMXMapInfo.setLayers(array)", "contents": "setLayers(array)" },
{ "trigger": "cc.TMXMapInfo.parseXMLFile(str)", "contents": "parseXMLFile(str)" },
{ "trigger": "cc.TMXMapInfo.getParentElement()", "contents": "getParentElement()" },
{ "trigger": "cc.TMXMapInfo.setTMXFileName(str)", "contents": "setTMXFileName(str)" },
{ "trigger": "cc.TMXMapInfo.parseXMLString(str)", "contents": "parseXMLString(str)" },
{ "trigger": "cc.TMXMapInfo.getLayers()", "contents": "getLayers()" },
{ "trigger": "cc.TMXMapInfo.getTilesets()", "contents": "getTilesets()" },
{ "trigger": "cc.TMXMapInfo.getParentGID()", "contents": "getParentGID()" },
{ "trigger": "cc.TMXMapInfo.setParentElement(int)", "contents": "setParentElement(int)" },
{ "trigger": "cc.TMXMapInfo.initWithXML(str, str)", "contents": "initWithXML(str, str)" },
{ "trigger": "cc.TMXMapInfo.setParentGID(int)", "contents": "setParentGID(int)" },
{ "trigger": "cc.TMXMapInfo.getLayerAttribs()", "contents": "getLayerAttribs()" },
{ "trigger": "cc.TMXMapInfo.getTileSize()", "contents": "getTileSize()" },
{ "trigger": "cc.TMXMapInfo.getTileProperties()", "contents": "getTileProperties()" },
{ "trigger": "cc.TMXMapInfo.getObjectGroups()", "contents": "getObjectGroups()" },
{ "trigger": "cc.TMXMapInfo.getTMXFileName()", "contents": "getTMXFileName()" },
{ "trigger": "cc.TMXMapInfo.setCurrentString(str)", "contents": "setCurrentString(str)" },
{ "trigger": "cc.TMXMapInfo.setProperties(map)", "contents": "setProperties(map)" },
{ "trigger": "cc.TMXMapInfo.setOrientation(int)", "contents": "setOrientation(int)" },
{ "trigger": "cc.TMXMapInfo.setTileProperties(map)", "contents": "setTileProperties(map)" },
{ "trigger": "cc.TMXMapInfo.setMapSize(size)", "contents": "setMapSize(size)" },
{ "trigger": "cc.TMXMapInfo.setStoringCharacters(bool)", "contents": "setStoringCharacters(bool)" },
{ "trigger": "cc.TMXMapInfo.getMapSize()", "contents": "getMapSize()" },
{ "trigger": "cc.TMXMapInfo.setTilesets(array)", "contents": "setTilesets(array)" },
{ "trigger": "cc.TMXMapInfo.getProperties()", "contents": "getProperties()" },
{ "trigger": "cc.TMXMapInfo.getCurrentString()", "contents": "getCurrentString()" },
{ "trigger": "cc.TMXMapInfo.setLayerAttribs(int)", "contents": "setLayerAttribs(int)" },
{ "trigger": "cc.TMXMapInfo.create(str)", "contents": "create(str)" },
{ "trigger": "cc.TMXMapInfo.createWithXML(str, str)", "contents": "createWithXML(str, str)" },
{ "trigger": "cc.TMXMapInfo.TMXMapInfo()", "contents": "TMXMapInfo()" },
{ "trigger": "cc.TMXLayer.getTileGIDAt(vec2, tmxtileflags_)", "contents": "getTileGIDAt(vec2, tmxtileflags_)" },
{ "trigger": "cc.TMXLayer.getPositionAt(vec2)", "contents": "getPositionAt(vec2)" },
{ "trigger": "cc.TMXLayer.setLayerOrientation(int)", "contents": "setLayerOrientation(int)" },
{ "trigger": "cc.TMXLayer.releaseMap()", "contents": "releaseMap()" },
{ "trigger": "cc.TMXLayer.setTiles(int)", "contents": "setTiles(int)" },
{ "trigger": "cc.TMXLayer.getLayerSize()", "contents": "getLayerSize()" },
{ "trigger": "cc.TMXLayer.setMapTileSize(size)", "contents": "setMapTileSize(size)" },
{ "trigger": "cc.TMXLayer.getLayerOrientation()", "contents": "getLayerOrientation()" },
{ "trigger": "cc.TMXLayer.setProperties(map)", "contents": "setProperties(map)" },
{ "trigger": "cc.TMXLayer.setLayerName(str)", "contents": "setLayerName(str)" },
{ "trigger": "cc.TMXLayer.removeTileAt(vec2)", "contents": "removeTileAt(vec2)" },
{ "trigger": "cc.TMXLayer.initWithTilesetInfo(tmxtilesetinfo, tmxlayerinfo, map)", "contents": "initWithTilesetInfo(tmxtilesetinfo, tmxlayerinfo, map)" },
{ "trigger": "cc.TMXLayer.setupTiles()", "contents": "setupTiles()" },
{ "trigger": "cc.TMXLayer.setTileGID(int, vec2, tmxtileflags_)", "contents": "setTileGID(int, vec2, tmxtileflags_)" },
{ "trigger": "cc.TMXLayer.getMapTileSize()", "contents": "getMapTileSize()" },
{ "trigger": "cc.TMXLayer.getProperty(str)", "contents": "getProperty(str)" },
{ "trigger": "cc.TMXLayer.setLayerSize(size)", "contents": "setLayerSize(size)" },
{ "trigger": "cc.TMXLayer.getLayerName()", "contents": "getLayerName()" },
{ "trigger": "cc.TMXLayer.setTileSet(tmxtilesetinfo)", "contents": "setTileSet(tmxtilesetinfo)" },
{ "trigger": "cc.TMXLayer.getTileSet()", "contents": "getTileSet()" },
{ "trigger": "cc.TMXLayer.getProperties()", "contents": "getProperties()" },
{ "trigger": "cc.TMXLayer.getTileAt(vec2)", "contents": "getTileAt(vec2)" },
{ "trigger": "cc.TMXLayer.create(tmxtilesetinfo, tmxlayerinfo, map)", "contents": "create(tmxtilesetinfo, tmxlayerinfo, map)" },
{ "trigger": "cc.TMXLayer.TMXLayer()", "contents": "TMXLayer()" },
{ "trigger": "cc.TMXTiledMap.setObjectGroups(array)", "contents": "setObjectGroups(array)" },
{ "trigger": "cc.TMXTiledMap.getProperty(str)", "contents": "getProperty(str)" },
{ "trigger": "cc.TMXTiledMap.setMapSize(size)", "contents": "setMapSize(size)" },
{ "trigger": "cc.TMXTiledMap.getObjectGroup(str)", "contents": "getObjectGroup(str)" },
{ "trigger": "cc.TMXTiledMap.getObjectGroups()", "contents": "getObjectGroups()" },
{ "trigger": "cc.TMXTiledMap.initWithXML(str, str)", "contents": "initWithXML(str, str)" },
{ "trigger": "cc.TMXTiledMap.initWithTMXFile(str)", "contents": "initWithTMXFile(str)" },
{ "trigger": "cc.TMXTiledMap.getTileSize()", "contents": "getTileSize()" },
{ "trigger": "cc.TMXTiledMap.getMapSize()", "contents": "getMapSize()" },
{ "trigger": "cc.TMXTiledMap.getProperties()", "contents": "getProperties()" },
{ "trigger": "cc.TMXTiledMap.getPropertiesForGID(int, value)", "contents": "getPropertiesForGID(int, value)" },
{ "trigger": "cc.TMXTiledMap.setTileSize(size)", "contents": "setTileSize(size)" },
{ "trigger": "cc.TMXTiledMap.setProperties(map)", "contents": "setProperties(map)" },
{ "trigger": "cc.TMXTiledMap.getLayer(str)", "contents": "getLayer(str)" },
{ "trigger": "cc.TMXTiledMap.getMapOrientation()", "contents": "getMapOrientation()" },
{ "trigger": "cc.TMXTiledMap.setMapOrientation(int)", "contents": "setMapOrientation(int)" },
{ "trigger": "cc.TMXTiledMap.create(str)", "contents": "create(str)" },
{ "trigger": "cc.TMXTiledMap.createWithXML(str, str)", "contents": "createWithXML(str, str)" },
{ "trigger": "cc.TMXTiledMap.TMXTiledMap()", "contents": "TMXTiledMap()" },
{ "trigger": "cc.TileMapAtlas.initWithTileFile(str, str, int, int)", "contents": "initWithTileFile(str, str, int, int)" },
{ "trigger": "cc.TileMapAtlas.releaseMap()", "contents": "releaseMap()" },
{ "trigger": "cc.TileMapAtlas.getTGAInfo()", "contents": "getTGAInfo()" },
{ "trigger": "cc.TileMapAtlas.getTileAt(vec2)", "contents": "getTileAt(vec2)" },
{ "trigger": "cc.TileMapAtlas.setTile(color3b, vec2)", "contents": "setTile(color3b, vec2)" },
{ "trigger": "cc.TileMapAtlas.setTGAInfo(simagetga)", "contents": "setTGAInfo(simagetga)" },
{ "trigger": "cc.TileMapAtlas.create(str, str, int, int)", "contents": "create(str, str, int, int)" },
{ "trigger": "cc.TileMapAtlas.TileMapAtlas()", "contents": "TileMapAtlas()" },
{ "trigger": "cc.Component.setEnabled(bool)", "contents": "setEnabled(bool)" },
{ "trigger": "cc.Component.setName(str)", "contents": "setName(str)" },
{ "trigger": "cc.Component.isEnabled()", "contents": "isEnabled()" },
{ "trigger": "cc.Component.update(float)", "contents": "update(float)" },
{ "trigger": "cc.Component.getOwner()", "contents": "getOwner()" },
{ "trigger": "cc.Component.init()", "contents": "init()" },
{ "trigger": "cc.Component.setOwner(node)", "contents": "setOwner(node)" },
{ "trigger": "cc.Component.getName()", "contents": "getName()" },
{ "trigger": "cc.Component.create()", "contents": "create()" },
{ "trigger": "cc.Component.Component()", "contents": "Component()" },
{ "trigger": "cc.ComponentContainer.visit(float)", "contents": "visit(float)" },
{ "trigger": "cc.ComponentContainer.remove(str)", "contents": "remove(str)" },
{ "trigger": "cc.ComponentContainer.removeAll()", "contents": "removeAll()" },
{ "trigger": "cc.ComponentContainer.add(component)", "contents": "add(component)" },
{ "trigger": "cc.ComponentContainer.isEmpty()", "contents": "isEmpty()" },
{ "trigger": "cc.ComponentContainer.get(str)", "contents": "get(str)" },
{ "trigger": "cc.SimpleAudioEngine.preloadBackgroundMusic(char)", "contents": "preloadBackgroundMusic(char)" },
{ "trigger": "cc.SimpleAudioEngine.stopBackgroundMusic()", "contents": "stopBackgroundMusic()" },
{ "trigger": "cc.SimpleAudioEngine.stopAllEffects()", "contents": "stopAllEffects()" },
{ "trigger": "cc.SimpleAudioEngine.getBackgroundMusicVolume()", "contents": "getBackgroundMusicVolume()" },
{ "trigger": "cc.SimpleAudioEngine.resumeBackgroundMusic()", "contents": "resumeBackgroundMusic()" },
{ "trigger": "cc.SimpleAudioEngine.setBackgroundMusicVolume(float)", "contents": "setBackgroundMusicVolume(float)" },
{ "trigger": "cc.SimpleAudioEngine.preloadEffect(char)", "contents": "preloadEffect(char)" },
{ "trigger": "cc.SimpleAudioEngine.isBackgroundMusicPlaying()", "contents": "isBackgroundMusicPlaying()" },
{ "trigger": "cc.SimpleAudioEngine.getEffectsVolume()", "contents": "getEffectsVolume()" },
{ "trigger": "cc.SimpleAudioEngine.willPlayBackgroundMusic()", "contents": "willPlayBackgroundMusic()" },
{ "trigger": "cc.SimpleAudioEngine.pauseEffect(int)", "contents": "pauseEffect(int)" },
{ "trigger": "cc.SimpleAudioEngine.playEffect(char, bool, float, float, float)", "contents": "playEffect(char, bool, float, float, float)" },
{ "trigger": "cc.SimpleAudioEngine.rewindBackgroundMusic()", "contents": "rewindBackgroundMusic()" },
{ "trigger": "cc.SimpleAudioEngine.playBackgroundMusic(char, bool)", "contents": "playBackgroundMusic(char, bool)" },
{ "trigger": "cc.SimpleAudioEngine.resumeAllEffects()", "contents": "resumeAllEffects()" },
{ "trigger": "cc.SimpleAudioEngine.setEffectsVolume(float)", "contents": "setEffectsVolume(float)" },
{ "trigger": "cc.SimpleAudioEngine.stopEffect(int)", "contents": "stopEffect(int)" },
{ "trigger": "cc.SimpleAudioEngine.pauseBackgroundMusic()", "contents": "pauseBackgroundMusic()" },
{ "trigger": "cc.SimpleAudioEngine.pauseAllEffects()", "contents": "pauseAllEffects()" },
{ "trigger": "cc.SimpleAudioEngine.unloadEffect(char)", "contents": "unloadEffect(char)" },
{ "trigger": "cc.SimpleAudioEngine.resumeEffect(int)", "contents": "resumeEffect(int)" },
{ "trigger": "cc.SimpleAudioEngine.end()", "contents": "end()" },
{ "trigger": "cc.SimpleAudioEngine.getInstance()", "contents": "getInstance()" },
{ "trigger": "cc.AsyncTaskPool.stopTasks(tasktype)", "contents": "stopTasks(tasktype)" },
{ "trigger": "cc.AsyncTaskPool.destoryInstance()", "contents": "destoryInstance()" },
{ "trigger": "cc.AsyncTaskPool.getInstance()", "contents": "getInstance()" },
{ "trigger": "cc.CCBAnimationManager.moveAnimationsFromNode(node, node)", "contents": "moveAnimationsFromNode(node, node)" },
{ "trigger": "cc.CCBAnimationManager.setAutoPlaySequenceId(int)", "contents": "setAutoPlaySequenceId(int)" },
{ "trigger": "cc.CCBAnimationManager.getDocumentCallbackNames()", "contents": "getDocumentCallbackNames()" },
{ "trigger": "cc.CCBAnimationManager.actionForSoundChannel(ccbsequenceproperty)", "contents": "actionForSoundChannel(ccbsequenceproperty)" },
{ "trigger": "cc.CCBAnimationManager.setBaseValue(value, node, str)", "contents": "setBaseValue(value, node, str)" },
{ "trigger": "cc.CCBAnimationManager.getDocumentOutletNodes()", "contents": "getDocumentOutletNodes()" },
{ "trigger": "cc.CCBAnimationManager.getLastCompletedSequenceName()", "contents": "getLastCompletedSequenceName()" },
{ "trigger": "cc.CCBAnimationManager.setRootNode(node)", "contents": "setRootNode(node)" },
{ "trigger": "cc.CCBAnimationManager.runAnimationsForSequenceNamedTweenDuration(char, float)", "contents": "runAnimationsForSequenceNamedTweenDuration(char, float)" },
{ "trigger": "cc.CCBAnimationManager.addDocumentOutletName(str)", "contents": "addDocumentOutletName(str)" },
{ "trigger": "cc.CCBAnimationManager.getRootContainerSize()", "contents": "getRootContainerSize()" },
{ "trigger": "cc.CCBAnimationManager.setDocumentControllerName(str)", "contents": "setDocumentControllerName(str)" },
{ "trigger": "cc.CCBAnimationManager.setObject(ref, node, str)", "contents": "setObject(ref, node, str)" },
{ "trigger": "cc.CCBAnimationManager.getContainerSize(node)", "contents": "getContainerSize(node)" },
{ "trigger": "cc.CCBAnimationManager.actionForCallbackChannel(ccbsequenceproperty)", "contents": "actionForCallbackChannel(ccbsequenceproperty)" },
{ "trigger": "cc.CCBAnimationManager.getDocumentOutletNames()", "contents": "getDocumentOutletNames()" },
{ "trigger": "cc.CCBAnimationManager.addDocumentCallbackControlEvents(eventtype)", "contents": "addDocumentCallbackControlEvents(eventtype)" },
{ "trigger": "cc.CCBAnimationManager.init()", "contents": "init()" },
{ "trigger": "cc.CCBAnimationManager.getKeyframeCallbacks()", "contents": "getKeyframeCallbacks()" },
{ "trigger": "cc.CCBAnimationManager.getDocumentCallbackControlEvents()", "contents": "getDocumentCallbackControlEvents()" },
{ "trigger": "cc.CCBAnimationManager.setRootContainerSize(size)", "contents": "setRootContainerSize(size)" },
{ "trigger": "cc.CCBAnimationManager.runAnimationsForSequenceIdTweenDuration(int, float)", "contents": "runAnimationsForSequenceIdTweenDuration(int, float)" },
{ "trigger": "cc.CCBAnimationManager.getRunningSequenceName()", "contents": "getRunningSequenceName()" },
{ "trigger": "cc.CCBAnimationManager.getAutoPlaySequenceId()", "contents": "getAutoPlaySequenceId()" },
{ "trigger": "cc.CCBAnimationManager.addDocumentCallbackName(str)", "contents": "addDocumentCallbackName(str)" },
{ "trigger": "cc.CCBAnimationManager.getRootNode()", "contents": "getRootNode()" },
{ "trigger": "cc.CCBAnimationManager.addDocumentOutletNode(node)", "contents": "addDocumentOutletNode(node)" },
{ "trigger": "cc.CCBAnimationManager.setDelegate(ccbanimationmanagerdelegate)", "contents": "setDelegate(ccbanimationmanagerdelegate)" },
{ "trigger": "cc.CCBAnimationManager.getSequenceDuration(char)", "contents": "getSequenceDuration(char)" },
{ "trigger": "cc.CCBAnimationManager.addDocumentCallbackNode(node)", "contents": "addDocumentCallbackNode(node)" },
{ "trigger": "cc.CCBAnimationManager.runAnimationsForSequenceNamed(char)", "contents": "runAnimationsForSequenceNamed(char)" },
{ "trigger": "cc.CCBAnimationManager.getSequenceId(char)", "contents": "getSequenceId(char)" },
{ "trigger": "cc.CCBAnimationManager.setCallFunc(callfunc, str)", "contents": "setCallFunc(callfunc, str)" },
{ "trigger": "cc.CCBAnimationManager.getDocumentCallbackNodes()", "contents": "getDocumentCallbackNodes()" },
{ "trigger": "cc.CCBAnimationManager.setSequences(array)", "contents": "setSequences(array)" },
{ "trigger": "cc.CCBAnimationManager.debug()", "contents": "debug()" },
{ "trigger": "cc.CCBAnimationManager.getDocumentControllerName()", "contents": "getDocumentControllerName()" },
{ "trigger": "cc.CCBAnimationManager.CCBAnimationManager()", "contents": "CCBAnimationManager()" },
{ "trigger": "cc.CCBReader.getAnimationManager()", "contents": "getAnimationManager()" },
{ "trigger": "cc.CCBReader.setAnimationManager(ccbanimationmanager)", "contents": "setAnimationManager(ccbanimationmanager)" },
{ "trigger": "cc.CCBReader.addOwnerOutletName(str)", "contents": "addOwnerOutletName(str)" },
{ "trigger": "cc.CCBReader.getOwnerCallbackNames()", "contents": "getOwnerCallbackNames()" },
{ "trigger": "cc.CCBReader.addDocumentCallbackControlEvents(eventtype)", "contents": "addDocumentCallbackControlEvents(eventtype)" },
{ "trigger": "cc.CCBReader.setCCBRootPath(char)", "contents": "setCCBRootPath(char)" },
{ "trigger": "cc.CCBReader.addOwnerOutletNode(node)", "contents": "addOwnerOutletNode(node)" },
{ "trigger": "cc.CCBReader.getOwnerCallbackNodes()", "contents": "getOwnerCallbackNodes()" },
{ "trigger": "cc.CCBReader.readSoundKeyframesForSeq(ccbsequence)", "contents": "readSoundKeyframesForSeq(ccbsequence)" },
{ "trigger": "cc.CCBReader.getCCBRootPath()", "contents": "getCCBRootPath()" },
{ "trigger": "cc.CCBReader.getOwnerCallbackControlEvents()", "contents": "getOwnerCallbackControlEvents()" },
{ "trigger": "cc.CCBReader.getOwnerOutletNodes()", "contents": "getOwnerOutletNodes()" },
{ "trigger": "cc.CCBReader.readUTF8()", "contents": "readUTF8()" },
{ "trigger": "cc.CCBReader.addOwnerCallbackControlEvents(eventtype)", "contents": "addOwnerCallbackControlEvents(eventtype)" },
{ "trigger": "cc.CCBReader.getOwnerOutletNames()", "contents": "getOwnerOutletNames()" },
{ "trigger": "cc.CCBReader.readCallbackKeyframesForSeq(ccbsequence)", "contents": "readCallbackKeyframesForSeq(ccbsequence)" },
{ "trigger": "cc.CCBReader.getAnimationManagersForNodes()", "contents": "getAnimationManagersForNodes()" },
{ "trigger": "cc.CCBReader.getNodesWithAnimationManagers()", "contents": "getNodesWithAnimationManagers()" },
{ "trigger": "cc.CCBReader.setResolutionScale(float)", "contents": "setResolutionScale(float)" },
{ "trigger": "cc.CCBReader.CCBReader(nodeloaderlibrary, ccbmembervariableassigner, ccbselectorresolver, nodeloaderlistener)", "contents": "CCBReader(nodeloaderlibrary, ccbmembervariableassigner, ccbselectorresolver, nodeloaderlistener)" },
{ "trigger": "cc.Control.setEnabled(bool)", "contents": "setEnabled(bool)" },
{ "trigger": "cc.Control.getState()", "contents": "getState()" },
{ "trigger": "cc.Control.sendActionsForControlEvents(eventtype)", "contents": "sendActionsForControlEvents(eventtype)" },
{ "trigger": "cc.Control.setSelected(bool)", "contents": "setSelected(bool)" },
{ "trigger": "cc.Control.isEnabled()", "contents": "isEnabled()" },
{ "trigger": "cc.Control.needsLayout()", "contents": "needsLayout()" },
{ "trigger": "cc.Control.hasVisibleParents()", "contents": "hasVisibleParents()" },
{ "trigger": "cc.Control.isSelected()", "contents": "isSelected()" },
{ "trigger": "cc.Control.isTouchInside(touch)", "contents": "isTouchInside(touch)" },
{ "trigger": "cc.Control.setHighlighted(bool)", "contents": "setHighlighted(bool)" },
{ "trigger": "cc.Control.getTouchLocation(touch)", "contents": "getTouchLocation(touch)" },
{ "trigger": "cc.Control.isHighlighted()", "contents": "isHighlighted()" },
{ "trigger": "cc.Control.create()", "contents": "create()" },
{ "trigger": "cc.Control.Control()", "contents": "Control()" },
{ "trigger": "cc.ControlButton.isPushed()", "contents": "isPushed()" },
{ "trigger": "cc.ControlButton.setTitleLabelForState(node, state)", "contents": "setTitleLabelForState(node, state)" },
{ "trigger": "cc.ControlButton.setAdjustBackgroundImage(bool)", "contents": "setAdjustBackgroundImage(bool)" },
{ "trigger": "cc.ControlButton.setTitleForState(str, state)", "contents": "setTitleForState(str, state)" },
{ "trigger": "cc.ControlButton.setLabelAnchorPoint(vec2)", "contents": "setLabelAnchorPoint(vec2)" },
{ "trigger": "cc.ControlButton.getLabelAnchorPoint()", "contents": "getLabelAnchorPoint()" },
{ "trigger": "cc.ControlButton.initWithBackgroundSprite(scale9sprite)", "contents": "initWithBackgroundSprite(scale9sprite)" },
{ "trigger": "cc.ControlButton.getTitleTTFSizeForState(state)", "contents": "getTitleTTFSizeForState(state)" },
{ "trigger": "cc.ControlButton.setTitleTTFForState(str, state)", "contents": "setTitleTTFForState(str, state)" },
{ "trigger": "cc.ControlButton.setTitleTTFSizeForState(float, state)", "contents": "setTitleTTFSizeForState(float, state)" },
{ "trigger": "cc.ControlButton.setTitleLabel(node)", "contents": "setTitleLabel(node)" },
{ "trigger": "cc.ControlButton.setPreferredSize(size)", "contents": "setPreferredSize(size)" },
{ "trigger": "cc.ControlButton.getCurrentTitleColor()", "contents": "getCurrentTitleColor()" },
{ "trigger": "cc.ControlButton.setZoomOnTouchDown(bool)", "contents": "setZoomOnTouchDown(bool)" },
{ "trigger": "cc.ControlButton.setBackgroundSprite(scale9sprite)", "contents": "setBackgroundSprite(scale9sprite)" },
{ "trigger": "cc.ControlButton.getBackgroundSpriteForState(state)", "contents": "getBackgroundSpriteForState(state)" },
{ "trigger": "cc.ControlButton.getHorizontalOrigin()", "contents": "getHorizontalOrigin()" },
{ "trigger": "cc.ControlButton.initWithTitleAndFontNameAndFontSize(str, str, float)", "contents": "initWithTitleAndFontNameAndFontSize(str, str, float)" },
{ "trigger": "cc.ControlButton.setTitleBMFontForState(str, state)", "contents": "setTitleBMFontForState(str, state)" },
{ "trigger": "cc.ControlButton.getScaleRatio()", "contents": "getScaleRatio()" },
{ "trigger": "cc.ControlButton.getTitleTTFForState(state)", "contents": "getTitleTTFForState(state)" },
{ "trigger": "cc.ControlButton.getBackgroundSprite()", "contents": "getBackgroundSprite()" },
{ "trigger": "cc.ControlButton.getTitleColorForState(state)", "contents": "getTitleColorForState(state)" },
{ "trigger": "cc.ControlButton.setTitleColorForState(color3b, state)", "contents": "setTitleColorForState(color3b, state)" },
{ "trigger": "cc.ControlButton.doesAdjustBackgroundImage()", "contents": "doesAdjustBackgroundImage()" },
{ "trigger": "cc.ControlButton.setBackgroundSpriteFrameForState(spriteframe, state)", "contents": "setBackgroundSpriteFrameForState(spriteframe, state)" },
{ "trigger": "cc.ControlButton.setBackgroundSpriteForState(scale9sprite, state)", "contents": "setBackgroundSpriteForState(scale9sprite, state)" },
{ "trigger": "cc.ControlButton.setScaleRatio(float)", "contents": "setScaleRatio(float)" },
{ "trigger": "cc.ControlButton.getTitleBMFontForState(state)", "contents": "getTitleBMFontForState(state)" },
{ "trigger": "cc.ControlButton.getTitleLabel()", "contents": "getTitleLabel()" },
{ "trigger": "cc.ControlButton.getPreferredSize()", "contents": "getPreferredSize()" },
{ "trigger": "cc.ControlButton.getVerticalMargin()", "contents": "getVerticalMargin()" },
{ "trigger": "cc.ControlButton.getTitleLabelForState(state)", "contents": "getTitleLabelForState(state)" },
{ "trigger": "cc.ControlButton.setMargins(int, int)", "contents": "setMargins(int, int)" },
{ "trigger": "cc.ControlButton.getCurrentTitle()", "contents": "getCurrentTitle()" },
{ "trigger": "cc.ControlButton.initWithLabelAndBackgroundSprite(node, scale9sprite)", "contents": "initWithLabelAndBackgroundSprite(node, scale9sprite)" },
{ "trigger": "cc.ControlButton.getZoomOnTouchDown()", "contents": "getZoomOnTouchDown()" },
{ "trigger": "cc.ControlButton.getTitleForState(state)", "contents": "getTitleForState(state)" },
{ "trigger": "cc.ControlButton.create(str, str, float)", "contents": "create(str, str, float)" },
{ "trigger": "cc.ControlButton.ControlButton()", "contents": "ControlButton()" },
{ "trigger": "cc.ControlHuePicker.initWithTargetAndPos(node, vec2)", "contents": "initWithTargetAndPos(node, vec2)" },
{ "trigger": "cc.ControlHuePicker.setHue(float)", "contents": "setHue(float)" },
{ "trigger": "cc.ControlHuePicker.getStartPos()", "contents": "getStartPos()" },
{ "trigger": "cc.ControlHuePicker.getHue()", "contents": "getHue()" },
{ "trigger": "cc.ControlHuePicker.getSlider()", "contents": "getSlider()" },
{ "trigger": "cc.ControlHuePicker.setBackground(sprite)", "contents": "setBackground(sprite)" },
{ "trigger": "cc.ControlHuePicker.setHuePercentage(float)", "contents": "setHuePercentage(float)" },
{ "trigger": "cc.ControlHuePicker.getBackground()", "contents": "getBackground()" },
{ "trigger": "cc.ControlHuePicker.getHuePercentage()", "contents": "getHuePercentage()" },
{ "trigger": "cc.ControlHuePicker.setSlider(sprite)", "contents": "setSlider(sprite)" },
{ "trigger": "cc.ControlHuePicker.create(node, vec2)", "contents": "create(node, vec2)" },
{ "trigger": "cc.ControlHuePicker.ControlHuePicker()", "contents": "ControlHuePicker()" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.getShadow()", "contents": "getShadow()" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.initWithTargetAndPos(node, vec2)", "contents": "initWithTargetAndPos(node, vec2)" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.getStartPos()", "contents": "getStartPos()" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.getOverlay()", "contents": "getOverlay()" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.getSlider()", "contents": "getSlider()" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.getBackground()", "contents": "getBackground()" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.getSaturation()", "contents": "getSaturation()" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.getBrightness()", "contents": "getBrightness()" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.create(node, vec2)", "contents": "create(node, vec2)" },
{ "trigger": "cc.ControlSaturationBrightnessPicker.ControlSaturationBrightnessPicker()", "contents": "ControlSaturationBrightnessPicker()" },
{ "trigger": "cc.ControlColourPicker.hueSliderValueChanged(ref, eventtype)", "contents": "hueSliderValueChanged(ref, eventtype)" },
{ "trigger": "cc.ControlColourPicker.getHuePicker()", "contents": "getHuePicker()" },
{ "trigger": "cc.ControlColourPicker.getcolourPicker()", "contents": "getcolourPicker()" },
{ "trigger": "cc.ControlColourPicker.setBackground(sprite)", "contents": "setBackground(sprite)" },
{ "trigger": "cc.ControlColourPicker.setcolourPicker(controlsaturationbrightnesspicker)", "contents": "setcolourPicker(controlsaturationbrightnesspicker)" },
{ "trigger": "cc.ControlColourPicker.colourSliderValueChanged(ref, eventtype)", "contents": "colourSliderValueChanged(ref, eventtype)" },
{ "trigger": "cc.ControlColourPicker.setHuePicker(controlhuepicker)", "contents": "setHuePicker(controlhuepicker)" },
{ "trigger": "cc.ControlColourPicker.getBackground()", "contents": "getBackground()" },
{ "trigger": "cc.ControlColourPicker.create()", "contents": "create()" },
{ "trigger": "cc.ControlColourPicker.ControlColourPicker()", "contents": "ControlColourPicker()" },
{ "trigger": "cc.ControlPotentiometer.setPreviousLocation(vec2)", "contents": "setPreviousLocation(vec2)" },
{ "trigger": "cc.ControlPotentiometer.setValue(float)", "contents": "setValue(float)" },
{ "trigger": "cc.ControlPotentiometer.getProgressTimer()", "contents": "getProgressTimer()" },
{ "trigger": "cc.ControlPotentiometer.getMaximumValue()", "contents": "getMaximumValue()" },
{ "trigger": "cc.ControlPotentiometer.angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(vec2, vec2, vec2, vec2)", "contents": "angleInDegreesBetweenLineFromPoint_toPoint_toLineFromPoint_toPoint(vec2, vec2, vec2, vec2)" },
{ "trigger": "cc.ControlPotentiometer.potentiometerBegan(vec2)", "contents": "potentiometerBegan(vec2)" },
{ "trigger": "cc.ControlPotentiometer.setMaximumValue(float)", "contents": "setMaximumValue(float)" },
{ "trigger": "cc.ControlPotentiometer.getMinimumValue()", "contents": "getMinimumValue()" },
{ "trigger": "cc.ControlPotentiometer.setThumbSprite(sprite)", "contents": "setThumbSprite(sprite)" },
{ "trigger": "cc.ControlPotentiometer.getValue()", "contents": "getValue()" },
{ "trigger": "cc.ControlPotentiometer.getPreviousLocation()", "contents": "getPreviousLocation()" },
{ "trigger": "cc.ControlPotentiometer.distanceBetweenPointAndPoint(vec2, vec2)", "contents": "distanceBetweenPointAndPoint(vec2, vec2)" },
{ "trigger": "cc.ControlPotentiometer.potentiometerEnded(vec2)", "contents": "potentiometerEnded(vec2)" },
{ "trigger": "cc.ControlPotentiometer.setProgressTimer(progresstimer)", "contents": "setProgressTimer(progresstimer)" },
{ "trigger": "cc.ControlPotentiometer.setMinimumValue(float)", "contents": "setMinimumValue(float)" },
{ "trigger": "cc.ControlPotentiometer.getThumbSprite()", "contents": "getThumbSprite()" },
{ "trigger": "cc.ControlPotentiometer.initWithTrackSprite_ProgressTimer_ThumbSprite(sprite, progresstimer, sprite)", "contents": "initWithTrackSprite_ProgressTimer_ThumbSprite(sprite, progresstimer, sprite)" },
{ "trigger": "cc.ControlPotentiometer.potentiometerMoved(vec2)", "contents": "potentiometerMoved(vec2)" },
{ "trigger": "cc.ControlPotentiometer.create(char, char, char)", "contents": "create(char, char, char)" },
{ "trigger": "cc.ControlPotentiometer.ControlPotentiometer()", "contents": "ControlPotentiometer()" },
{ "trigger": "cc.ControlSlider.setBackgroundSprite(sprite)", "contents": "setBackgroundSprite(sprite)" },
{ "trigger": "cc.ControlSlider.getMaximumAllowedValue()", "contents": "getMaximumAllowedValue()" },
{ "trigger": "cc.ControlSlider.initWithSprites(sprite, sprite, sprite, sprite)", "contents": "initWithSprites(sprite, sprite, sprite, sprite)" },
{ "trigger": "cc.ControlSlider.getMinimumAllowedValue()", "contents": "getMinimumAllowedValue()" },
{ "trigger": "cc.ControlSlider.getMaximumValue()", "contents": "getMaximumValue()" },
{ "trigger": "cc.ControlSlider.getSelectedThumbSprite()", "contents": "getSelectedThumbSprite()" },
{ "trigger": "cc.ControlSlider.setProgressSprite(sprite)", "contents": "setProgressSprite(sprite)" },
{ "trigger": "cc.ControlSlider.setMaximumValue(float)", "contents": "setMaximumValue(float)" },
{ "trigger": "cc.ControlSlider.getMinimumValue()", "contents": "getMinimumValue()" },
{ "trigger": "cc.ControlSlider.setThumbSprite(sprite)", "contents": "setThumbSprite(sprite)" },
{ "trigger": "cc.ControlSlider.getValue()", "contents": "getValue()" },
{ "trigger": "cc.ControlSlider.getBackgroundSprite()", "contents": "getBackgroundSprite()" },
{ "trigger": "cc.ControlSlider.getThumbSprite()", "contents": "getThumbSprite()" },
{ "trigger": "cc.ControlSlider.setValue(float)", "contents": "setValue(float)" },
{ "trigger": "cc.ControlSlider.locationFromTouch(touch)", "contents": "locationFromTouch(touch)" },
{ "trigger": "cc.ControlSlider.setMinimumValue(float)", "contents": "setMinimumValue(float)" },
{ "trigger": "cc.ControlSlider.setMinimumAllowedValue(float)", "contents": "setMinimumAllowedValue(float)" },
{ "trigger": "cc.ControlSlider.getProgressSprite()", "contents": "getProgressSprite()" },
{ "trigger": "cc.ControlSlider.setSelectedThumbSprite(sprite)", "contents": "setSelectedThumbSprite(sprite)" },
{ "trigger": "cc.ControlSlider.setMaximumAllowedValue(float)", "contents": "setMaximumAllowedValue(float)" },
{ "trigger": "cc.ControlSlider.create(sprite, sprite, sprite, sprite)", "contents": "create(sprite, sprite, sprite, sprite)" },
{ "trigger": "cc.ControlSlider.ControlSlider()", "contents": "ControlSlider()" },
{ "trigger": "cc.ControlStepper.getMinusSprite()", "contents": "getMinusSprite()" },
{ "trigger": "cc.ControlStepper.setValue(double)", "contents": "setValue(double)" },
{ "trigger": "cc.ControlStepper.setStepValue(double)", "contents": "setStepValue(double)" },
{ "trigger": "cc.ControlStepper.initWithMinusSpriteAndPlusSprite(sprite, sprite)", "contents": "initWithMinusSpriteAndPlusSprite(sprite, sprite)" },
{ "trigger": "cc.ControlStepper.setValueWithSendingEvent(double, bool)", "contents": "setValueWithSendingEvent(double, bool)" },
{ "trigger": "cc.ControlStepper.setMaximumValue(double)", "contents": "setMaximumValue(double)" },
{ "trigger": "cc.ControlStepper.getMinusLabel()", "contents": "getMinusLabel()" },
{ "trigger": "cc.ControlStepper.getPlusLabel()", "contents": "getPlusLabel()" },
{ "trigger": "cc.ControlStepper.setWraps(bool)", "contents": "setWraps(bool)" },
{ "trigger": "cc.ControlStepper.setMinusLabel(label)", "contents": "setMinusLabel(label)" },
{ "trigger": "cc.ControlStepper.startAutorepeat()", "contents": "startAutorepeat()" },
{ "trigger": "cc.ControlStepper.updateLayoutUsingTouchLocation(vec2)", "contents": "updateLayoutUsingTouchLocation(vec2)" },
{ "trigger": "cc.ControlStepper.isContinuous()", "contents": "isContinuous()" },
{ "trigger": "cc.ControlStepper.stopAutorepeat()", "contents": "stopAutorepeat()" },
{ "trigger": "cc.ControlStepper.setMinimumValue(double)", "contents": "setMinimumValue(double)" },
{ "trigger": "cc.ControlStepper.setPlusLabel(label)", "contents": "setPlusLabel(label)" },
{ "trigger": "cc.ControlStepper.getValue()", "contents": "getValue()" },
{ "trigger": "cc.ControlStepper.getPlusSprite()", "contents": "getPlusSprite()" },
{ "trigger": "cc.ControlStepper.setPlusSprite(sprite)", "contents": "setPlusSprite(sprite)" },
{ "trigger": "cc.ControlStepper.setMinusSprite(sprite)", "contents": "setMinusSprite(sprite)" },
{ "trigger": "cc.ControlStepper.create(sprite, sprite)", "contents": "create(sprite, sprite)" },
{ "trigger": "cc.ControlStepper.ControlStepper()", "contents": "ControlStepper()" },
{ "trigger": "cc.ControlSwitch.setOn(bool, bool)", "contents": "setOn(bool, bool)" },
{ "trigger": "cc.ControlSwitch.locationFromTouch(touch)", "contents": "locationFromTouch(touch)" },
{ "trigger": "cc.ControlSwitch.isOn()", "contents": "isOn()" },
{ "trigger": "cc.ControlSwitch.initWithMaskSprite(sprite, sprite, sprite, sprite, label, label)", "contents": "initWithMaskSprite(sprite, sprite, sprite, sprite, label, label)" },
{ "trigger": "cc.ControlSwitch.hasMoved()", "contents": "hasMoved()" },
{ "trigger": "cc.ControlSwitch.create(sprite, sprite, sprite, sprite, label, label)", "contents": "create(sprite, sprite, sprite, sprite, label, label)" },
{ "trigger": "cc.ControlSwitch.ControlSwitch()", "contents": "ControlSwitch()" },
{ "trigger": "cc.ScrollView.isClippingToBounds()", "contents": "isClippingToBounds()" },
{ "trigger": "cc.ScrollView.setContainer(node)", "contents": "setContainer(node)" },
{ "trigger": "cc.ScrollView.setContentOffsetInDuration(vec2, float)", "contents": "setContentOffsetInDuration(vec2, float)" },
{ "trigger": "cc.ScrollView.setZoomScaleInDuration(float, float)", "contents": "setZoomScaleInDuration(float, float)" },
{ "trigger": "cc.ScrollView.updateTweenAction(float, str)", "contents": "updateTweenAction(float, str)" },
{ "trigger": "cc.ScrollView.setMaxScale(float)", "contents": "setMaxScale(float)" },
{ "trigger": "cc.ScrollView.hasVisibleParents()", "contents": "hasVisibleParents()" },
{ "trigger": "cc.ScrollView.getDirection()", "contents": "getDirection()" },
{ "trigger": "cc.ScrollView.getContainer()", "contents": "getContainer()" },
{ "trigger": "cc.ScrollView.setMinScale(float)", "contents": "setMinScale(float)" },
{ "trigger": "cc.ScrollView.getZoomScale()", "contents": "getZoomScale()" },
{ "trigger": "cc.ScrollView.updateInset()", "contents": "updateInset()" },
{ "trigger": "cc.ScrollView.initWithViewSize(size, node)", "contents": "initWithViewSize(size, node)" },
{ "trigger": "cc.ScrollView.pause(ref)", "contents": "pause(ref)" },
{ "trigger": "cc.ScrollView.setDirection(direction)", "contents": "setDirection(direction)" },
{ "trigger": "cc.ScrollView.setBounceable(bool)", "contents": "setBounceable(bool)" },
{ "trigger": "cc.ScrollView.setContentOffset(vec2, bool)", "contents": "setContentOffset(vec2, bool)" },
{ "trigger": "cc.ScrollView.isDragging()", "contents": "isDragging()" },
{ "trigger": "cc.ScrollView.isTouchEnabled()", "contents": "isTouchEnabled()" },
{ "trigger": "cc.ScrollView.isBounceable()", "contents": "isBounceable()" },
{ "trigger": "cc.ScrollView.setTouchEnabled(bool)", "contents": "setTouchEnabled(bool)" },
{ "trigger": "cc.ScrollView.getContentOffset()", "contents": "getContentOffset()" },
{ "trigger": "cc.ScrollView.resume(ref)", "contents": "resume(ref)" },
{ "trigger": "cc.ScrollView.setClippingToBounds(bool)", "contents": "setClippingToBounds(bool)" },
{ "trigger": "cc.ScrollView.setViewSize(size)", "contents": "setViewSize(size)" },
{ "trigger": "cc.ScrollView.getViewSize()", "contents": "getViewSize()" },
{ "trigger": "cc.ScrollView.maxContainerOffset()", "contents": "maxContainerOffset()" },
{ "trigger": "cc.ScrollView.isTouchMoved()", "contents": "isTouchMoved()" },
{ "trigger": "cc.ScrollView.isNodeVisible(node)", "contents": "isNodeVisible(node)" },
{ "trigger": "cc.ScrollView.minContainerOffset()", "contents": "minContainerOffset()" },
{ "trigger": "cc.ScrollView.setZoomScale(float, bool)", "contents": "setZoomScale(float, bool)" },
{ "trigger": "cc.ScrollView.create(size, node)", "contents": "create(size, node)" },
{ "trigger": "cc.ScrollView.ScrollView()", "contents": "ScrollView()" },
{ "trigger": "cc.TableViewCell.reset()", "contents": "reset()" },
{ "trigger": "cc.TableViewCell.getIdx()", "contents": "getIdx()" },
{ "trigger": "cc.TableViewCell.setIdx(long)", "contents": "setIdx(long)" },
{ "trigger": "cc.TableViewCell.create()", "contents": "create()" },
{ "trigger": "cc.TableViewCell.TableViewCell()", "contents": "TableViewCell()" },
{ "trigger": "cc.TableView.updateCellAtIndex(long)", "contents": "updateCellAtIndex(long)" },
{ "trigger": "cc.TableView.setVerticalFillOrder(verticalfillorder)", "contents": "setVerticalFillOrder(verticalfillorder)" },
{ "trigger": "cc.TableView.scrollViewDidZoom(scrollview)", "contents": "scrollViewDidZoom(scrollview)" },
{ "trigger": "cc.TableView._updateContentSize()", "contents": "_updateContentSize()" },
{ "trigger": "cc.TableView.getVerticalFillOrder()", "contents": "getVerticalFillOrder()" },
{ "trigger": "cc.TableView.removeCellAtIndex(long)", "contents": "removeCellAtIndex(long)" },
{ "trigger": "cc.TableView.initWithViewSize(size, node)", "contents": "initWithViewSize(size, node)" },
{ "trigger": "cc.TableView.scrollViewDidScroll(scrollview)", "contents": "scrollViewDidScroll(scrollview)" },
{ "trigger": "cc.TableView.reloadData()", "contents": "reloadData()" },
{ "trigger": "cc.TableView.insertCellAtIndex(long)", "contents": "insertCellAtIndex(long)" },
{ "trigger": "cc.TableView.cellAtIndex(long)", "contents": "cellAtIndex(long)" },
{ "trigger": "cc.TableView.dequeueCell()", "contents": "dequeueCell()" },
{ "trigger": "cc.TableView.TableView()", "contents": "TableView()" },
{ "trigger": "cc.EventAssetsManagerEx.getAssetsManagerEx()", "contents": "getAssetsManagerEx()" },
{ "trigger": "cc.EventAssetsManagerEx.getAssetId()", "contents": "getAssetId()" },
{ "trigger": "cc.EventAssetsManagerEx.getCURLECode()", "contents": "getCURLECode()" },
{ "trigger": "cc.EventAssetsManagerEx.getMessage()", "contents": "getMessage()" },
{ "trigger": "cc.EventAssetsManagerEx.getCURLMCode()", "contents": "getCURLMCode()" },
{ "trigger": "cc.EventAssetsManagerEx.getPercentByFile()", "contents": "getPercentByFile()" },
{ "trigger": "cc.EventAssetsManagerEx.getEventCode()", "contents": "getEventCode()" },
{ "trigger": "cc.EventAssetsManagerEx.getPercent()", "contents": "getPercent()" },
{ "trigger": "cc.EventAssetsManagerEx.EventAssetsManagerEx(str, assetsmanagerex, eventcode, float, float, str, str, int, int)", "contents": "EventAssetsManagerEx(str, assetsmanagerex, eventcode, float, float, str, str, int, int)" },
{ "trigger": "cc.Manifest.getManifestFileUrl()", "contents": "getManifestFileUrl()" },
{ "trigger": "cc.Manifest.isVersionLoaded()", "contents": "isVersionLoaded()" },
{ "trigger": "cc.Manifest.isLoaded()", "contents": "isLoaded()" },
{ "trigger": "cc.Manifest.getPackageUrl()", "contents": "getPackageUrl()" },
{ "trigger": "cc.Manifest.getVersion()", "contents": "getVersion()" },
{ "trigger": "cc.Manifest.getVersionFileUrl()", "contents": "getVersionFileUrl()" },
{ "trigger": "cc.Manifest.getSearchPaths()", "contents": "getSearchPaths()" },
{ "trigger": "cc.AssetsManagerEx.getState()", "contents": "getState()" },
{ "trigger": "cc.AssetsManagerEx.checkUpdate()", "contents": "checkUpdate()" },
{ "trigger": "cc.AssetsManagerEx.getStoragePath()", "contents": "getStoragePath()" },
{ "trigger": "cc.AssetsManagerEx.update()", "contents": "update()" },
{ "trigger": "cc.AssetsManagerEx.getLocalManifest()", "contents": "getLocalManifest()" },
{ "trigger": "cc.AssetsManagerEx.getRemoteManifest()", "contents": "getRemoteManifest()" },
{ "trigger": "cc.AssetsManagerEx.downloadFailedAssets()", "contents": "downloadFailedAssets()" },
{ "trigger": "cc.AssetsManagerEx.create(str, str)", "contents": "create(str, str)" },
{ "trigger": "cc.AssetsManagerEx.AssetsManagerEx(str, str)", "contents": "AssetsManagerEx(str, str)" },
{ "trigger": "cc.EventListenerAssetsManagerEx.init(assetsmanagerex, func)", "contents": "init(assetsmanagerex, func)" },
{ "trigger": "cc.EventListenerAssetsManagerEx.create(assetsmanagerex, func)", "contents": "create(assetsmanagerex, func)" },
{ "trigger": "cc.EventListenerAssetsManagerEx.EventListenerAssetsManagerEx()", "contents": "EventListenerAssetsManagerEx()" },
{ "trigger": "sp.SkeletonRenderer.setTimeScale(float)", "contents": "setTimeScale(float)" },
{ "trigger": "sp.SkeletonRenderer.getDebugSlotsEnabled()", "contents": "getDebugSlotsEnabled()" },
{ "trigger": "sp.SkeletonRenderer.setAttachment(str, str)", "contents": "setAttachment(str, str)" },
{ "trigger": "sp.SkeletonRenderer.setBonesToSetupPose()", "contents": "setBonesToSetupPose()" },
{ "trigger": "sp.SkeletonRenderer.isOpacityModifyRGB()", "contents": "isOpacityModifyRGB()" },
{ "trigger": "sp.SkeletonRenderer.initWithData(spskeletondata, bool)", "contents": "initWithData(spskeletondata, bool)" },
{ "trigger": "sp.SkeletonRenderer.setDebugSlotsEnabled(bool)", "contents": "setDebugSlotsEnabled(bool)" },
{ "trigger": "sp.SkeletonRenderer.setSlotsToSetupPose()", "contents": "setSlotsToSetupPose()" },
{ "trigger": "sp.SkeletonRenderer.setOpacityModifyRGB(bool)", "contents": "setOpacityModifyRGB(bool)" },
{ "trigger": "sp.SkeletonRenderer.setToSetupPose()", "contents": "setToSetupPose()" },
{ "trigger": "sp.SkeletonRenderer.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "sp.SkeletonRenderer.drawSkeleton(mat4, int)", "contents": "drawSkeleton(mat4, int)" },
{ "trigger": "sp.SkeletonRenderer.updateWorldTransform()", "contents": "updateWorldTransform()" },
{ "trigger": "sp.SkeletonRenderer.initialize()", "contents": "initialize()" },
{ "trigger": "sp.SkeletonRenderer.setDebugBonesEnabled(bool)", "contents": "setDebugBonesEnabled(bool)" },
{ "trigger": "sp.SkeletonRenderer.getDebugBonesEnabled()", "contents": "getDebugBonesEnabled()" },
{ "trigger": "sp.SkeletonRenderer.getTimeScale()", "contents": "getTimeScale()" },
{ "trigger": "sp.SkeletonRenderer.initWithFile(str, spatlas, float)", "contents": "initWithFile(str, spatlas, float)" },
{ "trigger": "sp.SkeletonRenderer.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "sp.SkeletonRenderer.setSkin(str)", "contents": "setSkin(str)" },
{ "trigger": "sp.SkeletonRenderer.getSkeleton()", "contents": "getSkeleton()" },
{ "trigger": "sp.SkeletonRenderer.createWithFile(str, spatlas, float)", "contents": "createWithFile(str, spatlas, float)" },
{ "trigger": "sp.SkeletonRenderer.SkeletonRenderer(str, str, float)", "contents": "SkeletonRenderer(str, str, float)" },
{ "trigger": "sp.SkeletonAnimation.setStartListener(func)", "contents": "setStartListener(func)" },
{ "trigger": "sp.SkeletonAnimation.setTrackEventListener(sptrackentry, func)", "contents": "setTrackEventListener(sptrackentry, func)" },
{ "trigger": "sp.SkeletonAnimation.getState()", "contents": "getState()" },
{ "trigger": "sp.SkeletonAnimation.setTrackCompleteListener(sptrackentry, func)", "contents": "setTrackCompleteListener(sptrackentry, func)" },
{ "trigger": "sp.SkeletonAnimation.onTrackEntryEvent(int, speventtype, spevent, int)", "contents": "onTrackEntryEvent(int, speventtype, spevent, int)" },
{ "trigger": "sp.SkeletonAnimation.setTrackStartListener(sptrackentry, func)", "contents": "setTrackStartListener(sptrackentry, func)" },
{ "trigger": "sp.SkeletonAnimation.update(float)", "contents": "update(float)" },
{ "trigger": "sp.SkeletonAnimation.setCompleteListener(func)", "contents": "setCompleteListener(func)" },
{ "trigger": "sp.SkeletonAnimation.setTrackEndListener(sptrackentry, func)", "contents": "setTrackEndListener(sptrackentry, func)" },
{ "trigger": "sp.SkeletonAnimation.setEventListener(func)", "contents": "setEventListener(func)" },
{ "trigger": "sp.SkeletonAnimation.setMix(str, str, float)", "contents": "setMix(str, str, float)" },
{ "trigger": "sp.SkeletonAnimation.setEndListener(func)", "contents": "setEndListener(func)" },
{ "trigger": "sp.SkeletonAnimation.initialize()", "contents": "initialize()" },
{ "trigger": "sp.SkeletonAnimation.clearTracks()", "contents": "clearTracks()" },
{ "trigger": "sp.SkeletonAnimation.clearTrack()", "contents": "clearTrack()" },
{ "trigger": "sp.SkeletonAnimation.onAnimationStateEvent(int, speventtype, spevent, int)", "contents": "onAnimationStateEvent(int, speventtype, spevent, int)" },
{ "trigger": "sp.SkeletonAnimation.createWithFile(str, spatlas, float)", "contents": "createWithFile(str, spatlas, float)" },
{ "trigger": "sp.SkeletonAnimation.SkeletonAnimation(str, str, float)", "contents": "SkeletonAnimation(str, str, float)" },
{ "trigger": "ccs.ActionObject.setCurrentTime(float)", "contents": "setCurrentTime(float)" },
{ "trigger": "ccs.ActionObject.pause()", "contents": "pause()" },
{ "trigger": "ccs.ActionObject.setName(char)", "contents": "setName(char)" },
{ "trigger": "ccs.ActionObject.setUnitTime(float)", "contents": "setUnitTime(float)" },
{ "trigger": "ccs.ActionObject.getTotalTime()", "contents": "getTotalTime()" },
{ "trigger": "ccs.ActionObject.getName()", "contents": "getName()" },
{ "trigger": "ccs.ActionObject.stop()", "contents": "stop()" },
{ "trigger": "ccs.ActionObject.play(callfunc)", "contents": "play(callfunc)" },
{ "trigger": "ccs.ActionObject.getCurrentTime()", "contents": "getCurrentTime()" },
{ "trigger": "ccs.ActionObject.removeActionNode(actionnode)", "contents": "removeActionNode(actionnode)" },
{ "trigger": "ccs.ActionObject.getLoop()", "contents": "getLoop()" },
{ "trigger": "ccs.ActionObject.initWithBinary(cocoloader, stexpcoconode, ref)", "contents": "initWithBinary(cocoloader, stexpcoconode, ref)" },
{ "trigger": "ccs.ActionObject.addActionNode(actionnode)", "contents": "addActionNode(actionnode)" },
{ "trigger": "ccs.ActionObject.getUnitTime()", "contents": "getUnitTime()" },
{ "trigger": "ccs.ActionObject.isPlaying()", "contents": "isPlaying()" },
{ "trigger": "ccs.ActionObject.updateToFrameByTime(float)", "contents": "updateToFrameByTime(float)" },
{ "trigger": "ccs.ActionObject.setLoop(bool)", "contents": "setLoop(bool)" },
{ "trigger": "ccs.ActionObject.simulationActionUpdate(float)", "contents": "simulationActionUpdate(float)" },
{ "trigger": "ccs.ActionObject.ActionObject()", "contents": "ActionObject()" },
{ "trigger": "ccs.ActionManagerEx.stopActionByName(char, char)", "contents": "stopActionByName(char, char)" },
{ "trigger": "ccs.ActionManagerEx.getActionByName(char, char)", "contents": "getActionByName(char, char)" },
{ "trigger": "ccs.ActionManagerEx.initWithBinary(char, ref, cocoloader, stexpcoconode)", "contents": "initWithBinary(char, ref, cocoloader, stexpcoconode)" },
{ "trigger": "ccs.ActionManagerEx.playActionByName(char, char, callfunc)", "contents": "playActionByName(char, char, callfunc)" },
{ "trigger": "ccs.ActionManagerEx.releaseActions()", "contents": "releaseActions()" },
{ "trigger": "ccs.ActionManagerEx.destroyInstance()", "contents": "destroyInstance()" },
{ "trigger": "ccs.ActionManagerEx.getInstance()", "contents": "getInstance()" },
{ "trigger": "ccs.BaseData.getColor()", "contents": "getColor()" },
{ "trigger": "ccs.BaseData.setColor(color4b)", "contents": "setColor(color4b)" },
{ "trigger": "ccs.BaseData.create()", "contents": "create()" },
{ "trigger": "ccs.BaseData.BaseData()", "contents": "BaseData()" },
{ "trigger": "ccs.MovementData.getMovementBoneData(str)", "contents": "getMovementBoneData(str)" },
{ "trigger": "ccs.MovementData.addMovementBoneData(movementbonedata)", "contents": "addMovementBoneData(movementbonedata)" },
{ "trigger": "ccs.MovementData.create()", "contents": "create()" },
{ "trigger": "ccs.MovementData.MovementData()", "contents": "MovementData()" },
{ "trigger": "ccs.AnimationData.getMovement(str)", "contents": "getMovement(str)" },
{ "trigger": "ccs.AnimationData.getMovementCount()", "contents": "getMovementCount()" },
{ "trigger": "ccs.AnimationData.addMovement(movementdata)", "contents": "addMovement(movementdata)" },
{ "trigger": "ccs.AnimationData.create()", "contents": "create()" },
{ "trigger": "ccs.AnimationData.AnimationData()", "contents": "AnimationData()" },
{ "trigger": "ccs.ContourData.init()", "contents": "init()" },
{ "trigger": "ccs.ContourData.addVertex(vec2)", "contents": "addVertex(vec2)" },
{ "trigger": "ccs.ContourData.create()", "contents": "create()" },
{ "trigger": "ccs.ContourData.ContourData()", "contents": "ContourData()" },
{ "trigger": "ccs.TextureData.getContourData(int)", "contents": "getContourData(int)" },
{ "trigger": "ccs.TextureData.init()", "contents": "init()" },
{ "trigger": "ccs.TextureData.addContourData(contourdata)", "contents": "addContourData(contourdata)" },
{ "trigger": "ccs.TextureData.create()", "contents": "create()" },
{ "trigger": "ccs.TextureData.TextureData()", "contents": "TextureData()" },
{ "trigger": "ccs.ProcessBase.play(int, int, int, int)", "contents": "play(int, int, int, int)" },
{ "trigger": "ccs.ProcessBase.pause()", "contents": "pause()" },
{ "trigger": "ccs.ProcessBase.getRawDuration()", "contents": "getRawDuration()" },
{ "trigger": "ccs.ProcessBase.resume()", "contents": "resume()" },
{ "trigger": "ccs.ProcessBase.setIsComplete(bool)", "contents": "setIsComplete(bool)" },
{ "trigger": "ccs.ProcessBase.stop()", "contents": "stop()" },
{ "trigger": "ccs.ProcessBase.update(float)", "contents": "update(float)" },
{ "trigger": "ccs.ProcessBase.getCurrentFrameIndex()", "contents": "getCurrentFrameIndex()" },
{ "trigger": "ccs.ProcessBase.isComplete()", "contents": "isComplete()" },
{ "trigger": "ccs.ProcessBase.getCurrentPercent()", "contents": "getCurrentPercent()" },
{ "trigger": "ccs.ProcessBase.setIsPause(bool)", "contents": "setIsPause(bool)" },
{ "trigger": "ccs.ProcessBase.getProcessScale()", "contents": "getProcessScale()" },
{ "trigger": "ccs.ProcessBase.isPause()", "contents": "isPause()" },
{ "trigger": "ccs.ProcessBase.isPlaying()", "contents": "isPlaying()" },
{ "trigger": "ccs.ProcessBase.setProcessScale(float)", "contents": "setProcessScale(float)" },
{ "trigger": "ccs.ProcessBase.setIsPlaying(bool)", "contents": "setIsPlaying(bool)" },
{ "trigger": "ccs.ProcessBase.ProcessBase()", "contents": "ProcessBase()" },
{ "trigger": "ccs.Tween.getAnimation()", "contents": "getAnimation()" },
{ "trigger": "ccs.Tween.gotoAndPause(int)", "contents": "gotoAndPause(int)" },
{ "trigger": "ccs.Tween.play(movementbonedata, int, int, int, int)", "contents": "play(movementbonedata, int, int, int, int)" },
{ "trigger": "ccs.Tween.gotoAndPlay(int)", "contents": "gotoAndPlay(int)" },
{ "trigger": "ccs.Tween.init(bone)", "contents": "init(bone)" },
{ "trigger": "ccs.Tween.setAnimation(armatureanimation)", "contents": "setAnimation(armatureanimation)" },
{ "trigger": "ccs.Tween.create(bone)", "contents": "create(bone)" },
{ "trigger": "ccs.Tween.Tween()", "contents": "Tween()" },
{ "trigger": "ccs.ColliderDetector.getBone()", "contents": "getBone()" },
{ "trigger": "ccs.ColliderDetector.getActive()", "contents": "getActive()" },
{ "trigger": "ccs.ColliderDetector.getColliderBodyList()", "contents": "getColliderBodyList()" },
{ "trigger": "ccs.ColliderDetector.updateTransform(mat4)", "contents": "updateTransform(mat4)" },
{ "trigger": "ccs.ColliderDetector.removeAll()", "contents": "removeAll()" },
{ "trigger": "ccs.ColliderDetector.init(bone)", "contents": "init(bone)" },
{ "trigger": "ccs.ColliderDetector.setActive(bool)", "contents": "setActive(bool)" },
{ "trigger": "ccs.ColliderDetector.setBone(bone)", "contents": "setBone(bone)" },
{ "trigger": "ccs.ColliderDetector.create(bone)", "contents": "create(bone)" },
{ "trigger": "ccs.DecorativeDisplay.getColliderDetector()", "contents": "getColliderDetector()" },
{ "trigger": "ccs.DecorativeDisplay.getDisplay()", "contents": "getDisplay()" },
{ "trigger": "ccs.DecorativeDisplay.setDisplay(node)", "contents": "setDisplay(node)" },
{ "trigger": "ccs.DecorativeDisplay.init()", "contents": "init()" },
{ "trigger": "ccs.DecorativeDisplay.setDisplayData(displaydata)", "contents": "setDisplayData(displaydata)" },
{ "trigger": "ccs.DecorativeDisplay.getDisplayData()", "contents": "getDisplayData()" },
{ "trigger": "ccs.DecorativeDisplay.setColliderDetector(colliderdetector)", "contents": "setColliderDetector(colliderdetector)" },
{ "trigger": "ccs.DecorativeDisplay.create()", "contents": "create()" },
{ "trigger": "ccs.DisplayManager.getCurrentDecorativeDisplay()", "contents": "getCurrentDecorativeDisplay()" },
{ "trigger": "ccs.DisplayManager.getDisplayRenderNode()", "contents": "getDisplayRenderNode()" },
{ "trigger": "ccs.DisplayManager.getAnchorPointInPoints()", "contents": "getAnchorPointInPoints()" },
{ "trigger": "ccs.DisplayManager.setCurrentDecorativeDisplay(decorativedisplay)", "contents": "setCurrentDecorativeDisplay(decorativedisplay)" },
{ "trigger": "ccs.DisplayManager.getDisplayRenderNodeType()", "contents": "getDisplayRenderNodeType()" },
{ "trigger": "ccs.DisplayManager.removeDisplay(int)", "contents": "removeDisplay(int)" },
{ "trigger": "ccs.DisplayManager.setForceChangeDisplay(bool)", "contents": "setForceChangeDisplay(bool)" },
{ "trigger": "ccs.DisplayManager.init(bone)", "contents": "init(bone)" },
{ "trigger": "ccs.DisplayManager.getContentSize()", "contents": "getContentSize()" },
{ "trigger": "ccs.DisplayManager.getBoundingBox()", "contents": "getBoundingBox()" },
{ "trigger": "ccs.DisplayManager.addDisplay(displaydata, int)", "contents": "addDisplay(displaydata, int)" },
{ "trigger": "ccs.DisplayManager.containPoint(float, float)", "contents": "containPoint(float, float)" },
{ "trigger": "ccs.DisplayManager.initDisplayList(bonedata)", "contents": "initDisplayList(bonedata)" },
{ "trigger": "ccs.DisplayManager.changeDisplayWithIndex(int, bool)", "contents": "changeDisplayWithIndex(int, bool)" },
{ "trigger": "ccs.DisplayManager.changeDisplayWithName(str, bool)", "contents": "changeDisplayWithName(str, bool)" },
{ "trigger": "ccs.DisplayManager.isForceChangeDisplay()", "contents": "isForceChangeDisplay()" },
{ "trigger": "ccs.DisplayManager.getDecorativeDisplayByIndex(int)", "contents": "getDecorativeDisplayByIndex(int)" },
{ "trigger": "ccs.DisplayManager.getCurrentDisplayIndex()", "contents": "getCurrentDisplayIndex()" },
{ "trigger": "ccs.DisplayManager.getAnchorPoint()", "contents": "getAnchorPoint()" },
{ "trigger": "ccs.DisplayManager.getDecorativeDisplayList()", "contents": "getDecorativeDisplayList()" },
{ "trigger": "ccs.DisplayManager.isVisible()", "contents": "isVisible()" },
{ "trigger": "ccs.DisplayManager.setVisible(bool)", "contents": "setVisible(bool)" },
{ "trigger": "ccs.DisplayManager.create(bone)", "contents": "create(bone)" },
{ "trigger": "ccs.DisplayManager.DisplayManager()", "contents": "DisplayManager()" },
{ "trigger": "ccs.Bone.isTransformDirty()", "contents": "isTransformDirty()" },
{ "trigger": "ccs.Bone.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "ccs.Bone.isIgnoreMovementBoneData()", "contents": "isIgnoreMovementBoneData()" },
{ "trigger": "ccs.Bone.updateZOrder()", "contents": "updateZOrder()" },
{ "trigger": "ccs.Bone.getDisplayRenderNode()", "contents": "getDisplayRenderNode()" },
{ "trigger": "ccs.Bone.isBlendDirty()", "contents": "isBlendDirty()" },
{ "trigger": "ccs.Bone.addChildBone(bone)", "contents": "addChildBone(bone)" },
{ "trigger": "ccs.Bone.getWorldInfo()", "contents": "getWorldInfo()" },
{ "trigger": "ccs.Bone.getTween()", "contents": "getTween()" },
{ "trigger": "ccs.Bone.getParentBone()", "contents": "getParentBone()" },
{ "trigger": "ccs.Bone.updateColor()", "contents": "updateColor()" },
{ "trigger": "ccs.Bone.setTransformDirty(bool)", "contents": "setTransformDirty(bool)" },
{ "trigger": "ccs.Bone.getDisplayRenderNodeType()", "contents": "getDisplayRenderNodeType()" },
{ "trigger": "ccs.Bone.removeDisplay(int)", "contents": "removeDisplay(int)" },
{ "trigger": "ccs.Bone.setBoneData(bonedata)", "contents": "setBoneData(bonedata)" },
{ "trigger": "ccs.Bone.init(str)", "contents": "init(str)" },
{ "trigger": "ccs.Bone.setParentBone(bone)", "contents": "setParentBone(bone)" },
{ "trigger": "ccs.Bone.addDisplay(displaydata, int)", "contents": "addDisplay(displaydata, int)" },
{ "trigger": "ccs.Bone.setIgnoreMovementBoneData(bool)", "contents": "setIgnoreMovementBoneData(bool)" },
{ "trigger": "ccs.Bone.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "ccs.Bone.removeFromParent(bool)", "contents": "removeFromParent(bool)" },
{ "trigger": "ccs.Bone.getColliderDetector()", "contents": "getColliderDetector()" },
{ "trigger": "ccs.Bone.getChildArmature()", "contents": "getChildArmature()" },
{ "trigger": "ccs.Bone.changeDisplayWithIndex(int, bool)", "contents": "changeDisplayWithIndex(int, bool)" },
{ "trigger": "ccs.Bone.changeDisplayWithName(str, bool)", "contents": "changeDisplayWithName(str, bool)" },
{ "trigger": "ccs.Bone.setArmature(armature)", "contents": "setArmature(armature)" },
{ "trigger": "ccs.Bone.setBlendDirty(bool)", "contents": "setBlendDirty(bool)" },
{ "trigger": "ccs.Bone.removeChildBone(bone, bool)", "contents": "removeChildBone(bone, bool)" },
{ "trigger": "ccs.Bone.setChildArmature(armature)", "contents": "setChildArmature(armature)" },
{ "trigger": "ccs.Bone.getNodeToArmatureTransform()", "contents": "getNodeToArmatureTransform()" },
{ "trigger": "ccs.Bone.getDisplayManager()", "contents": "getDisplayManager()" },
{ "trigger": "ccs.Bone.getArmature()", "contents": "getArmature()" },
{ "trigger": "ccs.Bone.create(str)", "contents": "create(str)" },
{ "trigger": "ccs.Bone.Bone()", "contents": "Bone()" },
{ "trigger": "ccs.BatchNode.create()", "contents": "create()" },
{ "trigger": "ccs.ArmatureAnimation.getSpeedScale()", "contents": "getSpeedScale()" },
{ "trigger": "ccs.ArmatureAnimation.play(str, int, int)", "contents": "play(str, int, int)" },
{ "trigger": "ccs.ArmatureAnimation.gotoAndPause(int)", "contents": "gotoAndPause(int)" },
{ "trigger": "ccs.ArmatureAnimation.playWithIndexes(array, int, bool)", "contents": "playWithIndexes(array, int, bool)" },
{ "trigger": "ccs.ArmatureAnimation.setAnimationData(animationdata)", "contents": "setAnimationData(animationdata)" },
{ "trigger": "ccs.ArmatureAnimation.setSpeedScale(float)", "contents": "setSpeedScale(float)" },
{ "trigger": "ccs.ArmatureAnimation.getAnimationData()", "contents": "getAnimationData()" },
{ "trigger": "ccs.ArmatureAnimation.gotoAndPlay(int)", "contents": "gotoAndPlay(int)" },
{ "trigger": "ccs.ArmatureAnimation.init(armature)", "contents": "init(armature)" },
{ "trigger": "ccs.ArmatureAnimation.playWithNames(array, int, bool)", "contents": "playWithNames(array, int, bool)" },
{ "trigger": "ccs.ArmatureAnimation.getMovementCount()", "contents": "getMovementCount()" },
{ "trigger": "ccs.ArmatureAnimation.playWithIndex(int, int, int)", "contents": "playWithIndex(int, int, int)" },
{ "trigger": "ccs.ArmatureAnimation.getCurrentMovementID()", "contents": "getCurrentMovementID()" },
{ "trigger": "ccs.ArmatureAnimation.create(armature)", "contents": "create(armature)" },
{ "trigger": "ccs.ArmatureAnimation.ArmatureAnimation()", "contents": "ArmatureAnimation()" },
{ "trigger": "ccs.ArmatureDataManager.getAnimationDatas()", "contents": "getAnimationDatas()" },
{ "trigger": "ccs.ArmatureDataManager.removeAnimationData(str)", "contents": "removeAnimationData(str)" },
{ "trigger": "ccs.ArmatureDataManager.addArmatureData(str, armaturedata, str)", "contents": "addArmatureData(str, armaturedata, str)" },
{ "trigger": "ccs.ArmatureDataManager.addArmatureFileInfo(str, str, str)", "contents": "addArmatureFileInfo(str, str, str)" },
{ "trigger": "ccs.ArmatureDataManager.removeArmatureFileInfo(str)", "contents": "removeArmatureFileInfo(str)" },
{ "trigger": "ccs.ArmatureDataManager.getTextureData(str)", "contents": "getTextureData(str)" },
{ "trigger": "ccs.ArmatureDataManager.getArmatureData(str)", "contents": "getArmatureData(str)" },
{ "trigger": "ccs.ArmatureDataManager.getAnimationData(str)", "contents": "getAnimationData(str)" },
{ "trigger": "ccs.ArmatureDataManager.addAnimationData(str, animationdata, str)", "contents": "addAnimationData(str, animationdata, str)" },
{ "trigger": "ccs.ArmatureDataManager.init()", "contents": "init()" },
{ "trigger": "ccs.ArmatureDataManager.removeArmatureData(str)", "contents": "removeArmatureData(str)" },
{ "trigger": "ccs.ArmatureDataManager.getArmatureDatas()", "contents": "getArmatureDatas()" },
{ "trigger": "ccs.ArmatureDataManager.removeTextureData(str)", "contents": "removeTextureData(str)" },
{ "trigger": "ccs.ArmatureDataManager.addTextureData(str, texturedata, str)", "contents": "addTextureData(str, texturedata, str)" },
{ "trigger": "ccs.ArmatureDataManager.isAutoLoadSpriteFile()", "contents": "isAutoLoadSpriteFile()" },
{ "trigger": "ccs.ArmatureDataManager.addSpriteFrameFromFile(str, str, str)", "contents": "addSpriteFrameFromFile(str, str, str)" },
{ "trigger": "ccs.ArmatureDataManager.destroyInstance()", "contents": "destroyInstance()" },
{ "trigger": "ccs.ArmatureDataManager.getInstance()", "contents": "getInstance()" },
{ "trigger": "ccs.Armature.getBone(str)", "contents": "getBone(str)" },
{ "trigger": "ccs.Armature.changeBoneParent(bone, str)", "contents": "changeBoneParent(bone, str)" },
{ "trigger": "ccs.Armature.setAnimation(armatureanimation)", "contents": "setAnimation(armatureanimation)" },
{ "trigger": "ccs.Armature.getBoneAtPoint(float, float)", "contents": "getBoneAtPoint(float, float)" },
{ "trigger": "ccs.Armature.getArmatureTransformDirty()", "contents": "getArmatureTransformDirty()" },
{ "trigger": "ccs.Armature.setVersion(float)", "contents": "setVersion(float)" },
{ "trigger": "ccs.Armature.updateOffsetPoint()", "contents": "updateOffsetPoint()" },
{ "trigger": "ccs.Armature.getParentBone()", "contents": "getParentBone()" },
{ "trigger": "ccs.Armature.removeBone(bone, bool)", "contents": "removeBone(bone, bool)" },
{ "trigger": "ccs.Armature.getBatchNode()", "contents": "getBatchNode()" },
{ "trigger": "ccs.Armature.init(str, bone)", "contents": "init(str, bone)" },
{ "trigger": "ccs.Armature.setParentBone(bone)", "contents": "setParentBone(bone)" },
{ "trigger": "ccs.Armature.setBatchNode(batchnode)", "contents": "setBatchNode(batchnode)" },
{ "trigger": "ccs.Armature.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "ccs.Armature.setArmatureData(armaturedata)", "contents": "setArmatureData(armaturedata)" },
{ "trigger": "ccs.Armature.addBone(bone, str)", "contents": "addBone(bone, str)" },
{ "trigger": "ccs.Armature.getArmatureData()", "contents": "getArmatureData()" },
{ "trigger": "ccs.Armature.getBoundingBox()", "contents": "getBoundingBox()" },
{ "trigger": "ccs.Armature.getVersion()", "contents": "getVersion()" },
{ "trigger": "ccs.Armature.getAnimation()", "contents": "getAnimation()" },
{ "trigger": "ccs.Armature.getOffsetPoints()", "contents": "getOffsetPoints()" },
{ "trigger": "ccs.Armature.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "ccs.Armature.getBoneDic()", "contents": "getBoneDic()" },
{ "trigger": "ccs.Armature.create(str, bone)", "contents": "create(str, bone)" },
{ "trigger": "ccs.Armature.Armature()", "contents": "Armature()" },
{ "trigger": "ccs.Skin.getBone()", "contents": "getBone()" },
{ "trigger": "ccs.Skin.getNodeToWorldTransformAR()", "contents": "getNodeToWorldTransformAR()" },
{ "trigger": "ccs.Skin.getDisplayName()", "contents": "getDisplayName()" },
{ "trigger": "ccs.Skin.updateArmatureTransform()", "contents": "updateArmatureTransform()" },
{ "trigger": "ccs.Skin.setBone(bone)", "contents": "setBone(bone)" },
{ "trigger": "ccs.Skin.create(str)", "contents": "create(str)" },
{ "trigger": "ccs.Skin.createWithSpriteFrameName(str)", "contents": "createWithSpriteFrameName(str)" },
{ "trigger": "ccs.Skin.Skin()", "contents": "Skin()" },
{ "trigger": "ccs.ComAttribute.getFloat(str, float)", "contents": "getFloat(str, float)" },
{ "trigger": "ccs.ComAttribute.getBool(str, bool)", "contents": "getBool(str, bool)" },
{ "trigger": "ccs.ComAttribute.getString(str, str)", "contents": "getString(str, str)" },
{ "trigger": "ccs.ComAttribute.setFloat(str, float)", "contents": "setFloat(str, float)" },
{ "trigger": "ccs.ComAttribute.setString(str, str)", "contents": "setString(str, str)" },
{ "trigger": "ccs.ComAttribute.setInt(str, int)", "contents": "setInt(str, int)" },
{ "trigger": "ccs.ComAttribute.parse(str)", "contents": "parse(str)" },
{ "trigger": "ccs.ComAttribute.getInt(str, int)", "contents": "getInt(str, int)" },
{ "trigger": "ccs.ComAttribute.setBool(str, bool)", "contents": "setBool(str, bool)" },
{ "trigger": "ccs.ComAttribute.create()", "contents": "create()" },
{ "trigger": "ccs.ComAttribute.ComAttribute()", "contents": "ComAttribute()" },
{ "trigger": "ccs.ComAudio.stopAllEffects()", "contents": "stopAllEffects()" },
{ "trigger": "ccs.ComAudio.getEffectsVolume()", "contents": "getEffectsVolume()" },
{ "trigger": "ccs.ComAudio.stopEffect(int)", "contents": "stopEffect(int)" },
{ "trigger": "ccs.ComAudio.getBackgroundMusicVolume()", "contents": "getBackgroundMusicVolume()" },
{ "trigger": "ccs.ComAudio.willPlayBackgroundMusic()", "contents": "willPlayBackgroundMusic()" },
{ "trigger": "ccs.ComAudio.setBackgroundMusicVolume(float)", "contents": "setBackgroundMusicVolume(float)" },
{ "trigger": "ccs.ComAudio.end()", "contents": "end()" },
{ "trigger": "ccs.ComAudio.stopBackgroundMusic(bool)", "contents": "stopBackgroundMusic(bool)" },
{ "trigger": "ccs.ComAudio.pauseBackgroundMusic()", "contents": "pauseBackgroundMusic()" },
{ "trigger": "ccs.ComAudio.isBackgroundMusicPlaying()", "contents": "isBackgroundMusicPlaying()" },
{ "trigger": "ccs.ComAudio.isLoop()", "contents": "isLoop()" },
{ "trigger": "ccs.ComAudio.resumeAllEffects()", "contents": "resumeAllEffects()" },
{ "trigger": "ccs.ComAudio.pauseAllEffects()", "contents": "pauseAllEffects()" },
{ "trigger": "ccs.ComAudio.preloadBackgroundMusic(char)", "contents": "preloadBackgroundMusic(char)" },
{ "trigger": "ccs.ComAudio.playBackgroundMusic(char, bool)", "contents": "playBackgroundMusic(char, bool)" },
{ "trigger": "ccs.ComAudio.playEffect(char, bool)", "contents": "playEffect(char, bool)" },
{ "trigger": "ccs.ComAudio.preloadEffect(char)", "contents": "preloadEffect(char)" },
{ "trigger": "ccs.ComAudio.setLoop(bool)", "contents": "setLoop(bool)" },
{ "trigger": "ccs.ComAudio.unloadEffect(char)", "contents": "unloadEffect(char)" },
{ "trigger": "ccs.ComAudio.rewindBackgroundMusic()", "contents": "rewindBackgroundMusic()" },
{ "trigger": "ccs.ComAudio.pauseEffect(int)", "contents": "pauseEffect(int)" },
{ "trigger": "ccs.ComAudio.resumeBackgroundMusic()", "contents": "resumeBackgroundMusic()" },
{ "trigger": "ccs.ComAudio.setFile(char)", "contents": "setFile(char)" },
{ "trigger": "ccs.ComAudio.setEffectsVolume(float)", "contents": "setEffectsVolume(float)" },
{ "trigger": "ccs.ComAudio.getFile()", "contents": "getFile()" },
{ "trigger": "ccs.ComAudio.resumeEffect(int)", "contents": "resumeEffect(int)" },
{ "trigger": "ccs.ComAudio.create()", "contents": "create()" },
{ "trigger": "ccs.ComAudio.ComAudio()", "contents": "ComAudio()" },
{ "trigger": "ccs.InputDelegate.isAccelerometerEnabled()", "contents": "isAccelerometerEnabled()" },
{ "trigger": "ccs.InputDelegate.setKeypadEnabled(bool)", "contents": "setKeypadEnabled(bool)" },
{ "trigger": "ccs.InputDelegate.getTouchMode()", "contents": "getTouchMode()" },
{ "trigger": "ccs.InputDelegate.setAccelerometerEnabled(bool)", "contents": "setAccelerometerEnabled(bool)" },
{ "trigger": "ccs.InputDelegate.isKeypadEnabled()", "contents": "isKeypadEnabled()" },
{ "trigger": "ccs.InputDelegate.isTouchEnabled()", "contents": "isTouchEnabled()" },
{ "trigger": "ccs.InputDelegate.setTouchPriority(int)", "contents": "setTouchPriority(int)" },
{ "trigger": "ccs.InputDelegate.getTouchPriority()", "contents": "getTouchPriority()" },
{ "trigger": "ccs.InputDelegate.setTouchEnabled(bool)", "contents": "setTouchEnabled(bool)" },
{ "trigger": "ccs.InputDelegate.setTouchMode(dispatchmode)", "contents": "setTouchMode(dispatchmode)" },
{ "trigger": "ccs.ComController.create()", "contents": "create()" },
{ "trigger": "ccs.ComController.ComController()", "contents": "ComController()" },
{ "trigger": "ccs.ComRender.getNode()", "contents": "getNode()" },
{ "trigger": "ccs.ComRender.setNode(node)", "contents": "setNode(node)" },
{ "trigger": "ccs.ComRender.create(node, char)", "contents": "create(node, char)" },
{ "trigger": "ccs.ComRender.ComRender(node, char)", "contents": "ComRender(node, char)" },
{ "trigger": "ccs.Frame.clone()", "contents": "clone()" },
{ "trigger": "ccs.Frame.setTweenType(tweentype)", "contents": "setTweenType(tweentype)" },
{ "trigger": "ccs.Frame.setNode(node)", "contents": "setNode(node)" },
{ "trigger": "ccs.Frame.setTimeline(timeline)", "contents": "setTimeline(timeline)" },
{ "trigger": "ccs.Frame.isEnterWhenPassed()", "contents": "isEnterWhenPassed()" },
{ "trigger": "ccs.Frame.getTweenType()", "contents": "getTweenType()" },
{ "trigger": "ccs.Frame.getFrameIndex()", "contents": "getFrameIndex()" },
{ "trigger": "ccs.Frame.apply(float)", "contents": "apply(float)" },
{ "trigger": "ccs.Frame.isTween()", "contents": "isTween()" },
{ "trigger": "ccs.Frame.setFrameIndex(int)", "contents": "setFrameIndex(int)" },
{ "trigger": "ccs.Frame.setTween(bool)", "contents": "setTween(bool)" },
{ "trigger": "ccs.Frame.getTimeline()", "contents": "getTimeline()" },
{ "trigger": "ccs.Frame.getNode()", "contents": "getNode()" },
{ "trigger": "ccs.VisibleFrame.isVisible()", "contents": "isVisible()" },
{ "trigger": "ccs.VisibleFrame.setVisible(bool)", "contents": "setVisible(bool)" },
{ "trigger": "ccs.VisibleFrame.create()", "contents": "create()" },
{ "trigger": "ccs.VisibleFrame.VisibleFrame()", "contents": "VisibleFrame()" },
{ "trigger": "ccs.TextureFrame.getTextureName()", "contents": "getTextureName()" },
{ "trigger": "ccs.TextureFrame.setTextureName(str)", "contents": "setTextureName(str)" },
{ "trigger": "ccs.TextureFrame.create()", "contents": "create()" },
{ "trigger": "ccs.TextureFrame.TextureFrame()", "contents": "TextureFrame()" },
{ "trigger": "ccs.RotationFrame.setRotation(float)", "contents": "setRotation(float)" },
{ "trigger": "ccs.RotationFrame.getRotation()", "contents": "getRotation()" },
{ "trigger": "ccs.RotationFrame.create()", "contents": "create()" },
{ "trigger": "ccs.RotationFrame.RotationFrame()", "contents": "RotationFrame()" },
{ "trigger": "ccs.SkewFrame.getSkewY()", "contents": "getSkewY()" },
{ "trigger": "ccs.SkewFrame.setSkewX(float)", "contents": "setSkewX(float)" },
{ "trigger": "ccs.SkewFrame.setSkewY(float)", "contents": "setSkewY(float)" },
{ "trigger": "ccs.SkewFrame.getSkewX()", "contents": "getSkewX()" },
{ "trigger": "ccs.SkewFrame.create()", "contents": "create()" },
{ "trigger": "ccs.SkewFrame.SkewFrame()", "contents": "SkewFrame()" },
{ "trigger": "ccs.RotationSkewFrame.create()", "contents": "create()" },
{ "trigger": "ccs.RotationSkewFrame.RotationSkewFrame()", "contents": "RotationSkewFrame()" },
{ "trigger": "ccs.PositionFrame.getX()", "contents": "getX()" },
{ "trigger": "ccs.PositionFrame.getY()", "contents": "getY()" },
{ "trigger": "ccs.PositionFrame.setPosition(vec2)", "contents": "setPosition(vec2)" },
{ "trigger": "ccs.PositionFrame.setX(float)", "contents": "setX(float)" },
{ "trigger": "ccs.PositionFrame.setY(float)", "contents": "setY(float)" },
{ "trigger": "ccs.PositionFrame.getPosition()", "contents": "getPosition()" },
{ "trigger": "ccs.PositionFrame.create()", "contents": "create()" },
{ "trigger": "ccs.PositionFrame.PositionFrame()", "contents": "PositionFrame()" },
{ "trigger": "ccs.ScaleFrame.setScaleY(float)", "contents": "setScaleY(float)" },
{ "trigger": "ccs.ScaleFrame.setScaleX(float)", "contents": "setScaleX(float)" },
{ "trigger": "ccs.ScaleFrame.getScaleY()", "contents": "getScaleY()" },
{ "trigger": "ccs.ScaleFrame.getScaleX()", "contents": "getScaleX()" },
{ "trigger": "ccs.ScaleFrame.setScale(float)", "contents": "setScale(float)" },
{ "trigger": "ccs.ScaleFrame.create()", "contents": "create()" },
{ "trigger": "ccs.ScaleFrame.ScaleFrame()", "contents": "ScaleFrame()" },
{ "trigger": "ccs.AnchorPointFrame.setAnchorPoint(vec2)", "contents": "setAnchorPoint(vec2)" },
{ "trigger": "ccs.AnchorPointFrame.getAnchorPoint()", "contents": "getAnchorPoint()" },
{ "trigger": "ccs.AnchorPointFrame.create()", "contents": "create()" },
{ "trigger": "ccs.AnchorPointFrame.AnchorPointFrame()", "contents": "AnchorPointFrame()" },
{ "trigger": "ccs.InnerActionFrame.getEndFrameIndex()", "contents": "getEndFrameIndex()" },
{ "trigger": "ccs.InnerActionFrame.getStartFrameIndex()", "contents": "getStartFrameIndex()" },
{ "trigger": "ccs.InnerActionFrame.getInnerActionType()", "contents": "getInnerActionType()" },
{ "trigger": "ccs.InnerActionFrame.setEndFrameIndex(int)", "contents": "setEndFrameIndex(int)" },
{ "trigger": "ccs.InnerActionFrame.setEnterWithName(bool)", "contents": "setEnterWithName(bool)" },
{ "trigger": "ccs.InnerActionFrame.setSingleFrameIndex(int)", "contents": "setSingleFrameIndex(int)" },
{ "trigger": "ccs.InnerActionFrame.setStartFrameIndex(int)", "contents": "setStartFrameIndex(int)" },
{ "trigger": "ccs.InnerActionFrame.getSingleFrameIndex()", "contents": "getSingleFrameIndex()" },
{ "trigger": "ccs.InnerActionFrame.setInnerActionType(inneractiontype)", "contents": "setInnerActionType(inneractiontype)" },
{ "trigger": "ccs.InnerActionFrame.setAnimationName(str)", "contents": "setAnimationName(str)" },
{ "trigger": "ccs.InnerActionFrame.create()", "contents": "create()" },
{ "trigger": "ccs.InnerActionFrame.InnerActionFrame()", "contents": "InnerActionFrame()" },
{ "trigger": "ccs.ColorFrame.getColor()", "contents": "getColor()" },
{ "trigger": "ccs.ColorFrame.setColor(color3b)", "contents": "setColor(color3b)" },
{ "trigger": "ccs.ColorFrame.create()", "contents": "create()" },
{ "trigger": "ccs.ColorFrame.ColorFrame()", "contents": "ColorFrame()" },
{ "trigger": "ccs.AlphaFrame.getAlpha()", "contents": "getAlpha()" },
{ "trigger": "ccs.AlphaFrame.setAlpha(char)", "contents": "setAlpha(char)" },
{ "trigger": "ccs.AlphaFrame.create()", "contents": "create()" },
{ "trigger": "ccs.AlphaFrame.AlphaFrame()", "contents": "AlphaFrame()" },
{ "trigger": "ccs.EventFrame.setEvent(str)", "contents": "setEvent(str)" },
{ "trigger": "ccs.EventFrame.init()", "contents": "init()" },
{ "trigger": "ccs.EventFrame.getEvent()", "contents": "getEvent()" },
{ "trigger": "ccs.EventFrame.create()", "contents": "create()" },
{ "trigger": "ccs.EventFrame.EventFrame()", "contents": "EventFrame()" },
{ "trigger": "ccs.ZOrderFrame.getZOrder()", "contents": "getZOrder()" },
{ "trigger": "ccs.ZOrderFrame.setZOrder(int)", "contents": "setZOrder(int)" },
{ "trigger": "ccs.ZOrderFrame.create()", "contents": "create()" },
{ "trigger": "ccs.ZOrderFrame.ZOrderFrame()", "contents": "ZOrderFrame()" },
{ "trigger": "ccs.Timeline.clone()", "contents": "clone()" },
{ "trigger": "ccs.Timeline.gotoFrame(int)", "contents": "gotoFrame(int)" },
{ "trigger": "ccs.Timeline.setNode(node)", "contents": "setNode(node)" },
{ "trigger": "ccs.Timeline.getActionTimeline()", "contents": "getActionTimeline()" },
{ "trigger": "ccs.Timeline.insertFrame(frame, int)", "contents": "insertFrame(frame, int)" },
{ "trigger": "ccs.Timeline.setActionTag(int)", "contents": "setActionTag(int)" },
{ "trigger": "ccs.Timeline.addFrame(frame)", "contents": "addFrame(frame)" },
{ "trigger": "ccs.Timeline.getFrames()", "contents": "getFrames()" },
{ "trigger": "ccs.Timeline.getActionTag()", "contents": "getActionTag()" },
{ "trigger": "ccs.Timeline.getNode()", "contents": "getNode()" },
{ "trigger": "ccs.Timeline.removeFrame(frame)", "contents": "removeFrame(frame)" },
{ "trigger": "ccs.Timeline.setActionTimeline(actiontimeline)", "contents": "setActionTimeline(actiontimeline)" },
{ "trigger": "ccs.Timeline.stepToFrame(int)", "contents": "stepToFrame(int)" },
{ "trigger": "ccs.Timeline.create()", "contents": "create()" },
{ "trigger": "ccs.Timeline.Timeline()", "contents": "Timeline()" },
{ "trigger": "ccs.ActionTimelineData.setActionTag(int)", "contents": "setActionTag(int)" },
{ "trigger": "ccs.ActionTimelineData.init(int)", "contents": "init(int)" },
{ "trigger": "ccs.ActionTimelineData.getActionTag()", "contents": "getActionTag()" },
{ "trigger": "ccs.ActionTimelineData.create(int)", "contents": "create(int)" },
{ "trigger": "ccs.ActionTimelineData.ActionTimelineData()", "contents": "ActionTimelineData()" },
{ "trigger": "ccs.ActionTimeline.setFrameEventCallFunc(func)", "contents": "setFrameEventCallFunc(func)" },
{ "trigger": "ccs.ActionTimeline.addTimeline(timeline)", "contents": "addTimeline(timeline)" },
{ "trigger": "ccs.ActionTimeline.getCurrentFrame()", "contents": "getCurrentFrame()" },
{ "trigger": "ccs.ActionTimeline.getStartFrame()", "contents": "getStartFrame()" },
{ "trigger": "ccs.ActionTimeline.pause()", "contents": "pause()" },
{ "trigger": "ccs.ActionTimeline.init()", "contents": "init()" },
{ "trigger": "ccs.ActionTimeline.removeTimeline(timeline)", "contents": "removeTimeline(timeline)" },
{ "trigger": "ccs.ActionTimeline.setLastFrameCallFunc(func)", "contents": "setLastFrameCallFunc(func)" },
{ "trigger": "ccs.ActionTimeline.IsAnimationInfoExists(str)", "contents": "IsAnimationInfoExists(str)" },
{ "trigger": "ccs.ActionTimeline.getTimelines()", "contents": "getTimelines()" },
{ "trigger": "ccs.ActionTimeline.play(str, bool)", "contents": "play(str, bool)" },
{ "trigger": "ccs.ActionTimeline.getAnimationInfo(str)", "contents": "getAnimationInfo(str)" },
{ "trigger": "ccs.ActionTimeline.resume()", "contents": "resume()" },
{ "trigger": "ccs.ActionTimeline.removeAnimationInfo(str)", "contents": "removeAnimationInfo(str)" },
{ "trigger": "ccs.ActionTimeline.getTimeSpeed()", "contents": "getTimeSpeed()" },
{ "trigger": "ccs.ActionTimeline.addAnimationInfo(animationinfo)", "contents": "addAnimationInfo(animationinfo)" },
{ "trigger": "ccs.ActionTimeline.getDuration()", "contents": "getDuration()" },
{ "trigger": "ccs.ActionTimeline.gotoFrameAndPause(int)", "contents": "gotoFrameAndPause(int)" },
{ "trigger": "ccs.ActionTimeline.isPlaying()", "contents": "isPlaying()" },
{ "trigger": "ccs.ActionTimeline.gotoFrameAndPlay(int, int, int, bool)", "contents": "gotoFrameAndPlay(int, int, int, bool)" },
{ "trigger": "ccs.ActionTimeline.clearFrameEventCallFunc()", "contents": "clearFrameEventCallFunc()" },
{ "trigger": "ccs.ActionTimeline.getEndFrame()", "contents": "getEndFrame()" },
{ "trigger": "ccs.ActionTimeline.setTimeSpeed(float)", "contents": "setTimeSpeed(float)" },
{ "trigger": "ccs.ActionTimeline.clearLastFrameCallFunc()", "contents": "clearLastFrameCallFunc()" },
{ "trigger": "ccs.ActionTimeline.setDuration(int)", "contents": "setDuration(int)" },
{ "trigger": "ccs.ActionTimeline.setCurrentFrame(int)", "contents": "setCurrentFrame(int)" },
{ "trigger": "ccs.ActionTimeline.create()", "contents": "create()" },
{ "trigger": "ccs.ActionTimeline.ActionTimeline()", "contents": "ActionTimeline()" },
{ "trigger": "ccs.ObjectExtensionData.setActionTag(int)", "contents": "setActionTag(int)" },
{ "trigger": "ccs.ObjectExtensionData.setCustomProperty(str)", "contents": "setCustomProperty(str)" },
{ "trigger": "ccs.ObjectExtensionData.init()", "contents": "init()" },
{ "trigger": "ccs.ObjectExtensionData.getCustomProperty()", "contents": "getCustomProperty()" },
{ "trigger": "ccs.ObjectExtensionData.getActionTag()", "contents": "getActionTag()" },
{ "trigger": "ccs.ObjectExtensionData.create()", "contents": "create()" },
{ "trigger": "ccs.ObjectExtensionData.ObjectExtensionData()", "contents": "ObjectExtensionData()" },
{ "trigger": "ccui.LayoutParameter.clone()", "contents": "clone()" },
{ "trigger": "ccui.LayoutParameter.getLayoutType()", "contents": "getLayoutType()" },
{ "trigger": "ccui.LayoutParameter.createCloneInstance()", "contents": "createCloneInstance()" },
{ "trigger": "ccui.LayoutParameter.copyProperties(layoutparameter)", "contents": "copyProperties(layoutparameter)" },
{ "trigger": "ccui.LayoutParameter.create()", "contents": "create()" },
{ "trigger": "ccui.LayoutParameter.LayoutParameter()", "contents": "LayoutParameter()" },
{ "trigger": "ccui.LinearLayoutParameter.setGravity(lineargravity)", "contents": "setGravity(lineargravity)" },
{ "trigger": "ccui.LinearLayoutParameter.getGravity()", "contents": "getGravity()" },
{ "trigger": "ccui.LinearLayoutParameter.create()", "contents": "create()" },
{ "trigger": "ccui.LinearLayoutParameter.LinearLayoutParameter()", "contents": "LinearLayoutParameter()" },
{ "trigger": "ccui.RelativeLayoutParameter.setAlign(relativealign)", "contents": "setAlign(relativealign)" },
{ "trigger": "ccui.RelativeLayoutParameter.setRelativeToWidgetName(str)", "contents": "setRelativeToWidgetName(str)" },
{ "trigger": "ccui.RelativeLayoutParameter.getRelativeName()", "contents": "getRelativeName()" },
{ "trigger": "ccui.RelativeLayoutParameter.getRelativeToWidgetName()", "contents": "getRelativeToWidgetName()" },
{ "trigger": "ccui.RelativeLayoutParameter.setRelativeName(str)", "contents": "setRelativeName(str)" },
{ "trigger": "ccui.RelativeLayoutParameter.getAlign()", "contents": "getAlign()" },
{ "trigger": "ccui.RelativeLayoutParameter.create()", "contents": "create()" },
{ "trigger": "ccui.RelativeLayoutParameter.RelativeLayoutParameter()", "contents": "RelativeLayoutParameter()" },
{ "trigger": "ccui.Widget.setLayoutComponentEnabled(bool)", "contents": "setLayoutComponentEnabled(bool)" },
{ "trigger": "ccui.Widget.setSizePercent(vec2)", "contents": "setSizePercent(vec2)" },
{ "trigger": "ccui.Widget.getCustomSize()", "contents": "getCustomSize()" },
{ "trigger": "ccui.Widget.getLeftBoundary()", "contents": "getLeftBoundary()" },
{ "trigger": "ccui.Widget.setFlippedX(bool)", "contents": "setFlippedX(bool)" },
{ "trigger": "ccui.Widget.setCallbackName(str)", "contents": "setCallbackName(str)" },
{ "trigger": "ccui.Widget.getVirtualRenderer()", "contents": "getVirtualRenderer()" },
{ "trigger": "ccui.Widget.setPropagateTouchEvents(bool)", "contents": "setPropagateTouchEvents(bool)" },
{ "trigger": "ccui.Widget.isUnifySizeEnabled()", "contents": "isUnifySizeEnabled()" },
{ "trigger": "ccui.Widget.getSizePercent()", "contents": "getSizePercent()" },
{ "trigger": "ccui.Widget.setPositionPercent(vec2)", "contents": "setPositionPercent(vec2)" },
{ "trigger": "ccui.Widget.setSwallowTouches(bool)", "contents": "setSwallowTouches(bool)" },
{ "trigger": "ccui.Widget.getLayoutSize()", "contents": "getLayoutSize()" },
{ "trigger": "ccui.Widget.setHighlighted(bool)", "contents": "setHighlighted(bool)" },
{ "trigger": "ccui.Widget.setPositionType(positiontype)", "contents": "setPositionType(positiontype)" },
{ "trigger": "ccui.Widget.isIgnoreContentAdaptWithSize()", "contents": "isIgnoreContentAdaptWithSize()" },
{ "trigger": "ccui.Widget.getVirtualRendererSize()", "contents": "getVirtualRendererSize()" },
{ "trigger": "ccui.Widget.isHighlighted()", "contents": "isHighlighted()" },
{ "trigger": "ccui.Widget.getLayoutParameter()", "contents": "getLayoutParameter()" },
{ "trigger": "ccui.Widget.addCCSEventListener(func)", "contents": "addCCSEventListener(func)" },
{ "trigger": "ccui.Widget.getPositionType()", "contents": "getPositionType()" },
{ "trigger": "ccui.Widget.getTopBoundary()", "contents": "getTopBoundary()" },
{ "trigger": "ccui.Widget.ignoreContentAdaptWithSize(bool)", "contents": "ignoreContentAdaptWithSize(bool)" },
{ "trigger": "ccui.Widget.findNextFocusedWidget(focusdirection, widget)", "contents": "findNextFocusedWidget(focusdirection, widget)" },
{ "trigger": "ccui.Widget.isEnabled()", "contents": "isEnabled()" },
{ "trigger": "ccui.Widget.isFocused()", "contents": "isFocused()" },
{ "trigger": "ccui.Widget.getTouchBeganPosition()", "contents": "getTouchBeganPosition()" },
{ "trigger": "ccui.Widget.isTouchEnabled()", "contents": "isTouchEnabled()" },
{ "trigger": "ccui.Widget.getCallbackName()", "contents": "getCallbackName()" },
{ "trigger": "ccui.Widget.getActionTag()", "contents": "getActionTag()" },
{ "trigger": "ccui.Widget.getWorldPosition()", "contents": "getWorldPosition()" },
{ "trigger": "ccui.Widget.isFocusEnabled()", "contents": "isFocusEnabled()" },
{ "trigger": "ccui.Widget.setFocused(bool)", "contents": "setFocused(bool)" },
{ "trigger": "ccui.Widget.setActionTag(int)", "contents": "setActionTag(int)" },
{ "trigger": "ccui.Widget.setTouchEnabled(bool)", "contents": "setTouchEnabled(bool)" },
{ "trigger": "ccui.Widget.setFlippedY(bool)", "contents": "setFlippedY(bool)" },
{ "trigger": "ccui.Widget.init()", "contents": "init()" },
{ "trigger": "ccui.Widget.setEnabled(bool)", "contents": "setEnabled(bool)" },
{ "trigger": "ccui.Widget.getRightBoundary()", "contents": "getRightBoundary()" },
{ "trigger": "ccui.Widget.setBrightStyle(brightstyle)", "contents": "setBrightStyle(brightstyle)" },
{ "trigger": "ccui.Widget.setLayoutParameter(layoutparameter)", "contents": "setLayoutParameter(layoutparameter)" },
{ "trigger": "ccui.Widget.clone()", "contents": "clone()" },
{ "trigger": "ccui.Widget.setFocusEnabled(bool)", "contents": "setFocusEnabled(bool)" },
{ "trigger": "ccui.Widget.getBottomBoundary()", "contents": "getBottomBoundary()" },
{ "trigger": "ccui.Widget.isBright()", "contents": "isBright()" },
{ "trigger": "ccui.Widget.dispatchFocusEvent(widget, widget)", "contents": "dispatchFocusEvent(widget, widget)" },
{ "trigger": "ccui.Widget.setUnifySizeEnabled(bool)", "contents": "setUnifySizeEnabled(bool)" },
{ "trigger": "ccui.Widget.isPropagateTouchEvents()", "contents": "isPropagateTouchEvents()" },
{ "trigger": "ccui.Widget.getCurrentFocusedWidget()", "contents": "getCurrentFocusedWidget()" },
{ "trigger": "ccui.Widget.hitTest(vec2)", "contents": "hitTest(vec2)" },
{ "trigger": "ccui.Widget.isLayoutComponentEnabled()", "contents": "isLayoutComponentEnabled()" },
{ "trigger": "ccui.Widget.requestFocus()", "contents": "requestFocus()" },
{ "trigger": "ccui.Widget.updateSizeAndPosition(size)", "contents": "updateSizeAndPosition(size)" },
{ "trigger": "ccui.Widget.onFocusChange(widget, widget)", "contents": "onFocusChange(widget, widget)" },
{ "trigger": "ccui.Widget.getTouchMovePosition()", "contents": "getTouchMovePosition()" },
{ "trigger": "ccui.Widget.getSizeType()", "contents": "getSizeType()" },
{ "trigger": "ccui.Widget.getCallbackType()", "contents": "getCallbackType()" },
{ "trigger": "ccui.Widget.getTouchEndPosition()", "contents": "getTouchEndPosition()" },
{ "trigger": "ccui.Widget.getPositionPercent()", "contents": "getPositionPercent()" },
{ "trigger": "ccui.Widget.propagateTouchEvent(toucheventtype, widget, touch)", "contents": "propagateTouchEvent(toucheventtype, widget, touch)" },
{ "trigger": "ccui.Widget.addClickEventListener(func)", "contents": "addClickEventListener(func)" },
{ "trigger": "ccui.Widget.isFlippedX()", "contents": "isFlippedX()" },
{ "trigger": "ccui.Widget.isFlippedY()", "contents": "isFlippedY()" },
{ "trigger": "ccui.Widget.isClippingParentContainsPoint(vec2)", "contents": "isClippingParentContainsPoint(vec2)" },
{ "trigger": "ccui.Widget.setSizeType(sizetype)", "contents": "setSizeType(sizetype)" },
{ "trigger": "ccui.Widget.interceptTouchEvent(toucheventtype, widget, touch)", "contents": "interceptTouchEvent(toucheventtype, widget, touch)" },
{ "trigger": "ccui.Widget.setBright(bool)", "contents": "setBright(bool)" },
{ "trigger": "ccui.Widget.setCallbackType(str)", "contents": "setCallbackType(str)" },
{ "trigger": "ccui.Widget.isSwallowTouches()", "contents": "isSwallowTouches()" },
{ "trigger": "ccui.Widget.enableDpadNavigation(bool)", "contents": "enableDpadNavigation(bool)" },
{ "trigger": "ccui.Widget.create()", "contents": "create()" },
{ "trigger": "ccui.Widget.Widget()", "contents": "Widget()" },
{ "trigger": "ccui.Layout.setBackGroundColorVector(vec2)", "contents": "setBackGroundColorVector(vec2)" },
{ "trigger": "ccui.Layout.setClippingType(clippingtype)", "contents": "setClippingType(clippingtype)" },
{ "trigger": "ccui.Layout.setBackGroundColorType(backgroundcolortype)", "contents": "setBackGroundColorType(backgroundcolortype)" },
{ "trigger": "ccui.Layout.setLoopFocus(bool)", "contents": "setLoopFocus(bool)" },
{ "trigger": "ccui.Layout.setBackGroundImageColor(color3b)", "contents": "setBackGroundImageColor(color3b)" },
{ "trigger": "ccui.Layout.getBackGroundColorVector()", "contents": "getBackGroundColorVector()" },
{ "trigger": "ccui.Layout.getClippingType()", "contents": "getClippingType()" },
{ "trigger": "ccui.Layout.isLoopFocus()", "contents": "isLoopFocus()" },
{ "trigger": "ccui.Layout.removeBackGroundImage()", "contents": "removeBackGroundImage()" },
{ "trigger": "ccui.Layout.getBackGroundColorOpacity()", "contents": "getBackGroundColorOpacity()" },
{ "trigger": "ccui.Layout.isClippingEnabled()", "contents": "isClippingEnabled()" },
{ "trigger": "ccui.Layout.setBackGroundImageOpacity(char)", "contents": "setBackGroundImageOpacity(char)" },
{ "trigger": "ccui.Layout.setBackGroundImage(str, texturerestype)", "contents": "setBackGroundImage(str, texturerestype)" },
{ "trigger": "ccui.Layout.setBackGroundColor(color3b, color3b)", "contents": "setBackGroundColor(color3b, color3b)" },
{ "trigger": "ccui.Layout.requestDoLayout()", "contents": "requestDoLayout()" },
{ "trigger": "ccui.Layout.getBackGroundImageCapInsets()", "contents": "getBackGroundImageCapInsets()" },
{ "trigger": "ccui.Layout.getBackGroundColor()", "contents": "getBackGroundColor()" },
{ "trigger": "ccui.Layout.setClippingEnabled(bool)", "contents": "setClippingEnabled(bool)" },
{ "trigger": "ccui.Layout.getBackGroundImageColor()", "contents": "getBackGroundImageColor()" },
{ "trigger": "ccui.Layout.isBackGroundImageScale9Enabled()", "contents": "isBackGroundImageScale9Enabled()" },
{ "trigger": "ccui.Layout.getBackGroundColorType()", "contents": "getBackGroundColorType()" },
{ "trigger": "ccui.Layout.getBackGroundEndColor()", "contents": "getBackGroundEndColor()" },
{ "trigger": "ccui.Layout.setBackGroundColorOpacity(char)", "contents": "setBackGroundColorOpacity(char)" },
{ "trigger": "ccui.Layout.getBackGroundImageOpacity()", "contents": "getBackGroundImageOpacity()" },
{ "trigger": "ccui.Layout.isPassFocusToChild()", "contents": "isPassFocusToChild()" },
{ "trigger": "ccui.Layout.setBackGroundImageCapInsets(rect)", "contents": "setBackGroundImageCapInsets(rect)" },
{ "trigger": "ccui.Layout.getBackGroundImageTextureSize()", "contents": "getBackGroundImageTextureSize()" },
{ "trigger": "ccui.Layout.forceDoLayout()", "contents": "forceDoLayout()" },
{ "trigger": "ccui.Layout.getLayoutType()", "contents": "getLayoutType()" },
{ "trigger": "ccui.Layout.setPassFocusToChild(bool)", "contents": "setPassFocusToChild(bool)" },
{ "trigger": "ccui.Layout.getBackGroundStartColor()", "contents": "getBackGroundStartColor()" },
{ "trigger": "ccui.Layout.setBackGroundImageScale9Enabled(bool)", "contents": "setBackGroundImageScale9Enabled(bool)" },
{ "trigger": "ccui.Layout.setLayoutType(type)", "contents": "setLayoutType(type)" },
{ "trigger": "ccui.Layout.create()", "contents": "create()" },
{ "trigger": "ccui.Layout.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.Layout.Layout()", "contents": "Layout()" },
{ "trigger": "ccui.Button.getNormalTextureSize()", "contents": "getNormalTextureSize()" },
{ "trigger": "ccui.Button.getTitleText()", "contents": "getTitleText()" },
{ "trigger": "ccui.Button.setTitleFontSize(float)", "contents": "setTitleFontSize(float)" },
{ "trigger": "ccui.Button.setScale9Enabled(bool)", "contents": "setScale9Enabled(bool)" },
{ "trigger": "ccui.Button.getTitleRenderer()", "contents": "getTitleRenderer()" },
{ "trigger": "ccui.Button.getZoomScale()", "contents": "getZoomScale()" },
{ "trigger": "ccui.Button.getCapInsetsDisabledRenderer()", "contents": "getCapInsetsDisabledRenderer()" },
{ "trigger": "ccui.Button.setTitleColor(color3b)", "contents": "setTitleColor(color3b)" },
{ "trigger": "ccui.Button.setCapInsetsDisabledRenderer(rect)", "contents": "setCapInsetsDisabledRenderer(rect)" },
{ "trigger": "ccui.Button.setCapInsets(rect)", "contents": "setCapInsets(rect)" },
{ "trigger": "ccui.Button.loadTextureDisabled(str, texturerestype)", "contents": "loadTextureDisabled(str, texturerestype)" },
{ "trigger": "ccui.Button.init(str, str, str, texturerestype)", "contents": "init(str, str, str, texturerestype)" },
{ "trigger": "ccui.Button.setTitleText(str)", "contents": "setTitleText(str)" },
{ "trigger": "ccui.Button.setCapInsetsNormalRenderer(rect)", "contents": "setCapInsetsNormalRenderer(rect)" },
{ "trigger": "ccui.Button.loadTexturePressed(str, texturerestype)", "contents": "loadTexturePressed(str, texturerestype)" },
{ "trigger": "ccui.Button.setTitleFontName(str)", "contents": "setTitleFontName(str)" },
{ "trigger": "ccui.Button.getCapInsetsNormalRenderer()", "contents": "getCapInsetsNormalRenderer()" },
{ "trigger": "ccui.Button.getCapInsetsPressedRenderer()", "contents": "getCapInsetsPressedRenderer()" },
{ "trigger": "ccui.Button.loadTextures(str, str, str, texturerestype)", "contents": "loadTextures(str, str, str, texturerestype)" },
{ "trigger": "ccui.Button.isScale9Enabled()", "contents": "isScale9Enabled()" },
{ "trigger": "ccui.Button.loadTextureNormal(str, texturerestype)", "contents": "loadTextureNormal(str, texturerestype)" },
{ "trigger": "ccui.Button.setCapInsetsPressedRenderer(rect)", "contents": "setCapInsetsPressedRenderer(rect)" },
{ "trigger": "ccui.Button.getTitleFontSize()", "contents": "getTitleFontSize()" },
{ "trigger": "ccui.Button.getTitleFontName()", "contents": "getTitleFontName()" },
{ "trigger": "ccui.Button.getTitleColor()", "contents": "getTitleColor()" },
{ "trigger": "ccui.Button.setPressedActionEnabled(bool)", "contents": "setPressedActionEnabled(bool)" },
{ "trigger": "ccui.Button.setZoomScale(float)", "contents": "setZoomScale(float)" },
{ "trigger": "ccui.Button.create(str, str, str, texturerestype)", "contents": "create(str, str, str, texturerestype)" },
{ "trigger": "ccui.Button.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.Button.Button()", "contents": "Button()" },
{ "trigger": "ccui.CheckBox.loadTextureBackGroundSelected(str, texturerestype)", "contents": "loadTextureBackGroundSelected(str, texturerestype)" },
{ "trigger": "ccui.CheckBox.loadTextureBackGroundDisabled(str, texturerestype)", "contents": "loadTextureBackGroundDisabled(str, texturerestype)" },
{ "trigger": "ccui.CheckBox.setSelected(bool)", "contents": "setSelected(bool)" },
{ "trigger": "ccui.CheckBox.loadTextureFrontCross(str, texturerestype)", "contents": "loadTextureFrontCross(str, texturerestype)" },
{ "trigger": "ccui.CheckBox.isSelected()", "contents": "isSelected()" },
{ "trigger": "ccui.CheckBox.init(str, str, str, str, str, texturerestype)", "contents": "init(str, str, str, str, str, texturerestype)" },
{ "trigger": "ccui.CheckBox.loadTextures(str, str, str, str, str, texturerestype)", "contents": "loadTextures(str, str, str, str, str, texturerestype)" },
{ "trigger": "ccui.CheckBox.getZoomScale()", "contents": "getZoomScale()" },
{ "trigger": "ccui.CheckBox.loadTextureBackGround(str, texturerestype)", "contents": "loadTextureBackGround(str, texturerestype)" },
{ "trigger": "ccui.CheckBox.setZoomScale(float)", "contents": "setZoomScale(float)" },
{ "trigger": "ccui.CheckBox.loadTextureFrontCrossDisabled(str, texturerestype)", "contents": "loadTextureFrontCrossDisabled(str, texturerestype)" },
{ "trigger": "ccui.CheckBox.create(str, str, str, str, str, texturerestype)", "contents": "create(str, str, str, str, str, texturerestype)" },
{ "trigger": "ccui.CheckBox.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.CheckBox.CheckBox()", "contents": "CheckBox()" },
{ "trigger": "ccui.ImageView.loadTexture(str, texturerestype)", "contents": "loadTexture(str, texturerestype)" },
{ "trigger": "ccui.ImageView.init(str, texturerestype)", "contents": "init(str, texturerestype)" },
{ "trigger": "ccui.ImageView.setScale9Enabled(bool)", "contents": "setScale9Enabled(bool)" },
{ "trigger": "ccui.ImageView.setTextureRect(rect)", "contents": "setTextureRect(rect)" },
{ "trigger": "ccui.ImageView.setCapInsets(rect)", "contents": "setCapInsets(rect)" },
{ "trigger": "ccui.ImageView.getCapInsets()", "contents": "getCapInsets()" },
{ "trigger": "ccui.ImageView.isScale9Enabled()", "contents": "isScale9Enabled()" },
{ "trigger": "ccui.ImageView.create(str, texturerestype)", "contents": "create(str, texturerestype)" },
{ "trigger": "ccui.ImageView.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.ImageView.ImageView()", "contents": "ImageView()" },
{ "trigger": "ccui.Text.enableShadow()", "contents": "enableShadow()" },
{ "trigger": "ccui.Text.getFontSize()", "contents": "getFontSize()" },
{ "trigger": "ccui.Text.getString()", "contents": "getString()" },
{ "trigger": "ccui.Text.disableEffect(labeleffect)", "contents": "disableEffect(labeleffect)" },
{ "trigger": "ccui.Text.getTextColor()", "contents": "getTextColor()" },
{ "trigger": "ccui.Text.setTextVerticalAlignment(textvalignment)", "contents": "setTextVerticalAlignment(textvalignment)" },
{ "trigger": "ccui.Text.setFontName(str)", "contents": "setFontName(str)" },
{ "trigger": "ccui.Text.setTouchScaleChangeEnabled(bool)", "contents": "setTouchScaleChangeEnabled(bool)" },
{ "trigger": "ccui.Text.setString(str)", "contents": "setString(str)" },
{ "trigger": "ccui.Text.init(str, str, int)", "contents": "init(str, str, int)" },
{ "trigger": "ccui.Text.isTouchScaleChangeEnabled()", "contents": "isTouchScaleChangeEnabled()" },
{ "trigger": "ccui.Text.getFontName()", "contents": "getFontName()" },
{ "trigger": "ccui.Text.setTextAreaSize(size)", "contents": "setTextAreaSize(size)" },
{ "trigger": "ccui.Text.getStringLength()", "contents": "getStringLength()" },
{ "trigger": "ccui.Text.getAutoRenderSize()", "contents": "getAutoRenderSize()" },
{ "trigger": "ccui.Text.enableOutline(color4b, int)", "contents": "enableOutline(color4b, int)" },
{ "trigger": "ccui.Text.getType()", "contents": "getType()" },
{ "trigger": "ccui.Text.getTextHorizontalAlignment()", "contents": "getTextHorizontalAlignment()" },
{ "trigger": "ccui.Text.setFontSize(int)", "contents": "setFontSize(int)" },
{ "trigger": "ccui.Text.setTextColor(color4b)", "contents": "setTextColor(color4b)" },
{ "trigger": "ccui.Text.enableGlow(color4b)", "contents": "enableGlow(color4b)" },
{ "trigger": "ccui.Text.getTextVerticalAlignment()", "contents": "getTextVerticalAlignment()" },
{ "trigger": "ccui.Text.getTextAreaSize()", "contents": "getTextAreaSize()" },
{ "trigger": "ccui.Text.setTextHorizontalAlignment(texthalignment)", "contents": "setTextHorizontalAlignment(texthalignment)" },
{ "trigger": "ccui.Text.create(str, str, int)", "contents": "create(str, str, int)" },
{ "trigger": "ccui.Text.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.Text.Text()", "contents": "Text()" },
{ "trigger": "ccui.TextAtlas.getStringLength()", "contents": "getStringLength()" },
{ "trigger": "ccui.TextAtlas.getString()", "contents": "getString()" },
{ "trigger": "ccui.TextAtlas.setString(str)", "contents": "setString(str)" },
{ "trigger": "ccui.TextAtlas.setProperty(str, str, int, int, str)", "contents": "setProperty(str, str, int, int, str)" },
{ "trigger": "ccui.TextAtlas.adaptRenderers()", "contents": "adaptRenderers()" },
{ "trigger": "ccui.TextAtlas.create(str, str, int, int, str)", "contents": "create(str, str, int, int, str)" },
{ "trigger": "ccui.TextAtlas.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.TextAtlas.TextAtlas()", "contents": "TextAtlas()" },
{ "trigger": "ccui.LoadingBar.setPercent(float)", "contents": "setPercent(float)" },
{ "trigger": "ccui.LoadingBar.loadTexture(str, texturerestype)", "contents": "loadTexture(str, texturerestype)" },
{ "trigger": "ccui.LoadingBar.setDirection(direction)", "contents": "setDirection(direction)" },
{ "trigger": "ccui.LoadingBar.setScale9Enabled(bool)", "contents": "setScale9Enabled(bool)" },
{ "trigger": "ccui.LoadingBar.setCapInsets(rect)", "contents": "setCapInsets(rect)" },
{ "trigger": "ccui.LoadingBar.getDirection()", "contents": "getDirection()" },
{ "trigger": "ccui.LoadingBar.getCapInsets()", "contents": "getCapInsets()" },
{ "trigger": "ccui.LoadingBar.isScale9Enabled()", "contents": "isScale9Enabled()" },
{ "trigger": "ccui.LoadingBar.getPercent()", "contents": "getPercent()" },
{ "trigger": "ccui.LoadingBar.create(str, texturerestype, float)", "contents": "create(str, texturerestype, float)" },
{ "trigger": "ccui.LoadingBar.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.LoadingBar.LoadingBar()", "contents": "LoadingBar()" },
{ "trigger": "ccui.ScrollView.scrollToTop(float, bool)", "contents": "scrollToTop(float, bool)" },
{ "trigger": "ccui.ScrollView.scrollToPercentHorizontal(float, float, bool)", "contents": "scrollToPercentHorizontal(float, float, bool)" },
{ "trigger": "ccui.ScrollView.isInertiaScrollEnabled()", "contents": "isInertiaScrollEnabled()" },
{ "trigger": "ccui.ScrollView.scrollToPercentBothDirection(vec2, float, bool)", "contents": "scrollToPercentBothDirection(vec2, float, bool)" },
{ "trigger": "ccui.ScrollView.getDirection()", "contents": "getDirection()" },
{ "trigger": "ccui.ScrollView.scrollToBottomLeft(float, bool)", "contents": "scrollToBottomLeft(float, bool)" },
{ "trigger": "ccui.ScrollView.getInnerContainer()", "contents": "getInnerContainer()" },
{ "trigger": "ccui.ScrollView.jumpToBottom()", "contents": "jumpToBottom()" },
{ "trigger": "ccui.ScrollView.setDirection(direction)", "contents": "setDirection(direction)" },
{ "trigger": "ccui.ScrollView.scrollToTopLeft(float, bool)", "contents": "scrollToTopLeft(float, bool)" },
{ "trigger": "ccui.ScrollView.jumpToTopRight()", "contents": "jumpToTopRight()" },
{ "trigger": "ccui.ScrollView.jumpToBottomLeft()", "contents": "jumpToBottomLeft()" },
{ "trigger": "ccui.ScrollView.setInnerContainerSize(size)", "contents": "setInnerContainerSize(size)" },
{ "trigger": "ccui.ScrollView.getInnerContainerSize()", "contents": "getInnerContainerSize()" },
{ "trigger": "ccui.ScrollView.isBounceEnabled()", "contents": "isBounceEnabled()" },
{ "trigger": "ccui.ScrollView.jumpToPercentVertical(float)", "contents": "jumpToPercentVertical(float)" },
{ "trigger": "ccui.ScrollView.setInertiaScrollEnabled(bool)", "contents": "setInertiaScrollEnabled(bool)" },
{ "trigger": "ccui.ScrollView.jumpToTopLeft()", "contents": "jumpToTopLeft()" },
{ "trigger": "ccui.ScrollView.jumpToPercentHorizontal(float)", "contents": "jumpToPercentHorizontal(float)" },
{ "trigger": "ccui.ScrollView.jumpToBottomRight()", "contents": "jumpToBottomRight()" },
{ "trigger": "ccui.ScrollView.setBounceEnabled(bool)", "contents": "setBounceEnabled(bool)" },
{ "trigger": "ccui.ScrollView.jumpToTop()", "contents": "jumpToTop()" },
{ "trigger": "ccui.ScrollView.scrollToLeft(float, bool)", "contents": "scrollToLeft(float, bool)" },
{ "trigger": "ccui.ScrollView.jumpToPercentBothDirection(vec2)", "contents": "jumpToPercentBothDirection(vec2)" },
{ "trigger": "ccui.ScrollView.scrollToPercentVertical(float, float, bool)", "contents": "scrollToPercentVertical(float, float, bool)" },
{ "trigger": "ccui.ScrollView.scrollToBottom(float, bool)", "contents": "scrollToBottom(float, bool)" },
{ "trigger": "ccui.ScrollView.scrollToBottomRight(float, bool)", "contents": "scrollToBottomRight(float, bool)" },
{ "trigger": "ccui.ScrollView.jumpToLeft()", "contents": "jumpToLeft()" },
{ "trigger": "ccui.ScrollView.scrollToRight(float, bool)", "contents": "scrollToRight(float, bool)" },
{ "trigger": "ccui.ScrollView.jumpToRight()", "contents": "jumpToRight()" },
{ "trigger": "ccui.ScrollView.scrollToTopRight(float, bool)", "contents": "scrollToTopRight(float, bool)" },
{ "trigger": "ccui.ScrollView.create()", "contents": "create()" },
{ "trigger": "ccui.ScrollView.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.ScrollView.ScrollView()", "contents": "ScrollView()" },
{ "trigger": "ccui.ListView.getIndex(widget)", "contents": "getIndex(widget)" },
{ "trigger": "ccui.ListView.removeAllItems()", "contents": "removeAllItems()" },
{ "trigger": "ccui.ListView.setGravity(gravity)", "contents": "setGravity(gravity)" },
{ "trigger": "ccui.ListView.pushBackCustomItem(widget)", "contents": "pushBackCustomItem(widget)" },
{ "trigger": "ccui.ListView.getItems()", "contents": "getItems()" },
{ "trigger": "ccui.ListView.removeItem(long)", "contents": "removeItem(long)" },
{ "trigger": "ccui.ListView.getCurSelectedIndex()", "contents": "getCurSelectedIndex()" },
{ "trigger": "ccui.ListView.insertDefaultItem(long)", "contents": "insertDefaultItem(long)" },
{ "trigger": "ccui.ListView.requestRefreshView()", "contents": "requestRefreshView()" },
{ "trigger": "ccui.ListView.setItemsMargin(float)", "contents": "setItemsMargin(float)" },
{ "trigger": "ccui.ListView.refreshView()", "contents": "refreshView()" },
{ "trigger": "ccui.ListView.removeLastItem()", "contents": "removeLastItem()" },
{ "trigger": "ccui.ListView.getItemsMargin()", "contents": "getItemsMargin()" },
{ "trigger": "ccui.ListView.getItem(long)", "contents": "getItem(long)" },
{ "trigger": "ccui.ListView.setItemModel(widget)", "contents": "setItemModel(widget)" },
{ "trigger": "ccui.ListView.doLayout()", "contents": "doLayout()" },
{ "trigger": "ccui.ListView.pushBackDefaultItem()", "contents": "pushBackDefaultItem()" },
{ "trigger": "ccui.ListView.insertCustomItem(widget, long)", "contents": "insertCustomItem(widget, long)" },
{ "trigger": "ccui.ListView.create()", "contents": "create()" },
{ "trigger": "ccui.ListView.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.ListView.ListView()", "contents": "ListView()" },
{ "trigger": "ccui.Slider.setPercent(int)", "contents": "setPercent(int)" },
{ "trigger": "ccui.Slider.loadSlidBallTextureDisabled(str, texturerestype)", "contents": "loadSlidBallTextureDisabled(str, texturerestype)" },
{ "trigger": "ccui.Slider.loadSlidBallTextureNormal(str, texturerestype)", "contents": "loadSlidBallTextureNormal(str, texturerestype)" },
{ "trigger": "ccui.Slider.loadBarTexture(str, texturerestype)", "contents": "loadBarTexture(str, texturerestype)" },
{ "trigger": "ccui.Slider.loadProgressBarTexture(str, texturerestype)", "contents": "loadProgressBarTexture(str, texturerestype)" },
{ "trigger": "ccui.Slider.loadSlidBallTextures(str, str, str, texturerestype)", "contents": "loadSlidBallTextures(str, str, str, texturerestype)" },
{ "trigger": "ccui.Slider.setCapInsetProgressBarRebderer(rect)", "contents": "setCapInsetProgressBarRebderer(rect)" },
{ "trigger": "ccui.Slider.setCapInsetsBarRenderer(rect)", "contents": "setCapInsetsBarRenderer(rect)" },
{ "trigger": "ccui.Slider.getCapInsetsProgressBarRebderer()", "contents": "getCapInsetsProgressBarRebderer()" },
{ "trigger": "ccui.Slider.setScale9Enabled(bool)", "contents": "setScale9Enabled(bool)" },
{ "trigger": "ccui.Slider.setZoomScale(float)", "contents": "setZoomScale(float)" },
{ "trigger": "ccui.Slider.setCapInsets(rect)", "contents": "setCapInsets(rect)" },
{ "trigger": "ccui.Slider.getZoomScale()", "contents": "getZoomScale()" },
{ "trigger": "ccui.Slider.loadSlidBallTexturePressed(str, texturerestype)", "contents": "loadSlidBallTexturePressed(str, texturerestype)" },
{ "trigger": "ccui.Slider.isScale9Enabled()", "contents": "isScale9Enabled()" },
{ "trigger": "ccui.Slider.getCapInsetsBarRenderer()", "contents": "getCapInsetsBarRenderer()" },
{ "trigger": "ccui.Slider.getPercent()", "contents": "getPercent()" },
{ "trigger": "ccui.Slider.create(str, str, texturerestype)", "contents": "create(str, str, texturerestype)" },
{ "trigger": "ccui.Slider.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.Slider.Slider()", "contents": "Slider()" },
{ "trigger": "ccui.UICCTextField.onTextFieldAttachWithIME(textfieldttf)", "contents": "onTextFieldAttachWithIME(textfieldttf)" },
{ "trigger": "ccui.UICCTextField.setPasswordText(str)", "contents": "setPasswordText(str)" },
{ "trigger": "ccui.UICCTextField.setAttachWithIME(bool)", "contents": "setAttachWithIME(bool)" },
{ "trigger": "ccui.UICCTextField.getDeleteBackward()", "contents": "getDeleteBackward()" },
{ "trigger": "ccui.UICCTextField.getAttachWithIME()", "contents": "getAttachWithIME()" },
{ "trigger": "ccui.UICCTextField.onTextFieldDeleteBackward(textfieldttf, char, long)", "contents": "onTextFieldDeleteBackward(textfieldttf, char, long)" },
{ "trigger": "ccui.UICCTextField.getInsertText()", "contents": "getInsertText()" },
{ "trigger": "ccui.UICCTextField.deleteBackward()", "contents": "deleteBackward()" },
{ "trigger": "ccui.UICCTextField.setInsertText(bool)", "contents": "setInsertText(bool)" },
{ "trigger": "ccui.UICCTextField.getDetachWithIME()", "contents": "getDetachWithIME()" },
{ "trigger": "ccui.UICCTextField.getCharCount()", "contents": "getCharCount()" },
{ "trigger": "ccui.UICCTextField.closeIME()", "contents": "closeIME()" },
{ "trigger": "ccui.UICCTextField.setPasswordEnabled(bool)", "contents": "setPasswordEnabled(bool)" },
{ "trigger": "ccui.UICCTextField.setMaxLengthEnabled(bool)", "contents": "setMaxLengthEnabled(bool)" },
{ "trigger": "ccui.UICCTextField.isPasswordEnabled()", "contents": "isPasswordEnabled()" },
{ "trigger": "ccui.UICCTextField.insertText(char, long)", "contents": "insertText(char, long)" },
{ "trigger": "ccui.UICCTextField.setPasswordStyleText(str)", "contents": "setPasswordStyleText(str)" },
{ "trigger": "ccui.UICCTextField.onTextFieldInsertText(textfieldttf, char, long)", "contents": "onTextFieldInsertText(textfieldttf, char, long)" },
{ "trigger": "ccui.UICCTextField.onTextFieldDetachWithIME(textfieldttf)", "contents": "onTextFieldDetachWithIME(textfieldttf)" },
{ "trigger": "ccui.UICCTextField.getMaxLength()", "contents": "getMaxLength()" },
{ "trigger": "ccui.UICCTextField.isMaxLengthEnabled()", "contents": "isMaxLengthEnabled()" },
{ "trigger": "ccui.UICCTextField.openIME()", "contents": "openIME()" },
{ "trigger": "ccui.UICCTextField.setDetachWithIME(bool)", "contents": "setDetachWithIME(bool)" },
{ "trigger": "ccui.UICCTextField.setMaxLength(int)", "contents": "setMaxLength(int)" },
{ "trigger": "ccui.UICCTextField.setDeleteBackward(bool)", "contents": "setDeleteBackward(bool)" },
{ "trigger": "ccui.UICCTextField.create(str, str, float)", "contents": "create(str, str, float)" },
{ "trigger": "ccui.UICCTextField.UICCTextField()", "contents": "UICCTextField()" },
{ "trigger": "ccui.TextField.setAttachWithIME(bool)", "contents": "setAttachWithIME(bool)" },
{ "trigger": "ccui.TextField.getFontSize()", "contents": "getFontSize()" },
{ "trigger": "ccui.TextField.getString()", "contents": "getString()" },
{ "trigger": "ccui.TextField.setPasswordStyleText(char)", "contents": "setPasswordStyleText(char)" },
{ "trigger": "ccui.TextField.getDeleteBackward()", "contents": "getDeleteBackward()" },
{ "trigger": "ccui.TextField.getPlaceHolder()", "contents": "getPlaceHolder()" },
{ "trigger": "ccui.TextField.getAttachWithIME()", "contents": "getAttachWithIME()" },
{ "trigger": "ccui.TextField.setFontName(str)", "contents": "setFontName(str)" },
{ "trigger": "ccui.TextField.getInsertText()", "contents": "getInsertText()" },
{ "trigger": "ccui.TextField.setInsertText(bool)", "contents": "setInsertText(bool)" },
{ "trigger": "ccui.TextField.setString(str)", "contents": "setString(str)" },
{ "trigger": "ccui.TextField.getDetachWithIME()", "contents": "getDetachWithIME()" },
{ "trigger": "ccui.TextField.setTextVerticalAlignment(textvalignment)", "contents": "setTextVerticalAlignment(textvalignment)" },
{ "trigger": "ccui.TextField.didNotSelectSelf()", "contents": "didNotSelectSelf()" },
{ "trigger": "ccui.TextField.getFontName()", "contents": "getFontName()" },
{ "trigger": "ccui.TextField.setTextAreaSize(size)", "contents": "setTextAreaSize(size)" },
{ "trigger": "ccui.TextField.attachWithIME()", "contents": "attachWithIME()" },
{ "trigger": "ccui.TextField.getStringLength()", "contents": "getStringLength()" },
{ "trigger": "ccui.TextField.getAutoRenderSize()", "contents": "getAutoRenderSize()" },
{ "trigger": "ccui.TextField.setPasswordEnabled(bool)", "contents": "setPasswordEnabled(bool)" },
{ "trigger": "ccui.TextField.getPlaceHolderColor()", "contents": "getPlaceHolderColor()" },
{ "trigger": "ccui.TextField.getPasswordStyleText()", "contents": "getPasswordStyleText()" },
{ "trigger": "ccui.TextField.setMaxLengthEnabled(bool)", "contents": "setMaxLengthEnabled(bool)" },
{ "trigger": "ccui.TextField.isPasswordEnabled()", "contents": "isPasswordEnabled()" },
{ "trigger": "ccui.TextField.setDeleteBackward(bool)", "contents": "setDeleteBackward(bool)" },
{ "trigger": "ccui.TextField.setFontSize(int)", "contents": "setFontSize(int)" },
{ "trigger": "ccui.TextField.setPlaceHolder(str)", "contents": "setPlaceHolder(str)" },
{ "trigger": "ccui.TextField.setPlaceHolderColor(color3b)", "contents": "setPlaceHolderColor(color3b)" },
{ "trigger": "ccui.TextField.setTextHorizontalAlignment(texthalignment)", "contents": "setTextHorizontalAlignment(texthalignment)" },
{ "trigger": "ccui.TextField.setTextColor(color4b)", "contents": "setTextColor(color4b)" },
{ "trigger": "ccui.TextField.getMaxLength()", "contents": "getMaxLength()" },
{ "trigger": "ccui.TextField.isMaxLengthEnabled()", "contents": "isMaxLengthEnabled()" },
{ "trigger": "ccui.TextField.setDetachWithIME(bool)", "contents": "setDetachWithIME(bool)" },
{ "trigger": "ccui.TextField.setTouchAreaEnabled(bool)", "contents": "setTouchAreaEnabled(bool)" },
{ "trigger": "ccui.TextField.setMaxLength(int)", "contents": "setMaxLength(int)" },
{ "trigger": "ccui.TextField.setTouchSize(size)", "contents": "setTouchSize(size)" },
{ "trigger": "ccui.TextField.getTouchSize()", "contents": "getTouchSize()" },
{ "trigger": "ccui.TextField.create(str, str, int)", "contents": "create(str, str, int)" },
{ "trigger": "ccui.TextField.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.TextField.TextField()", "contents": "TextField()" },
{ "trigger": "ccui.TextBMFont.setFntFile(str)", "contents": "setFntFile(str)" },
{ "trigger": "ccui.TextBMFont.getStringLength()", "contents": "getStringLength()" },
{ "trigger": "ccui.TextBMFont.setString(str)", "contents": "setString(str)" },
{ "trigger": "ccui.TextBMFont.getString()", "contents": "getString()" },
{ "trigger": "ccui.TextBMFont.create(str, str)", "contents": "create(str, str)" },
{ "trigger": "ccui.TextBMFont.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.TextBMFont.TextBMFont()", "contents": "TextBMFont()" },
{ "trigger": "ccui.PageView.getCustomScrollThreshold()", "contents": "getCustomScrollThreshold()" },
{ "trigger": "ccui.PageView.getCurPageIndex()", "contents": "getCurPageIndex()" },
{ "trigger": "ccui.PageView.addWidgetToPage(widget, long, bool)", "contents": "addWidgetToPage(widget, long, bool)" },
{ "trigger": "ccui.PageView.isUsingCustomScrollThreshold()", "contents": "isUsingCustomScrollThreshold()" },
{ "trigger": "ccui.PageView.getPage(long)", "contents": "getPage(long)" },
{ "trigger": "ccui.PageView.removePage(layout)", "contents": "removePage(layout)" },
{ "trigger": "ccui.PageView.setUsingCustomScrollThreshold(bool)", "contents": "setUsingCustomScrollThreshold(bool)" },
{ "trigger": "ccui.PageView.setCustomScrollThreshold(float)", "contents": "setCustomScrollThreshold(float)" },
{ "trigger": "ccui.PageView.insertPage(layout, int)", "contents": "insertPage(layout, int)" },
{ "trigger": "ccui.PageView.scrollToPage(long)", "contents": "scrollToPage(long)" },
{ "trigger": "ccui.PageView.removePageAtIndex(long)", "contents": "removePageAtIndex(long)" },
{ "trigger": "ccui.PageView.getPages()", "contents": "getPages()" },
{ "trigger": "ccui.PageView.removeAllPages()", "contents": "removeAllPages()" },
{ "trigger": "ccui.PageView.addPage(layout)", "contents": "addPage(layout)" },
{ "trigger": "ccui.PageView.create()", "contents": "create()" },
{ "trigger": "ccui.PageView.createInstance()", "contents": "createInstance()" },
{ "trigger": "ccui.PageView.PageView()", "contents": "PageView()" },
{ "trigger": "ccui.Helper.getSubStringOfUTF8String(str, long, long)", "contents": "getSubStringOfUTF8String(str, long, long)" },
{ "trigger": "ccui.Helper.changeLayoutSystemActiveState(bool)", "contents": "changeLayoutSystemActiveState(bool)" },
{ "trigger": "ccui.Helper.seekActionWidgetByActionTag(widget, int)", "contents": "seekActionWidgetByActionTag(widget, int)" },
{ "trigger": "ccui.Helper.seekWidgetByName(widget, str)", "contents": "seekWidgetByName(widget, str)" },
{ "trigger": "ccui.Helper.seekWidgetByTag(widget, int)", "contents": "seekWidgetByTag(widget, int)" },
{ "trigger": "ccui.Helper.restrictCapInsetRect(rect, size)", "contents": "restrictCapInsetRect(rect, size)" },
{ "trigger": "ccui.Helper.doLayout(node)", "contents": "doLayout(node)" },
{ "trigger": "ccui.RichElement.init(int, color3b, char)", "contents": "init(int, color3b, char)" },
{ "trigger": "ccui.RichElement.RichElement()", "contents": "RichElement()" },
{ "trigger": "ccui.RichElementText.init(int, color3b, char, str, str, float)", "contents": "init(int, color3b, char, str, str, float)" },
{ "trigger": "ccui.RichElementText.create(int, color3b, char, str, str, float)", "contents": "create(int, color3b, char, str, str, float)" },
{ "trigger": "ccui.RichElementText.RichElementText()", "contents": "RichElementText()" },
{ "trigger": "ccui.RichElementImage.init(int, color3b, char, str)", "contents": "init(int, color3b, char, str)" },
{ "trigger": "ccui.RichElementImage.create(int, color3b, char, str)", "contents": "create(int, color3b, char, str)" },
{ "trigger": "ccui.RichElementImage.RichElementImage()", "contents": "RichElementImage()" },
{ "trigger": "ccui.RichElementCustomNode.init(int, color3b, char, node)", "contents": "init(int, color3b, char, node)" },
{ "trigger": "ccui.RichElementCustomNode.create(int, color3b, char, node)", "contents": "create(int, color3b, char, node)" },
{ "trigger": "ccui.RichElementCustomNode.RichElementCustomNode()", "contents": "RichElementCustomNode()" },
{ "trigger": "ccui.RichText.insertElement(richelement, int)", "contents": "insertElement(richelement, int)" },
{ "trigger": "ccui.RichText.pushBackElement(richelement)", "contents": "pushBackElement(richelement)" },
{ "trigger": "ccui.RichText.setVerticalSpace(float)", "contents": "setVerticalSpace(float)" },
{ "trigger": "ccui.RichText.formatText()", "contents": "formatText()" },
{ "trigger": "ccui.RichText.removeElement(int)", "contents": "removeElement(int)" },
{ "trigger": "ccui.RichText.create()", "contents": "create()" },
{ "trigger": "ccui.RichText.RichText()", "contents": "RichText()" },
{ "trigger": "ccui.HBox.initWithSize(size)", "contents": "initWithSize(size)" },
{ "trigger": "ccui.HBox.create(size)", "contents": "create(size)" },
{ "trigger": "ccui.HBox.HBox()", "contents": "HBox()" },
{ "trigger": "ccui.VBox.initWithSize(size)", "contents": "initWithSize(size)" },
{ "trigger": "ccui.VBox.create(size)", "contents": "create(size)" },
{ "trigger": "ccui.VBox.VBox()", "contents": "VBox()" },
{ "trigger": "ccui.RelativeBox.initWithSize(size)", "contents": "initWithSize(size)" },
{ "trigger": "ccui.RelativeBox.create(size)", "contents": "create(size)" },
{ "trigger": "ccui.RelativeBox.RelativeBox()", "contents": "RelativeBox()" },
{ "trigger": "ccui.Scale9Sprite.disableCascadeColor()", "contents": "disableCascadeColor()" },
{ "trigger": "ccui.Scale9Sprite.updateWithSprite(sprite, rect, bool, vec2, size, rect)", "contents": "updateWithSprite(sprite, rect, bool, vec2, size, rect)" },
{ "trigger": "ccui.Scale9Sprite.isFlippedX()", "contents": "isFlippedX()" },
{ "trigger": "ccui.Scale9Sprite.setScale9Enabled(bool)", "contents": "setScale9Enabled(bool)" },
{ "trigger": "ccui.Scale9Sprite.setFlippedY(bool)", "contents": "setFlippedY(bool)" },
{ "trigger": "ccui.Scale9Sprite.setFlippedX(bool)", "contents": "setFlippedX(bool)" },
{ "trigger": "ccui.Scale9Sprite.resizableSpriteWithCapInsets(rect)", "contents": "resizableSpriteWithCapInsets(rect)" },
{ "trigger": "ccui.Scale9Sprite.disableCascadeOpacity()", "contents": "disableCascadeOpacity()" },
{ "trigger": "ccui.Scale9Sprite.setState(state)", "contents": "setState(state)" },
{ "trigger": "ccui.Scale9Sprite.setInsetBottom(float)", "contents": "setInsetBottom(float)" },
{ "trigger": "ccui.Scale9Sprite.initWithSpriteFrameName(str, rect)", "contents": "initWithSpriteFrameName(str, rect)" },
{ "trigger": "ccui.Scale9Sprite.getSprite()", "contents": "getSprite()" },
{ "trigger": "ccui.Scale9Sprite.setInsetTop(float)", "contents": "setInsetTop(float)" },
{ "trigger": "ccui.Scale9Sprite.init(sprite, rect, bool, vec2, size, rect)", "contents": "init(sprite, rect, bool, vec2, size, rect)" },
{ "trigger": "ccui.Scale9Sprite.setPreferredSize(size)", "contents": "setPreferredSize(size)" },
{ "trigger": "ccui.Scale9Sprite.setSpriteFrame(spriteframe, rect)", "contents": "setSpriteFrame(spriteframe, rect)" },
{ "trigger": "ccui.Scale9Sprite.getBlendFunc()", "contents": "getBlendFunc()" },
{ "trigger": "ccui.Scale9Sprite.getInsetBottom()", "contents": "getInsetBottom()" },
{ "trigger": "ccui.Scale9Sprite.getCapInsets()", "contents": "getCapInsets()" },
{ "trigger": "ccui.Scale9Sprite.isScale9Enabled()", "contents": "isScale9Enabled()" },
{ "trigger": "ccui.Scale9Sprite.getInsetRight()", "contents": "getInsetRight()" },
{ "trigger": "ccui.Scale9Sprite.getOriginalSize()", "contents": "getOriginalSize()" },
{ "trigger": "ccui.Scale9Sprite.initWithFile(str, rect, rect)", "contents": "initWithFile(str, rect, rect)" },
{ "trigger": "ccui.Scale9Sprite.setBlendFunc(blendfunc)", "contents": "setBlendFunc(blendfunc)" },
{ "trigger": "ccui.Scale9Sprite.getInsetTop()", "contents": "getInsetTop()" },
{ "trigger": "ccui.Scale9Sprite.setInsetLeft(float)", "contents": "setInsetLeft(float)" },
{ "trigger": "ccui.Scale9Sprite.initWithSpriteFrame(spriteframe, rect)", "contents": "initWithSpriteFrame(spriteframe, rect)" },
{ "trigger": "ccui.Scale9Sprite.getPreferredSize()", "contents": "getPreferredSize()" },
{ "trigger": "ccui.Scale9Sprite.setCapInsets(rect)", "contents": "setCapInsets(rect)" },
{ "trigger": "ccui.Scale9Sprite.isFlippedY()", "contents": "isFlippedY()" },
{ "trigger": "ccui.Scale9Sprite.getInsetLeft()", "contents": "getInsetLeft()" },
{ "trigger": "ccui.Scale9Sprite.setInsetRight(float)", "contents": "setInsetRight(float)" },
{ "trigger": "ccui.Scale9Sprite.create(str, rect, rect)", "contents": "create(str, rect, rect)" },
{ "trigger": "ccui.Scale9Sprite.createWithSpriteFrameName(str, rect)", "contents": "createWithSpriteFrameName(str, rect)" },
{ "trigger": "ccui.Scale9Sprite.createWithSpriteFrame(spriteframe, rect)", "contents": "createWithSpriteFrame(spriteframe, rect)" },
{ "trigger": "ccui.Scale9Sprite.Scale9Sprite()", "contents": "Scale9Sprite()" },
{ "trigger": "ccui.EditBox.getText()", "contents": "getText()" },
{ "trigger": "ccui.EditBox.setFontSize(int)", "contents": "setFontSize(int)" },
{ "trigger": "ccui.EditBox.setPlaceholderFontName(char)", "contents": "setPlaceholderFontName(char)" },
{ "trigger": "ccui.EditBox.getPlaceHolder()", "contents": "getPlaceHolder()" },
{ "trigger": "ccui.EditBox.setFontName(char)", "contents": "setFontName(char)" },
{ "trigger": "ccui.EditBox.setText(char)", "contents": "setText(char)" },
{ "trigger": "ccui.EditBox.setPlaceholderFontSize(int)", "contents": "setPlaceholderFontSize(int)" },
{ "trigger": "ccui.EditBox.setInputMode(inputmode)", "contents": "setInputMode(inputmode)" },
{ "trigger": "ccui.EditBox.setPlaceholderFontColor(color3b)", "contents": "setPlaceholderFontColor(color3b)" },
{ "trigger": "ccui.EditBox.setFontColor(color3b)", "contents": "setFontColor(color3b)" },
{ "trigger": "ccui.EditBox.setPlaceholderFont(char, int)", "contents": "setPlaceholderFont(char, int)" },
{ "trigger": "ccui.EditBox.initWithSizeAndBackgroundSprite(size, str, texturerestype)", "contents": "initWithSizeAndBackgroundSprite(size, str, texturerestype)" },
{ "trigger": "ccui.EditBox.setPlaceHolder(char)", "contents": "setPlaceHolder(char)" },
{ "trigger": "ccui.EditBox.setReturnType(keyboardreturntype)", "contents": "setReturnType(keyboardreturntype)" },
{ "trigger": "ccui.EditBox.setInputFlag(inputflag)", "contents": "setInputFlag(inputflag)" },
{ "trigger": "ccui.EditBox.getMaxLength()", "contents": "getMaxLength()" },
{ "trigger": "ccui.EditBox.setMaxLength(int)", "contents": "setMaxLength(int)" },
{ "trigger": "ccui.EditBox.setFont(char, int)", "contents": "setFont(char, int)" },
{ "trigger": "ccui.EditBox.create(size, scale9sprite, scale9sprite, scale9sprite)", "contents": "create(size, scale9sprite, scale9sprite, scale9sprite)" },
{ "trigger": "ccui.EditBox.EditBox()", "contents": "EditBox()" },
{ "trigger": "ccui.LayoutComponent.setStretchWidthEnabled(bool)", "contents": "setStretchWidthEnabled(bool)" },
{ "trigger": "ccui.LayoutComponent.setPercentWidth(float)", "contents": "setPercentWidth(float)" },
{ "trigger": "ccui.LayoutComponent.getAnchorPosition()", "contents": "getAnchorPosition()" },
{ "trigger": "ccui.LayoutComponent.setPositionPercentXEnabled(bool)", "contents": "setPositionPercentXEnabled(bool)" },
{ "trigger": "ccui.LayoutComponent.setStretchHeightEnabled(bool)", "contents": "setStretchHeightEnabled(bool)" },
{ "trigger": "ccui.LayoutComponent.setActiveEnabled(bool)", "contents": "setActiveEnabled(bool)" },
{ "trigger": "ccui.LayoutComponent.getRightMargin()", "contents": "getRightMargin()" },
{ "trigger": "ccui.LayoutComponent.getSize()", "contents": "getSize()" },
{ "trigger": "ccui.LayoutComponent.setAnchorPosition(vec2)", "contents": "setAnchorPosition(vec2)" },
{ "trigger": "ccui.LayoutComponent.refreshLayout()", "contents": "refreshLayout()" },
{ "trigger": "ccui.LayoutComponent.isPercentWidthEnabled()", "contents": "isPercentWidthEnabled()" },
{ "trigger": "ccui.LayoutComponent.setVerticalEdge(verticaledge)", "contents": "setVerticalEdge(verticaledge)" },
{ "trigger": "ccui.LayoutComponent.getTopMargin()", "contents": "getTopMargin()" },
{ "trigger": "ccui.LayoutComponent.setSizeWidth(float)", "contents": "setSizeWidth(float)" },
{ "trigger": "ccui.LayoutComponent.getPercentContentSize()", "contents": "getPercentContentSize()" },
{ "trigger": "ccui.LayoutComponent.getVerticalEdge()", "contents": "getVerticalEdge()" },
{ "trigger": "ccui.LayoutComponent.setPercentWidthEnabled(bool)", "contents": "setPercentWidthEnabled(bool)" },
{ "trigger": "ccui.LayoutComponent.isStretchWidthEnabled()", "contents": "isStretchWidthEnabled()" },
{ "trigger": "ccui.LayoutComponent.setLeftMargin(float)", "contents": "setLeftMargin(float)" },
{ "trigger": "ccui.LayoutComponent.getSizeWidth()", "contents": "getSizeWidth()" },
{ "trigger": "ccui.LayoutComponent.setPositionPercentYEnabled(bool)", "contents": "setPositionPercentYEnabled(bool)" },
{ "trigger": "ccui.LayoutComponent.getSizeHeight()", "contents": "getSizeHeight()" },
{ "trigger": "ccui.LayoutComponent.getPositionPercentY()", "contents": "getPositionPercentY()" },
{ "trigger": "ccui.LayoutComponent.getPositionPercentX()", "contents": "getPositionPercentX()" },
{ "trigger": "ccui.LayoutComponent.setTopMargin(float)", "contents": "setTopMargin(float)" },
{ "trigger": "ccui.LayoutComponent.getPercentHeight()", "contents": "getPercentHeight()" },
{ "trigger": "ccui.LayoutComponent.getUsingPercentContentSize()", "contents": "getUsingPercentContentSize()" },
{ "trigger": "ccui.LayoutComponent.setPositionPercentY(float)", "contents": "setPositionPercentY(float)" },
{ "trigger": "ccui.LayoutComponent.setPositionPercentX(float)", "contents": "setPositionPercentX(float)" },
{ "trigger": "ccui.LayoutComponent.setRightMargin(float)", "contents": "setRightMargin(float)" },
{ "trigger": "ccui.LayoutComponent.isPositionPercentYEnabled()", "contents": "isPositionPercentYEnabled()" },
{ "trigger": "ccui.LayoutComponent.setPercentHeight(float)", "contents": "setPercentHeight(float)" },
{ "trigger": "ccui.LayoutComponent.setPercentOnlyEnabled(bool)", "contents": "setPercentOnlyEnabled(bool)" },
{ "trigger": "ccui.LayoutComponent.setHorizontalEdge(horizontaledge)", "contents": "setHorizontalEdge(horizontaledge)" },
{ "trigger": "ccui.LayoutComponent.setPosition(vec2)", "contents": "setPosition(vec2)" },
{ "trigger": "ccui.LayoutComponent.setUsingPercentContentSize(bool)", "contents": "setUsingPercentContentSize(bool)" },
{ "trigger": "ccui.LayoutComponent.getLeftMargin()", "contents": "getLeftMargin()" },
{ "trigger": "ccui.LayoutComponent.getPosition()", "contents": "getPosition()" },
{ "trigger": "ccui.LayoutComponent.setSizeHeight(float)", "contents": "setSizeHeight(float)" },
{ "trigger": "ccui.LayoutComponent.isPositionPercentXEnabled()", "contents": "isPositionPercentXEnabled()" },
{ "trigger": "ccui.LayoutComponent.getBottomMargin()", "contents": "getBottomMargin()" },
{ "trigger": "ccui.LayoutComponent.setPercentHeightEnabled(bool)", "contents": "setPercentHeightEnabled(bool)" },
{ "trigger": "ccui.LayoutComponent.setPercentContentSize(vec2)", "contents": "setPercentContentSize(vec2)" },
{ "trigger": "ccui.LayoutComponent.isPercentHeightEnabled()", "contents": "isPercentHeightEnabled()" },
{ "trigger": "ccui.LayoutComponent.getPercentWidth()", "contents": "getPercentWidth()" },
{ "trigger": "ccui.LayoutComponent.getHorizontalEdge()", "contents": "getHorizontalEdge()" },
{ "trigger": "ccui.LayoutComponent.isStretchHeightEnabled()", "contents": "isStretchHeightEnabled()" },
{ "trigger": "ccui.LayoutComponent.setBottomMargin(float)", "contents": "setBottomMargin(float)" },
{ "trigger": "ccui.LayoutComponent.setSize(size)", "contents": "setSize(size)" },
{ "trigger": "ccui.LayoutComponent.create()", "contents": "create()" },
{ "trigger": "ccui.LayoutComponent.bindLayoutComponent(node)", "contents": "bindLayoutComponent(node)" },
{ "trigger": "ccui.LayoutComponent.LayoutComponent()", "contents": "LayoutComponent()" },
]
}
